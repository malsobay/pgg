{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/batches.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/empirica:core/api/batches/batches.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/batches.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/batches.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/batches/batches.js"}},"code":"var _createSuper;\n\nmodule.link(\"@babel/runtime/helpers/createSuper\", {\n  default: function (v) {\n    _createSuper = v;\n  }\n}, 0);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\nmodule.export({\n  Batches: function () {\n    return Batches;\n  },\n  maxGamesCount: function () {\n    return maxGamesCount;\n  },\n  assignmentTypes: function () {\n    return assignmentTypes;\n  }\n});\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar statusSchema;\nmodule.link(\"./status-schema\", {\n  statusSchema: function (v) {\n    statusSchema = v;\n  }\n}, 1);\nvar ArchivedSchema, TimestampSchema, HasManyByRef, DebugModeSchema;\nmodule.link(\"../default-schemas\", {\n  ArchivedSchema: function (v) {\n    ArchivedSchema = v;\n  },\n  TimestampSchema: function (v) {\n    TimestampSchema = v;\n  },\n  HasManyByRef: function (v) {\n    HasManyByRef = v;\n  },\n  DebugModeSchema: function (v) {\n    DebugModeSchema = v;\n  }\n}, 2);\nvar Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments: function (v) {\n    Treatments = v;\n  }\n}, 3);\nvar Counter;\nmodule.link(\"../../lib/counters\", {\n  Counter: function (v) {\n    Counter = v;\n  }\n}, 4);\n\nvar BatchesCollection = /*#__PURE__*/function (_Mongo$Collection) {\n  _inheritsLoose(BatchesCollection, _Mongo$Collection);\n\n  var _super = _createSuper(BatchesCollection);\n\n  function BatchesCollection() {\n    return _Mongo$Collection.apply(this, arguments) || this;\n  }\n\n  var _proto = BatchesCollection.prototype;\n\n  _proto.insert = function () {\n    function insert(doc, callback) {\n      doc.index = Counter.inc(\"batches\");\n      return _Mongo$Collection.prototype.insert.call(this, doc, callback);\n    }\n\n    return insert;\n  }();\n\n  return BatchesCollection;\n}(Mongo.Collection);\n\nvar Batches = new BatchesCollection(\"batches\");\nBatches.helpers({\n  gameCount: function () {\n    return this.assignment === \"simple\" ? this.simpleConfig.count : this.completeGameCount();\n  },\n  completeGameCount: function () {\n    return _.reduce(this.completeConfig.treatments, function (sum, t) {\n      return sum + t.count;\n    }, 0);\n  },\n  duplicate: function () {\n    var assignment = this.assignment,\n        simpleConfig = this.simpleConfig,\n        completeConfig = this.completeConfig;\n    Batches.insert({\n      assignment: assignment,\n      simpleConfig: simpleConfig,\n      completeConfig: completeConfig,\n      status: \"init\"\n    });\n  }\n});\nvar maxGamesCount = 10000000;\nvar assignmentTypes = {\n  simple: \"Simple\",\n  complete: \"Complete\"\n};\nBatches.schema = new SimpleSchema({\n  // Auto-incremented number assigned to batches as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n  assignment: {\n    type: String,\n    // \"custom\" not yet supported\n    allowedValues: [\"simple\", \"complete\", \"custom\"]\n  },\n  full: {\n    label: \"Batch is full, all games are running\",\n    type: Boolean,\n    defaultValue: false\n  },\n  runningAt: {\n    label: \"Time when batch started running\",\n    type: Date,\n    optional: true\n  },\n  finishedAt: {\n    label: \"Time when batch finished running\",\n    type: Date,\n    optional: true\n  },\n  // Simple configuration at init\n  simpleConfig: {\n    type: Object,\n    optional: true,\n    custom: function () {\n      if (!this.value && this.field(\"assignment\").value === \"simple\") {\n        return \"required\";\n      }\n    }\n  },\n  \"simpleConfig.count\": {\n    type: SimpleSchema.Integer,\n    min: 1,\n    max: maxGamesCount\n  },\n  \"simpleConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount: function () {\n      return Treatments.find().count();\n    }\n  },\n  \"simpleConfig.treatments.$\": {\n    type: Object\n  },\n  \"simpleConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"simpleConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  // Complete configuration at init\n  completeConfig: {\n    type: Object,\n    optional: true,\n    custom: function () {\n      if (!this.value && this.field(\"assignment\").value === \"complete\") {\n        return \"required\";\n      }\n    }\n  },\n  \"completeConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount: function () {\n      return Treatments.find().count();\n    }\n  },\n  \"completeConfig.treatments.$\": {\n    type: Object\n  },\n  \"completeConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"completeConfig.treatments.$.count\": {\n    type: SimpleSchema.Integer,\n    minCount: 1,\n    maxCount: maxGamesCount\n  },\n  \"completeConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Batches.schema.extend(DebugModeSchema);\n}\n\nBatches.schema.extend(statusSchema);\nBatches.schema.extend(TimestampSchema);\nBatches.schema.extend(ArchivedSchema);\nBatches.schema.extend(HasManyByRef(\"Games\"));\nBatches.schema.extend(HasManyByRef(\"GameLobbies\"));\nBatches.attachSchema(Batches.schema);","map":{"version":3,"sources":["packages/empirica:core/api/batches/batches.js"],"names":["_createSuper","module","link","default","v","_inheritsLoose","export","Batches","maxGamesCount","assignmentTypes","SimpleSchema","statusSchema","ArchivedSchema","TimestampSchema","HasManyByRef","DebugModeSchema","Treatments","Counter","BatchesCollection","insert","doc","callback","index","inc","Mongo","Collection","helpers","gameCount","assignment","simpleConfig","count","completeGameCount","_","reduce","completeConfig","treatments","sum","t","duplicate","status","simple","complete","schema","type","Integer","String","allowedValues","full","label","Boolean","defaultValue","runningAt","Date","optional","finishedAt","Object","custom","value","field","min","max","Array","minCount","maxCount","find","regEx","RegEx","Id","Meteor","isDevelopment","settings","public","debug_gameDebugMode","extend","attachSchema"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\n\nimport { statusSchema } from \"./status-schema\";\nimport {\n  ArchivedSchema,\n  TimestampSchema,\n  HasManyByRef,\n  DebugModeSchema\n} from \"../default-schemas\";\nimport { Treatments } from \"../treatments/treatments\";\nimport { Counter } from \"../../lib/counters\";\n\nclass BatchesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"batches\");\n    return super.insert(doc, callback);\n  }\n}\n\nexport const Batches = new BatchesCollection(\"batches\");\n\nBatches.helpers({\n  gameCount() {\n    return this.assignment === \"simple\"\n      ? this.simpleConfig.count\n      : this.completeGameCount();\n  },\n\n  completeGameCount() {\n    return _.reduce(\n      this.completeConfig.treatments,\n      (sum, t) => sum + t.count,\n      0\n    );\n  },\n\n  duplicate() {\n    const { assignment, simpleConfig, completeConfig } = this;\n    Batches.insert({\n      assignment,\n      simpleConfig,\n      completeConfig,\n      status: \"init\"\n    });\n  }\n});\n\nexport const maxGamesCount = 10000000;\n\nexport const assignmentTypes = {\n  simple: \"Simple\",\n  complete: \"Complete\"\n};\n\nBatches.schema = new SimpleSchema({\n  // Auto-incremented number assigned to batches as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n\n  assignment: {\n    type: String,\n    // \"custom\" not yet supported\n    allowedValues: [\"simple\", \"complete\", \"custom\"]\n  },\n\n  full: {\n    label: \"Batch is full, all games are running\",\n    type: Boolean,\n    defaultValue: false\n  },\n\n  runningAt: {\n    label: \"Time when batch started running\",\n    type: Date,\n    optional: true\n  },\n\n  finishedAt: {\n    label: \"Time when batch finished running\",\n    type: Date,\n    optional: true\n  },\n\n  // Simple configuration at init\n  simpleConfig: {\n    type: Object,\n    optional: true,\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"simple\") {\n        return \"required\";\n      }\n    }\n  },\n  \"simpleConfig.count\": {\n    type: SimpleSchema.Integer,\n    min: 1,\n    max: maxGamesCount\n  },\n  \"simpleConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount() {\n      return Treatments.find().count();\n    }\n  },\n  \"simpleConfig.treatments.$\": {\n    type: Object\n  },\n  \"simpleConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"simpleConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n\n  // Complete configuration at init\n  completeConfig: {\n    type: Object,\n    optional: true,\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"complete\") {\n        return \"required\";\n      }\n    }\n  },\n  \"completeConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount() {\n      return Treatments.find().count();\n    }\n  },\n  \"completeConfig.treatments.$\": {\n    type: Object\n  },\n  \"completeConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"completeConfig.treatments.$.count\": {\n    type: SimpleSchema.Integer,\n    minCount: 1,\n    maxCount: maxGamesCount\n  },\n  \"completeConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Batches.schema.extend(DebugModeSchema);\n}\n\nBatches.schema.extend(statusSchema);\nBatches.schema.extend(TimestampSchema);\nBatches.schema.extend(ArchivedSchema);\nBatches.schema.extend(HasManyByRef(\"Games\"));\nBatches.schema.extend(HasManyByRef(\"GameLobbies\"));\nBatches.attachSchema(Batches.schema);\n"]},"sourceType":"module","hash":"f23e6080779a4f9bd70ad1b1d3cea0ddab9b20fa"}
