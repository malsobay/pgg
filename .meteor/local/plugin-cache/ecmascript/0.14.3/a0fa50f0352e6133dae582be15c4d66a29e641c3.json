{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewLobbyConfig.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewLobbyConfig.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewLobbyConfig.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewLobbyConfig.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewLobbyConfig.jsx"}},"code":"module.export({\n  default: () => AdminNewLobbyConfig\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet inflection;\nmodule.link(\"inflection\", {\n  default(v) {\n    inflection = v;\n  }\n\n}, 1);\nlet Classes, Button, Dialog, FormGroup, HTMLSelect, Intent, NumericInput;\nmodule.link(\"@blueprintjs/core\", {\n  Classes(v) {\n    Classes = v;\n  },\n\n  Button(v) {\n    Button = v;\n  },\n\n  Dialog(v) {\n    Dialog = v;\n  },\n\n  FormGroup(v) {\n    FormGroup = v;\n  },\n\n  HTMLSelect(v) {\n    HTMLSelect = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  },\n\n  NumericInput(v) {\n    NumericInput = v;\n  }\n\n}, 2);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 3);\nlet AlertToaster;\nmodule.link(\"../Toasters.jsx\", {\n  AlertToaster(v) {\n    AlertToaster = v;\n  }\n\n}, 4);\nlet LobbyConfigs;\nmodule.link(\"../../../api/lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 5);\nlet createLobbyConfig;\nmodule.link(\"../../../api/lobby-configs/methods.js\", {\n  createLobbyConfig(v) {\n    createLobbyConfig = v;\n  }\n\n}, 6);\nlet HelpTooltip;\nmodule.link(\"../HelpTooltip.jsx\", {\n  default(v) {\n    HelpTooltip = v;\n  }\n\n}, 7);\n\nclass AdminNewLobbyConfig extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      name: \"\",\n      timeoutInSeconds: LobbyConfigs.defaultTimeoutInSeconds,\n      timeoutType: LobbyConfigs.timeoutTypes[0],\n      timeoutStrategy: LobbyConfigs.timeoutStrategies[0],\n      extendCount: 0\n    };\n\n    this.handleChange = (_ref) => {\n      let {\n        currentTarget: {\n          value,\n          name\n        }\n      } = _ref;\n      this.setState({\n        [name]: value.trim()\n      });\n    };\n\n    this.handleIntChange = (name, value) => {\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleNewLobbyConfig = event => {\n      const {\n        onClose\n      } = this.props;\n      const {\n        name,\n        timeoutInSeconds,\n        timeoutType,\n        timeoutStrategy,\n        extendCount\n      } = this.state;\n      event.preventDefault();\n      const params = {\n        timeoutInSeconds,\n        timeoutType\n      };\n\n      if (name !== \"\") {\n        params.name = name;\n      }\n\n      if (timeoutType === \"lobby\") {\n        params.timeoutStrategy = timeoutStrategy;\n      } else if (timeoutType === \"individual\") {\n        params.extendCount = extendCount;\n      }\n\n      createLobbyConfig.call(params, err => {\n        if (err) {\n          AlertToaster.show({\n            message: String(err.message)\n          });\n          return;\n        }\n\n        onClose();\n        this.setState({\n          name: \"\"\n        });\n      });\n    };\n  }\n\n  render() {\n    const {\n      isOpen,\n      onClose\n    } = this.props;\n    const {\n      name,\n      timeoutType,\n      timeoutStrategy,\n      timeoutInSeconds,\n      extendCount\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Dialog, {\n      icon: IconNames.TIME,\n      isOpen: isOpen,\n      onClose: onClose,\n      title: \"New Lobby Configuration\"\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"new-treatment\",\n      onSubmit: this.handleNewLobbyConfig\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Name\",\n      labelInfo: \"(optional)\",\n      labelFor: \"name\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: Classes.INPUT,\n      type: \"text\",\n      dir: \"auto\",\n      name: \"name\",\n      id: \"name\",\n      autoComplete: \"off\",\n      value: name,\n      onChange: this.handleChange,\n      pattern: /^[a-zA-Z0-9_]+$/.source\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Timeout Type\",\n      labelFor: \"timeoutType\",\n      labelInfo: /*#__PURE__*/React.createElement(HelpTooltip, {\n        content: /*#__PURE__*/React.createElement(\"div\", null, \"There are 2 timeout types:\", /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Lobby:\"), \" the timeout start when the first player reaches the lobby and runs out for all the players whether they have even reached the lobby or not.\"), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Individual:\"), \" the timeout is started for each player as they reach the room. Some players might time out before all players are in the lobby, they might continue waiting for another timeout period. They might also leave the game and a new player can replace them. The lobby itself never times out.\")))\n      })\n    }, /*#__PURE__*/React.createElement(HTMLSelect, {\n      name: \"timeoutType\",\n      id: \"timeoutType\",\n      onChange: this.handleChange,\n      value: timeoutType\n    }, _.map(LobbyConfigs.timeoutTypes, key => /*#__PURE__*/React.createElement(\"option\", {\n      key: key,\n      value: key\n    }, inflection.titleize(key))))), /*#__PURE__*/React.createElement(FormGroup, {\n      required: true,\n      label: \"Timeout Duration in Seconds\",\n      labelFor: \"timeoutInSeconds\"\n    }, /*#__PURE__*/React.createElement(NumericInput, {\n      name: \"timeoutInSeconds\",\n      id: \"timeoutInSeconds\",\n      min: \"1\",\n      max: LobbyConfigs.maxTimeoutInSeconds,\n      stepSize: \"1\",\n      majorStepSize: \"10\",\n      onValueChange: this.handleIntChange.bind(this, \"timeoutInSeconds\"),\n      value: timeoutInSeconds,\n      required: true\n    })), timeoutType === \"individual\" ? /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Extend Count\",\n      labelFor: \"extendCount\",\n      labelInfo: /*#__PURE__*/React.createElement(HelpTooltip, {\n        content: /*#__PURE__*/React.createElement(\"div\", null, \"Number of times to allow the user to extend their wait time by the initial timeout time. If set to 0, they are never asked to retry.\")\n      })\n    }, /*#__PURE__*/React.createElement(NumericInput, {\n      name: \"extendCount\",\n      id: \"extendCount\",\n      min: \"0\",\n      max: 1000000000,\n      stepSize: \"1\",\n      majorStepSize: \"10\",\n      onValueChange: this.handleIntChange.bind(this, \"extendCount\"),\n      value: extendCount,\n      required: true\n    })) : \"\", timeoutType === \"lobby\" ? /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Timeout Strategy\",\n      labelFor: \"timeoutStrategy\",\n      labelInfo: /*#__PURE__*/React.createElement(HelpTooltip, {\n        content: /*#__PURE__*/React.createElement(\"div\", null, \"The Timeout Strategy determines what to do in case people are waiting in the lobby for longer than the timeout duration. Available strategies:\", /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Ignore:\"), \" start the game anyway\"), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Fail:\"), \" take the player to the exit survey\"), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Bots:\"), \" fill the missing players slots with bots from timeoutBots.\")))\n      })\n    }, /*#__PURE__*/React.createElement(HTMLSelect, {\n      name: \"timeoutStrategy\",\n      id: \"timeoutStrategy\",\n      onChange: this.handleChange,\n      value: timeoutStrategy\n    }, _.map(LobbyConfigs.timeoutStrategies, key => /*#__PURE__*/React.createElement(\"option\", {\n      key: key,\n      value: key\n    }, inflection.titleize(key))))) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER_ACTIONS\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      text: \"Create Lobby Configuration\",\n      intent: Intent.PRIMARY\n    })))));\n  }\n\n}","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminNewLobbyConfig.jsx"],"names":["module","export","default","AdminNewLobbyConfig","React","link","v","inflection","Classes","Button","Dialog","FormGroup","HTMLSelect","Intent","NumericInput","IconNames","AlertToaster","LobbyConfigs","createLobbyConfig","HelpTooltip","Component","state","name","timeoutInSeconds","defaultTimeoutInSeconds","timeoutType","timeoutTypes","timeoutStrategy","timeoutStrategies","extendCount","handleChange","currentTarget","value","setState","trim","handleIntChange","handleNewLobbyConfig","event","onClose","props","preventDefault","params","call","err","show","message","String","render","isOpen","TIME","DIALOG_BODY","INPUT","source","_","map","key","titleize","maxTimeoutInSeconds","bind","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport inflection from \"inflection\";\n\nimport {\n  Classes,\n  Button,\n  Dialog,\n  FormGroup,\n  HTMLSelect,\n  Intent,\n  NumericInput\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport { AlertToaster } from \"../Toasters.jsx\";\nimport { LobbyConfigs } from \"../../../api/lobby-configs/lobby-configs.js\";\nimport { createLobbyConfig } from \"../../../api/lobby-configs/methods.js\";\nimport HelpTooltip from \"../HelpTooltip.jsx\";\n\nexport default class AdminNewLobbyConfig extends React.Component {\n  state = {\n    name: \"\",\n    timeoutInSeconds: LobbyConfigs.defaultTimeoutInSeconds,\n    timeoutType: LobbyConfigs.timeoutTypes[0],\n    timeoutStrategy: LobbyConfigs.timeoutStrategies[0],\n    extendCount: 0\n  };\n\n  handleChange = ({ currentTarget: { value, name } }) => {\n    this.setState({ [name]: value.trim() });\n  };\n\n  handleIntChange = (name, value) => {\n    this.setState({ [name]: value });\n  };\n\n  handleNewLobbyConfig = event => {\n    const { onClose } = this.props;\n    const {\n      name,\n      timeoutInSeconds,\n      timeoutType,\n      timeoutStrategy,\n      extendCount\n    } = this.state;\n    event.preventDefault();\n\n    const params = { timeoutInSeconds, timeoutType };\n    if (name !== \"\") {\n      params.name = name;\n    }\n    if (timeoutType === \"lobby\") {\n      params.timeoutStrategy = timeoutStrategy;\n    } else if (timeoutType === \"individual\") {\n      params.extendCount = extendCount;\n    }\n\n    createLobbyConfig.call(params, err => {\n      if (err) {\n        AlertToaster.show({ message: String(err.message) });\n        return;\n      }\n      onClose();\n      this.setState({\n        name: \"\"\n      });\n    });\n  };\n\n  render() {\n    const { isOpen, onClose } = this.props;\n    const {\n      name,\n      timeoutType,\n      timeoutStrategy,\n      timeoutInSeconds,\n      extendCount\n    } = this.state;\n\n    return (\n      <Dialog\n        icon={IconNames.TIME}\n        isOpen={isOpen}\n        onClose={onClose}\n        title=\"New Lobby Configuration\"\n      >\n        <form className=\"new-treatment\" onSubmit={this.handleNewLobbyConfig}>\n          <div className={Classes.DIALOG_BODY}>\n            <FormGroup label=\"Name\" labelInfo=\"(optional)\" labelFor=\"name\">\n              <input\n                className={Classes.INPUT}\n                type=\"text\"\n                dir=\"auto\"\n                name=\"name\"\n                id=\"name\"\n                autoComplete=\"off\"\n                value={name}\n                onChange={this.handleChange}\n                pattern={/^[a-zA-Z0-9_]+$/.source}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label=\"Timeout Type\"\n              labelFor=\"timeoutType\"\n              labelInfo={\n                <HelpTooltip\n                  content={\n                    <div>\n                      There are 2 timeout types:\n                      <ul>\n                        <li>\n                          <strong>Lobby:</strong> the timeout start when the\n                          first player reaches the lobby and runs out for all\n                          the players whether they have even reached the lobby\n                          or not.\n                        </li>\n                        <li>\n                          <strong>Individual:</strong> the timeout is started\n                          for each player as they reach the room. Some players\n                          might time out before all players are in the lobby,\n                          they might continue waiting for another timeout\n                          period. They might also leave the game and a new\n                          player can replace them. The lobby itself never times\n                          out.\n                        </li>\n                      </ul>\n                    </div>\n                  }\n                />\n              }\n            >\n              <HTMLSelect\n                name=\"timeoutType\"\n                id=\"timeoutType\"\n                onChange={this.handleChange}\n                value={timeoutType}\n              >\n                {_.map(LobbyConfigs.timeoutTypes, key => (\n                  <option key={key} value={key}>\n                    {inflection.titleize(key)}\n                  </option>\n                ))}\n              </HTMLSelect>\n            </FormGroup>\n\n            <FormGroup\n              required\n              label=\"Timeout Duration in Seconds\"\n              labelFor=\"timeoutInSeconds\"\n            >\n              <NumericInput\n                name=\"timeoutInSeconds\"\n                id=\"timeoutInSeconds\"\n                min=\"1\"\n                max={LobbyConfigs.maxTimeoutInSeconds}\n                stepSize=\"1\"\n                majorStepSize=\"10\"\n                onValueChange={this.handleIntChange.bind(\n                  this,\n                  \"timeoutInSeconds\"\n                )}\n                value={timeoutInSeconds}\n                required\n              />\n            </FormGroup>\n\n            {timeoutType === \"individual\" ? (\n              <FormGroup\n                label=\"Extend Count\"\n                labelFor=\"extendCount\"\n                labelInfo={\n                  <HelpTooltip\n                    content={\n                      <div>\n                        Number of times to allow the user to extend their wait\n                        time by the initial timeout time. If set to 0, they are\n                        never asked to retry.\n                      </div>\n                    }\n                  />\n                }\n              >\n                <NumericInput\n                  name=\"extendCount\"\n                  id=\"extendCount\"\n                  min=\"0\"\n                  max={1000000000}\n                  stepSize=\"1\"\n                  majorStepSize=\"10\"\n                  onValueChange={this.handleIntChange.bind(this, \"extendCount\")}\n                  value={extendCount}\n                  required\n                />\n              </FormGroup>\n            ) : (\n              \"\"\n            )}\n\n            {timeoutType === \"lobby\" ? (\n              <FormGroup\n                label=\"Timeout Strategy\"\n                labelFor=\"timeoutStrategy\"\n                labelInfo={\n                  <HelpTooltip\n                    content={\n                      <div>\n                        The Timeout Strategy determines what to do in case\n                        people are waiting in the lobby for longer than the\n                        timeout duration. Available strategies:\n                        <ul>\n                          <li>\n                            <strong>Ignore:</strong> start the game anyway\n                          </li>\n                          <li>\n                            <strong>Fail:</strong> take the player to the exit\n                            survey\n                          </li>\n                          <li>\n                            <strong>Bots:</strong> fill the missing players\n                            slots with bots from timeoutBots.\n                          </li>\n                        </ul>\n                      </div>\n                    }\n                  />\n                }\n              >\n                <HTMLSelect\n                  name=\"timeoutStrategy\"\n                  id=\"timeoutStrategy\"\n                  onChange={this.handleChange}\n                  value={timeoutStrategy}\n                >\n                  {_.map(LobbyConfigs.timeoutStrategies, key => (\n                    <option key={key} value={key}>\n                      {inflection.titleize(key)}\n                    </option>\n                  ))}\n                </HTMLSelect>\n              </FormGroup>\n            ) : (\n              \"\"\n            )}\n          </div>\n\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              <Button\n                type=\"submit\"\n                text=\"Create Lobby Configuration\"\n                intent={Intent.PRIMARY}\n              />\n            </div>\n          </div>\n        </form>\n      </Dialog>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"a0fa50f0352e6133dae582be15c4d66a29e641c3"}
