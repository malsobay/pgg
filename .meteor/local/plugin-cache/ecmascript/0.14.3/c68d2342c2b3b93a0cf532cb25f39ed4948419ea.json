{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/batches.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/api/batches/batches.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/batches.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/batches.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/batches/batches.js"}},"code":"module.export({\n  Batches: () => Batches,\n  maxGamesCount: () => maxGamesCount,\n  assignmentTypes: () => assignmentTypes\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet statusSchema;\nmodule.link(\"./status-schema\", {\n  statusSchema(v) {\n    statusSchema = v;\n  }\n\n}, 1);\nlet ArchivedSchema, TimestampSchema, HasManyByRef, DebugModeSchema;\nmodule.link(\"../default-schemas\", {\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  },\n\n  DebugModeSchema(v) {\n    DebugModeSchema = v;\n  }\n\n}, 2);\nlet Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 3);\nlet Counter;\nmodule.link(\"../../lib/counters\", {\n  Counter(v) {\n    Counter = v;\n  }\n\n}, 4);\n\nclass BatchesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"batches\");\n    return super.insert(doc, callback);\n  }\n\n}\n\nconst Batches = new BatchesCollection(\"batches\");\nBatches.helpers({\n  gameCount() {\n    return this.assignment === \"simple\" ? this.simpleConfig.count : this.completeGameCount();\n  },\n\n  completeGameCount() {\n    return _.reduce(this.completeConfig.treatments, (sum, t) => sum + t.count, 0);\n  },\n\n  duplicate() {\n    const {\n      assignment,\n      simpleConfig,\n      completeConfig\n    } = this;\n    Batches.insert({\n      assignment,\n      simpleConfig,\n      completeConfig,\n      status: \"init\"\n    });\n  }\n\n});\nconst maxGamesCount = 10000000;\nconst assignmentTypes = {\n  simple: \"Simple\",\n  complete: \"Complete\"\n};\nBatches.schema = new SimpleSchema({\n  // Auto-incremented number assigned to batches as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n  assignment: {\n    type: String,\n    // \"custom\" not yet supported\n    allowedValues: [\"simple\", \"complete\", \"custom\"]\n  },\n  full: {\n    label: \"Batch is full, all games are running\",\n    type: Boolean,\n    defaultValue: false\n  },\n  runningAt: {\n    label: \"Time when batch started running\",\n    type: Date,\n    optional: true\n  },\n  finishedAt: {\n    label: \"Time when batch finished running\",\n    type: Date,\n    optional: true\n  },\n  // Simple configuration at init\n  simpleConfig: {\n    type: Object,\n    optional: true,\n\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"simple\") {\n        return \"required\";\n      }\n    }\n\n  },\n  \"simpleConfig.count\": {\n    type: SimpleSchema.Integer,\n    min: 1,\n    max: maxGamesCount\n  },\n  \"simpleConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n\n    maxCount() {\n      return Treatments.find().count();\n    }\n\n  },\n  \"simpleConfig.treatments.$\": {\n    type: Object\n  },\n  \"simpleConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"simpleConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  // Complete configuration at init\n  completeConfig: {\n    type: Object,\n    optional: true,\n\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"complete\") {\n        return \"required\";\n      }\n    }\n\n  },\n  \"completeConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n\n    maxCount() {\n      return Treatments.find().count();\n    }\n\n  },\n  \"completeConfig.treatments.$\": {\n    type: Object\n  },\n  \"completeConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"completeConfig.treatments.$.count\": {\n    type: SimpleSchema.Integer,\n    minCount: 1,\n    maxCount: maxGamesCount\n  },\n  \"completeConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Batches.schema.extend(DebugModeSchema);\n}\n\nBatches.schema.extend(statusSchema);\nBatches.schema.extend(TimestampSchema);\nBatches.schema.extend(ArchivedSchema);\nBatches.schema.extend(HasManyByRef(\"Games\"));\nBatches.schema.extend(HasManyByRef(\"GameLobbies\"));\nBatches.attachSchema(Batches.schema);","map":{"version":3,"sources":["packages/empirica:core/api/batches/batches.js"],"names":["module","export","Batches","maxGamesCount","assignmentTypes","SimpleSchema","link","default","v","statusSchema","ArchivedSchema","TimestampSchema","HasManyByRef","DebugModeSchema","Treatments","Counter","BatchesCollection","Mongo","Collection","insert","doc","callback","index","inc","helpers","gameCount","assignment","simpleConfig","count","completeGameCount","_","reduce","completeConfig","treatments","sum","t","duplicate","status","simple","complete","schema","type","Integer","String","allowedValues","full","label","Boolean","defaultValue","runningAt","Date","optional","finishedAt","Object","custom","value","field","min","max","Array","minCount","maxCount","find","regEx","RegEx","Id","Meteor","isDevelopment","settings","public","debug_gameDebugMode","extend","attachSchema"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\n\nimport { statusSchema } from \"./status-schema\";\nimport {\n  ArchivedSchema,\n  TimestampSchema,\n  HasManyByRef,\n  DebugModeSchema\n} from \"../default-schemas\";\nimport { Treatments } from \"../treatments/treatments\";\nimport { Counter } from \"../../lib/counters\";\n\nclass BatchesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"batches\");\n    return super.insert(doc, callback);\n  }\n}\n\nexport const Batches = new BatchesCollection(\"batches\");\n\nBatches.helpers({\n  gameCount() {\n    return this.assignment === \"simple\"\n      ? this.simpleConfig.count\n      : this.completeGameCount();\n  },\n\n  completeGameCount() {\n    return _.reduce(\n      this.completeConfig.treatments,\n      (sum, t) => sum + t.count,\n      0\n    );\n  },\n\n  duplicate() {\n    const { assignment, simpleConfig, completeConfig } = this;\n    Batches.insert({\n      assignment,\n      simpleConfig,\n      completeConfig,\n      status: \"init\"\n    });\n  }\n});\n\nexport const maxGamesCount = 10000000;\n\nexport const assignmentTypes = {\n  simple: \"Simple\",\n  complete: \"Complete\"\n};\n\nBatches.schema = new SimpleSchema({\n  // Auto-incremented number assigned to batches as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n\n  assignment: {\n    type: String,\n    // \"custom\" not yet supported\n    allowedValues: [\"simple\", \"complete\", \"custom\"]\n  },\n\n  full: {\n    label: \"Batch is full, all games are running\",\n    type: Boolean,\n    defaultValue: false\n  },\n\n  runningAt: {\n    label: \"Time when batch started running\",\n    type: Date,\n    optional: true\n  },\n\n  finishedAt: {\n    label: \"Time when batch finished running\",\n    type: Date,\n    optional: true\n  },\n\n  // Simple configuration at init\n  simpleConfig: {\n    type: Object,\n    optional: true,\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"simple\") {\n        return \"required\";\n      }\n    }\n  },\n  \"simpleConfig.count\": {\n    type: SimpleSchema.Integer,\n    min: 1,\n    max: maxGamesCount\n  },\n  \"simpleConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount() {\n      return Treatments.find().count();\n    }\n  },\n  \"simpleConfig.treatments.$\": {\n    type: Object\n  },\n  \"simpleConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"simpleConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n\n  // Complete configuration at init\n  completeConfig: {\n    type: Object,\n    optional: true,\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"complete\") {\n        return \"required\";\n      }\n    }\n  },\n  \"completeConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount() {\n      return Treatments.find().count();\n    }\n  },\n  \"completeConfig.treatments.$\": {\n    type: Object\n  },\n  \"completeConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"completeConfig.treatments.$.count\": {\n    type: SimpleSchema.Integer,\n    minCount: 1,\n    maxCount: maxGamesCount\n  },\n  \"completeConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Batches.schema.extend(DebugModeSchema);\n}\n\nBatches.schema.extend(statusSchema);\nBatches.schema.extend(TimestampSchema);\nBatches.schema.extend(ArchivedSchema);\nBatches.schema.extend(HasManyByRef(\"Games\"));\nBatches.schema.extend(HasManyByRef(\"GameLobbies\"));\nBatches.attachSchema(Batches.schema);\n"]},"sourceType":"module","hash":"c68d2342c2b3b93a0cf532cb25f39ed4948419ea"}
