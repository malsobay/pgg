{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/factor-types/factor-types.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/empirica:core/api/factor-types/factor-types.js","filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/factor-types/factor-types.js","passPerPreset":false,"envName":"production","cwd":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","root":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/factor-types/factor-types.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/factor-types/factor-types.js"}},"code":"module.export({\n  FactorTypes: () => FactorTypes\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ArchivedSchema, TimestampSchema;\nmodule.link(\"../default-schemas.js\", {\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 1);\nconst FactorTypes = new Mongo.Collection(\"factor_types\");\nFactorTypes.helpers({}); // requiredFactors hold a list of factors keys that are required by\n// Empirica core to be able to run a game.\n// Required factors are:\n// -`playerCount` determines how many players participate in a game and is\n//   therefore critical to run a game.\n\nFactorTypes.requiredTypes = [\"playerCount\"];\nFactorTypes.types = [\"String\", \"Integer\", \"Number\", \"Boolean\"];\nFactorTypes.schema = new SimpleSchema({\n  required: {\n    type: Boolean\n  },\n  name: {\n    type: String,\n    max: 256,\n    regEx: /^[a-z]+[a-zA-Z0-9]*$/,\n    index: true,\n    unique: true,\n\n    custom() {\n      if (this.isSet && FactorTypes.find({\n        name: this.value\n      }).count() > 0) {\n        return \"notUnique\";\n      }\n    }\n\n  },\n  description: {\n    type: String,\n    min: 1,\n    max: 2048\n  },\n  type: {\n    type: String,\n    allowedValues: FactorTypes.types\n  },\n  min: {\n    type: Number,\n    optional: true\n  },\n  max: {\n    type: Number,\n    optional: true\n  }\n});\nFactorTypes.schema.messageBox.messages({\n  en: {\n    notUnique: \"{{label}} already exists.\"\n  }\n});\nFactorTypes.schema.extend(ArchivedSchema);\nFactorTypes.schema.extend(TimestampSchema);\nFactorTypes.attachSchema(FactorTypes.schema);","map":{"version":3,"sources":["packages/empirica:core/api/factor-types/factor-types.js"],"names":["module","export","FactorTypes","SimpleSchema","link","default","v","ArchivedSchema","TimestampSchema","Mongo","Collection","helpers","requiredTypes","types","schema","required","type","Boolean","name","String","max","regEx","index","unique","custom","isSet","find","value","count","description","min","allowedValues","Number","optional","messageBox","messages","en","notUnique","extend","attachSchema"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,WAAW,EAAC,MAAIA;AAAjB,CAAd;AAA6C,IAAIC,YAAJ;AAAiBH,MAAM,CAACI,IAAP,CAAY,cAAZ,EAA2B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACH,IAAAA,YAAY,GAACG,CAAb;AAAe;;AAA3B,CAA3B,EAAwD,CAAxD;AAA2D,IAAIC,cAAJ,EAAmBC,eAAnB;AAAmCR,MAAM,CAACI,IAAP,CAAY,uBAAZ,EAAoC;AAACG,EAAAA,cAAc,CAACD,CAAD,EAAG;AAACC,IAAAA,cAAc,GAACD,CAAf;AAAiB,GAApC;;AAAqCE,EAAAA,eAAe,CAACF,CAAD,EAAG;AAACE,IAAAA,eAAe,GAACF,CAAhB;AAAkB;;AAA1E,CAApC,EAAgH,CAAhH;AAGrJ,MAAMJ,WAAW,GAAG,IAAIO,KAAK,CAACC,UAAV,CAAqB,cAArB,CAApB;AAEPR,WAAW,CAACS,OAAZ,CAAoB,EAApB,E,CAEA;AACA;AACA;AACA;AACA;;AACAT,WAAW,CAACU,aAAZ,GAA4B,CAAC,aAAD,CAA5B;AAEAV,WAAW,CAACW,KAAZ,GAAoB,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,SAAhC,CAApB;AAEAX,WAAW,CAACY,MAAZ,GAAqB,IAAIX,YAAJ,CAAiB;AACpCY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC;AADE,GAD0B;AAKpCC,EAAAA,IAAI,EAAE;AACJF,IAAAA,IAAI,EAAEG,MADF;AAEJC,IAAAA,GAAG,EAAE,GAFD;AAGJC,IAAAA,KAAK,EAAE,sBAHH;AAIJC,IAAAA,KAAK,EAAE,IAJH;AAKJC,IAAAA,MAAM,EAAE,IALJ;;AAMJC,IAAAA,MAAM,GAAG;AACP,UAAI,KAAKC,KAAL,IAAcvB,WAAW,CAACwB,IAAZ,CAAiB;AAAER,QAAAA,IAAI,EAAE,KAAKS;AAAb,OAAjB,EAAuCC,KAAvC,KAAiD,CAAnE,EAAsE;AACpE,eAAO,WAAP;AACD;AACF;;AAVG,GAL8B;AAkBpCC,EAAAA,WAAW,EAAE;AACXb,IAAAA,IAAI,EAAEG,MADK;AAEXW,IAAAA,GAAG,EAAE,CAFM;AAGXV,IAAAA,GAAG,EAAE;AAHM,GAlBuB;AAwBpCJ,EAAAA,IAAI,EAAE;AACJA,IAAAA,IAAI,EAAEG,MADF;AAEJY,IAAAA,aAAa,EAAE7B,WAAW,CAACW;AAFvB,GAxB8B;AA6BpCiB,EAAAA,GAAG,EAAE;AACHd,IAAAA,IAAI,EAAEgB,MADH;AAEHC,IAAAA,QAAQ,EAAE;AAFP,GA7B+B;AAkCpCb,EAAAA,GAAG,EAAE;AACHJ,IAAAA,IAAI,EAAEgB,MADH;AAEHC,IAAAA,QAAQ,EAAE;AAFP;AAlC+B,CAAjB,CAArB;AAwCA/B,WAAW,CAACY,MAAZ,CAAmBoB,UAAnB,CAA8BC,QAA9B,CAAuC;AACrCC,EAAAA,EAAE,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AADiC,CAAvC;AAMAnC,WAAW,CAACY,MAAZ,CAAmBwB,MAAnB,CAA0B/B,cAA1B;AACAL,WAAW,CAACY,MAAZ,CAAmBwB,MAAnB,CAA0B9B,eAA1B;AACAN,WAAW,CAACqC,YAAZ,CAAyBrC,WAAW,CAACY,MAArC","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { ArchivedSchema, TimestampSchema } from \"../default-schemas.js\";\n\nexport const FactorTypes = new Mongo.Collection(\"factor_types\");\n\nFactorTypes.helpers({});\n\n// requiredFactors hold a list of factors keys that are required by\n// Empirica core to be able to run a game.\n// Required factors are:\n// -`playerCount` determines how many players participate in a game and is\n//   therefore critical to run a game.\nFactorTypes.requiredTypes = [\"playerCount\"];\n\nFactorTypes.types = [\"String\", \"Integer\", \"Number\", \"Boolean\"];\n\nFactorTypes.schema = new SimpleSchema({\n  required: {\n    type: Boolean\n  },\n\n  name: {\n    type: String,\n    max: 256,\n    regEx: /^[a-z]+[a-zA-Z0-9]*$/,\n    index: true,\n    unique: true,\n    custom() {\n      if (this.isSet && FactorTypes.find({ name: this.value }).count() > 0) {\n        return \"notUnique\";\n      }\n    }\n  },\n\n  description: {\n    type: String,\n    min: 1,\n    max: 2048\n  },\n\n  type: {\n    type: String,\n    allowedValues: FactorTypes.types\n  },\n\n  min: {\n    type: Number,\n    optional: true\n  },\n\n  max: {\n    type: Number,\n    optional: true\n  }\n});\n\nFactorTypes.schema.messageBox.messages({\n  en: {\n    notUnique: \"{{label}} already exists.\"\n  }\n});\n\nFactorTypes.schema.extend(ArchivedSchema);\nFactorTypes.schema.extend(TimestampSchema);\nFactorTypes.attachSchema(FactorTypes.schema);\n"]},"sourceType":"module","hash":"ba3caa117976ab7b5d4294dde18035eecd21e9a6"}
