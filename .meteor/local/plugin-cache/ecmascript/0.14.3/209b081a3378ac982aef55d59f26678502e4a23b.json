{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/games/hooks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/empirica:core/api/games/hooks.js","filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/games/hooks.js","passPerPreset":false,"envName":"production","cwd":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","root":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/games/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/games/hooks.js"}},"code":"module.export({\n  checkBatchFull: () => checkBatchFull,\n  checkForBatchFinished: () => checkForBatchFinished\n});\nlet Batches;\nmodule.link(\"../batches/batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 0);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 1);\nlet Games;\nmodule.link(\"../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 2);\n\nconst checkBatchFull = batchId => {\n  const batch = Batches.findOne(batchId);\n\n  if (!batch) {\n    throw \"batch for game missing. batchId: \".concat(batchId);\n  }\n\n  const expectedGamesCount = batch.gameCount();\n  const gamesCount = Games.find({\n    batchId\n  }).count();\n  const timeOutGameLobbiesCount = GameLobbies.find({\n    batchId,\n    timedOutAt: {\n      $exists: true\n    }\n  }).count();\n\n  if (expectedGamesCount === gamesCount + timeOutGameLobbiesCount) {\n    Batches.update(batchId, {\n      $set: {\n        full: true\n      }\n    });\n  }\n};\n\n// If all games for batch are filled, change batch status\nGames.after.insert(function (userId, _ref) {\n  let {\n    batchId\n  } = _ref;\n  checkBatchFull(batchId);\n});\n\nconst checkForBatchFinished = batchId => {\n  // Find games that are not finished\n  const gameQuery = {\n    batchId,\n    finishedAt: {\n      $exists: false\n    }\n  };\n  const gamesCount = Games.find(gameQuery).count();\n  const noGamesLeft = gamesCount === 0; // Find game lobbies that haven't been transformed into games and that haven't timedout\n\n  const gameLobbiesQuery = {\n    batchId,\n    gameId: {\n      $exists: false\n    },\n    timedOutAt: {\n      $exists: false\n    }\n  };\n  const lobbiesCount = GameLobbies.find(gameLobbiesQuery).count();\n  const noGameLobbiesLeft = lobbiesCount === 0;\n\n  if (noGamesLeft && noGameLobbiesLeft) {\n    Batches.update(batchId, {\n      $set: {\n        status: \"finished\",\n        finishedAt: new Date()\n      }\n    });\n  }\n};\n\n// Check if all games finished, mark batch as finished\nGames.after.update(function (userId, _ref2, fieldNames, modifier, options) {\n  let {\n    batchId\n  } = _ref2;\n\n  if (!fieldNames.includes(\"finishedAt\")) {\n    return;\n  }\n\n  checkForBatchFinished(batchId);\n}, {\n  fetchPrevious: false\n});","map":{"version":3,"sources":["packages/empirica:core/api/games/hooks.js"],"names":["module","export","checkBatchFull","checkForBatchFinished","Batches","link","v","GameLobbies","Games","batchId","batch","findOne","expectedGamesCount","gameCount","gamesCount","find","count","timeOutGameLobbiesCount","timedOutAt","$exists","update","$set","full","after","insert","userId","gameQuery","finishedAt","noGamesLeft","gameLobbiesQuery","gameId","lobbiesCount","noGameLobbiesLeft","status","Date","fieldNames","modifier","options","includes","fetchPrevious"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,cAAc,EAAC,MAAIA,cAApB;AAAmCC,EAAAA,qBAAqB,EAAC,MAAIA;AAA7D,CAAd;AAAmG,IAAIC,OAAJ;AAAYJ,MAAM,CAACK,IAAP,CAAY,oBAAZ,EAAiC;AAACD,EAAAA,OAAO,CAACE,CAAD,EAAG;AAACF,IAAAA,OAAO,GAACE,CAAR;AAAU;;AAAtB,CAAjC,EAAyD,CAAzD;AAA4D,IAAIC,WAAJ;AAAgBP,MAAM,CAACK,IAAP,CAAY,8BAAZ,EAA2C;AAACE,EAAAA,WAAW,CAACD,CAAD,EAAG;AAACC,IAAAA,WAAW,GAACD,CAAZ;AAAc;;AAA9B,CAA3C,EAA2E,CAA3E;AAA8E,IAAIE,KAAJ;AAAUR,MAAM,CAACK,IAAP,CAAY,gBAAZ,EAA6B;AAACG,EAAAA,KAAK,CAACF,CAAD,EAAG;AAACE,IAAAA,KAAK,GAACF,CAAN;AAAQ;;AAAlB,CAA7B,EAAiD,CAAjD;;AAK5Q,MAAMJ,cAAc,GAAGO,OAAO,IAAI;AACvC,QAAMC,KAAK,GAAGN,OAAO,CAACO,OAAR,CAAgBF,OAAhB,CAAd;;AACA,MAAI,CAACC,KAAL,EAAY;AACV,qDAA0CD,OAA1C;AACD;;AAED,QAAMG,kBAAkB,GAAGF,KAAK,CAACG,SAAN,EAA3B;AACA,QAAMC,UAAU,GAAGN,KAAK,CAACO,IAAN,CAAW;AAAEN,IAAAA;AAAF,GAAX,EAAwBO,KAAxB,EAAnB;AACA,QAAMC,uBAAuB,GAAGV,WAAW,CAACQ,IAAZ,CAAiB;AAC/CN,IAAAA,OAD+C;AAE/CS,IAAAA,UAAU,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAFmC,GAAjB,EAG7BH,KAH6B,EAAhC;;AAKA,MAAIJ,kBAAkB,KAAKE,UAAU,GAAGG,uBAAxC,EAAiE;AAC/Db,IAAAA,OAAO,CAACgB,MAAR,CAAeX,OAAf,EAAwB;AAAEY,MAAAA,IAAI,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAAR,KAAxB;AACD;AACF,CAhBM;;AAkBP;AACAd,KAAK,CAACe,KAAN,CAAYC,MAAZ,CAAmB,UAASC,MAAT,QAA8B;AAAA,MAAb;AAAEhB,IAAAA;AAAF,GAAa;AAC/CP,EAAAA,cAAc,CAACO,OAAD,CAAd;AACD,CAFD;;AAIO,MAAMN,qBAAqB,GAAGM,OAAO,IAAI;AAC9C;AACA,QAAMiB,SAAS,GAAG;AAAEjB,IAAAA,OAAF;AAAWkB,IAAAA,UAAU,EAAE;AAAER,MAAAA,OAAO,EAAE;AAAX;AAAvB,GAAlB;AACA,QAAML,UAAU,GAAGN,KAAK,CAACO,IAAN,CAAWW,SAAX,EAAsBV,KAAtB,EAAnB;AACA,QAAMY,WAAW,GAAGd,UAAU,KAAK,CAAnC,CAJ8C,CAM9C;;AACA,QAAMe,gBAAgB,GAAG;AACvBpB,IAAAA,OADuB;AAEvBqB,IAAAA,MAAM,EAAE;AAAEX,MAAAA,OAAO,EAAE;AAAX,KAFe;AAGvBD,IAAAA,UAAU,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX;AAHW,GAAzB;AAKA,QAAMY,YAAY,GAAGxB,WAAW,CAACQ,IAAZ,CAAiBc,gBAAjB,EAAmCb,KAAnC,EAArB;AACA,QAAMgB,iBAAiB,GAAGD,YAAY,KAAK,CAA3C;;AAEA,MAAIH,WAAW,IAAII,iBAAnB,EAAsC;AACpC5B,IAAAA,OAAO,CAACgB,MAAR,CAAeX,OAAf,EAAwB;AACtBY,MAAAA,IAAI,EAAE;AAAEY,QAAAA,MAAM,EAAE,UAAV;AAAsBN,QAAAA,UAAU,EAAE,IAAIO,IAAJ;AAAlC;AADgB,KAAxB;AAGD;AACF,CApBM;;AAsBP;AACA1B,KAAK,CAACe,KAAN,CAAYH,MAAZ,CACE,UAASK,MAAT,SAA8BU,UAA9B,EAA0CC,QAA1C,EAAoDC,OAApD,EAA6D;AAAA,MAA5C;AAAE5B,IAAAA;AAAF,GAA4C;;AAC3D,MAAI,CAAC0B,UAAU,CAACG,QAAX,CAAoB,YAApB,CAAL,EAAwC;AACtC;AACD;;AAEDnC,EAAAA,qBAAqB,CAACM,OAAD,CAArB;AACD,CAPH,EAQE;AAAE8B,EAAAA,aAAa,EAAE;AAAjB,CARF","sourcesContent":["// See if everyone is done with this stage\nimport { Batches } from \"../batches/batches\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { Games } from \"../games/games\";\n\nexport const checkBatchFull = batchId => {\n  const batch = Batches.findOne(batchId);\n  if (!batch) {\n    throw `batch for game missing. batchId: ${batchId}`;\n  }\n\n  const expectedGamesCount = batch.gameCount();\n  const gamesCount = Games.find({ batchId }).count();\n  const timeOutGameLobbiesCount = GameLobbies.find({\n    batchId,\n    timedOutAt: { $exists: true }\n  }).count();\n\n  if (expectedGamesCount === gamesCount + timeOutGameLobbiesCount) {\n    Batches.update(batchId, { $set: { full: true } });\n  }\n};\n\n// If all games for batch are filled, change batch status\nGames.after.insert(function(userId, { batchId }) {\n  checkBatchFull(batchId);\n});\n\nexport const checkForBatchFinished = batchId => {\n  // Find games that are not finished\n  const gameQuery = { batchId, finishedAt: { $exists: false } };\n  const gamesCount = Games.find(gameQuery).count();\n  const noGamesLeft = gamesCount === 0;\n\n  // Find game lobbies that haven't been transformed into games and that haven't timedout\n  const gameLobbiesQuery = {\n    batchId,\n    gameId: { $exists: false },\n    timedOutAt: { $exists: false }\n  };\n  const lobbiesCount = GameLobbies.find(gameLobbiesQuery).count();\n  const noGameLobbiesLeft = lobbiesCount === 0;\n\n  if (noGamesLeft && noGameLobbiesLeft) {\n    Batches.update(batchId, {\n      $set: { status: \"finished\", finishedAt: new Date() }\n    });\n  }\n};\n\n// Check if all games finished, mark batch as finished\nGames.after.update(\n  function(userId, { batchId }, fieldNames, modifier, options) {\n    if (!fieldNames.includes(\"finishedAt\")) {\n      return;\n    }\n\n    checkForBatchFinished(batchId);\n  },\n  { fetchPrevious: false }\n);\n"]},"sourceType":"module","hash":"209b081a3378ac982aef55d59f26678502e4a23b"}
