{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/server/callbacks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"server/callbacks.js","filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/server/callbacks.js","passPerPreset":false,"envName":"development","cwd":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","root":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/server/callbacks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/callbacks.js"}},"code":"let ALIGN_LEFT;\nmodule.link(\"@blueprintjs/core/lib/esm/common/classes\", {\n  ALIGN_LEFT(v) {\n    ALIGN_LEFT = v;\n  }\n\n}, 0);\nlet Empirica;\nmodule.link(\"meteor/empirica:core\", {\n  default(v) {\n    Empirica = v;\n  }\n\n}, 1);\n// onGameStart is triggered opnce per game before the game starts, and before\n// the first onRoundStart. It receives the game and list of all the players in\n// the game.\nEmpirica.onGameStart(game => {\n  game.players.forEach((player, i) => {\n    /*player.set(\"avatar\", `/avatars/jdenticon/${player._id}`);*/\n    player.set(\"avatar\", \"/avatars/\".concat(i, \".png\"));\n    player.set(\"avatarId\", i);\n    player.set(\"cumulativePayoff\", game.treatment.endowment);\n  });\n}); // onRoundStart is triggered before each round starts, and before onStageStart.\n// It receives the same options as onGameStart, and the round that is starting.\n\nEmpirica.onRoundStart((game, round) => {\n  round.set(\"totalContributions\", 0);\n  round.set(\"totalReturns\", 0);\n  round.set(\"payoff\", 0);\n  game.players.forEach((player, i) => {\n    player.round.set(\"endowment\", game.treatment.endowment);\n    player.round.set(\"punishedBy\", {});\n    player.round.set(\"contribution\", 0);\n    player.round.set(\"punished\", {});\n  });\n}); // onStageStart is triggered before each stage starts.\n// It receives the same options as onRoundStart, and the stage that is starting.\n\nEmpirica.onStageStart((game, round, stage) => {}); // onStageEnd is triggered after each stage.\n// It receives the same options as onRoundEnd, and the stage that just ended.\n\nEmpirica.onStageEnd((game, round, stage) => {\n  if (stage.name == \"contribution\") {\n    computePayoff(game, round);\n  } //player.stage.set values but wait to update until round end\n\n\n  if (stage.name == \"outcome\") {\n    computePunishmentCosts(game, round);\n    computeIndividualPayoff(game, round);\n  }\n}); // onRoundEnd is triggered after each round.\n// It receives the same options as onGameEnd, and the round that just ended.\n\nEmpirica.onRoundEnd((game, round) => {\n  game.players.forEach(player => {\n    const prevCumulativePayoff = player.get(\"cumulativePayoff\");\n    const roundPayoff = player.round.get(\"roundPayoff\");\n    const newCumulativePayoff = Math.round(prevCumulativePayoff + roundPayoff);\n    player.set(\"cumulativePayoff\", Math.max(newCumulativePayoff, 0));\n  });\n}); // onGameEnd is triggered when the game ends.\n// It receives the same options as onGameStart.\n\nEmpirica.onGameEnd(game => {\n  computeTotalPayoff(game);\n  convertPayoff(game);\n}); // compute each players' payoffs\n\nfunction computePayoff(game, round) {\n  const multiplier = game.treatment.multiplier;\n  let newTotalContributions = 0;\n  game.players.forEach(player => {\n    const contribution = player.round.get(\"contribution\");\n    newTotalContributions += parseFloat(contribution);\n  });\n  round.set(\"totalContributions\", newTotalContributions);\n  const multipliedReturns = Math.round(round.get(\"totalContributions\") * multiplier);\n  round.set(\"totalReturns\", multipliedReturns);\n  const totalReturns = round.get(\"totalReturns\");\n  const payoff = Math.round(totalReturns / game.players.length);\n  round.set(\"payoff\", payoff);\n}\n\nfunction computePunishmentCosts(game, round) {\n  game.players.forEach(player => {\n    const punished = player.round.get(\"punished\");\n    const punishedKeys = Object.keys(punished);\n    let cost = 0;\n\n    for (const key of punishedKeys) {\n      if (punished[key] != \"0\") {\n        amount = punished[key];\n        cost += parseFloat(amount);\n      } else {}\n    }\n\n    let punishedBy = {};\n    player.round.set(\"costs\", cost);\n\n    const otherPlayers = _.reject(game.players, p => p._id === player._id);\n\n    otherPlayers.forEach(otherPlayer => {\n      const otherPlayerPunished = otherPlayer.round.get(\"punished\");\n\n      if (Object.keys(otherPlayerPunished).includes(player._id)) {\n        punishedBy[otherPlayer._id] = otherPlayerPunished[player._id];\n        console.log(punishedBy);\n      }\n    });\n    player.round.set(\"punishedBy\", punishedBy);\n    punishedBy = player.round.get(\"punishedBy\");\n    let receivedPunishments = 0;\n    const punishedByKeys = Object.keys(punishedBy);\n\n    for (const key of punishedByKeys) {\n      if (punishedBy[key] != \"0\") {\n        amount = punishedBy[key];\n        receivedPunishments += parseFloat(amount);\n      }\n    }\n\n    const penalties = parseFloat(receivedPunishments) * game.treatment.punishment;\n    player.round.set(\"penalties\", penalties);\n  });\n} // computes players' individual payoff (round payoff minus punishment costs and penalties)\n\n\nfunction computeIndividualPayoff(game, round) {\n  game.players.forEach(player => {\n    const payoff = round.get(\"payoff\");\n    const contribution = player.round.get(\"contribution\");\n    const remainingEndowment = parseFloat(game.treatment.endowment) - parseFloat(contribution);\n    player.round.set(\"remainingEndowment\", remainingEndowment);\n    const penalties = player.round.get(\"penalties\");\n    const costs = player.round.get(\"costs\");\n    const roundPayoff = parseFloat(payoff) + parseFloat(remainingEndowment) - parseFloat(penalties) - parseFloat(costs);\n    player.round.set(\"roundPayoff\", roundPayoff);\n  });\n} // computes the total payoff across all players (measure of cooperation) //\n\n\nfunction computeTotalPayoff(game) {\n  let totalPayoff = 0;\n  game.players.forEach(player => {\n    const cumulativePayoff = player.get(\"cumulativePayoff\");\n    totalPayoff += parseFloat(cumulativePayoff);\n    game.set(\"totalPayoff\", totalPayoff);\n  });\n} // converts player's payoff to real money\n\n\nfunction convertPayoff(game) {\n  game.players.forEach(player => {\n    const cumulativePayoff = player.get(\"cumulativePayoff\");\n    let earnings = 0;\n\n    if (cumulativePayoff > 0) {\n      let earnings = parseFloat(cumulativePayoff) * game.treatment.conversionRate;\n    } else {}\n\n    player.set(\"earnings\", earnings);\n  });\n} // ===========================================================================\n// => onSet, onAppend and onChange ==========================================\n// ===========================================================================\n// onSet, onAppend and onChange are called on every single update made by all\n// players in each game, so they can rapidly become quite expensive and have\n// the potential to slow down the app. Use wisely.\n// It is very useful to be able to react to each update a user makes. Try\n// nontheless to limit the amount of computations and database saves (.set)\n// done in these callbacks. You can also try to limit the amount of calls to\n// set() and append() you make (avoid calling them on a continuous drag of a\n// slider for example) and inside these callbacks use the `key` argument at the\n// very beginning of the callback to filter out which keys your need to run\n// logic against.\n// If you are not using these callbacks, comment them out so the system does\n// not call them for nothing.\n// onSet is called when the experiment code call the .set() method\n// on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onSet(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player, // Player who made the change\n//     target, // Object on which the change was made (eg. player.set() => player)\n//     targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//     key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//     value, // New value\n//     prevValue // Previous value\n//   ) => {\n//     // // Example filtering\n//     // if (key !== \"value\") {\n//     //   return;\n//     // }\n//   }\n// );\n// // onAppend is called when the experiment code call the `.append()` method\n// // on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onAppend(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player, // Player who made the change\n//     target, // Object on which the change was made (eg. player.set() => player)\n//     targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//     key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//     value, // New value\n//     prevValue // Previous value\n//   ) => {\n//     // Note: `value` is the single last value (e.g 0.2), while `prevValue` will\n//     //       be an array of the previsous valued (e.g. [0.3, 0.4, 0.65]).\n//   }\n// );\n// // onChange is called when the experiment code call the `.set()` or the\n// // `.append()` method on games, rounds, stages, players, playerRounds or\n// // playerStages.\n// Empirica.onChange(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player, // Player who made the change\n//     target, // Object on which the change was made (eg. player.set() => player)\n//     targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//     key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//     value, // New value\n//     prevValue, // Previous value\n//     isAppend // True if the change was an append, false if it was a set\n//   ) => {\n//     // `onChange` is useful to run server-side logic for any user interaction.\n//     // Note the extra isAppend boolean that will allow to differenciate sets and\n//     // appends.\n//     Game.set(\"lastChangeAt\", new Date().toString());\n//   }\n// );\n// // onSubmit is called when the player submits a stage.\n// Empirica.onSubmit(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player // Player who submitted\n//   ) => {}\n// );","map":{"version":3,"sources":["server/callbacks.js"],"names":["ALIGN_LEFT","module","link","v","Empirica","default","onGameStart","game","players","forEach","player","i","set","treatment","endowment","onRoundStart","round","onStageStart","stage","onStageEnd","name","computePayoff","computePunishmentCosts","computeIndividualPayoff","onRoundEnd","prevCumulativePayoff","get","roundPayoff","newCumulativePayoff","Math","max","onGameEnd","computeTotalPayoff","convertPayoff","multiplier","newTotalContributions","contribution","parseFloat","multipliedReturns","totalReturns","payoff","length","punished","punishedKeys","Object","keys","cost","key","amount","punishedBy","otherPlayers","_","reject","p","_id","otherPlayer","otherPlayerPunished","includes","console","log","receivedPunishments","punishedByKeys","penalties","punishment","remainingEndowment","costs","totalPayoff","cumulativePayoff","earnings","conversionRate"],"mappings":"AAAA,IAAIA,UAAJ;AAAeC,MAAM,CAACC,IAAP,CAAY,0CAAZ,EAAuD;AAACF,EAAAA,UAAU,CAACG,CAAD,EAAG;AAACH,IAAAA,UAAU,GAACG,CAAX;AAAa;;AAA5B,CAAvD,EAAqF,CAArF;AAAwF,IAAIC,QAAJ;AAAaH,MAAM,CAACC,IAAP,CAAY,sBAAZ,EAAmC;AAACG,EAAAA,OAAO,CAACF,CAAD,EAAG;AAACC,IAAAA,QAAQ,GAACD,CAAT;AAAW;;AAAvB,CAAnC,EAA4D,CAA5D;AAGpH;AACA;AACA;AACAC,QAAQ,CAACE,WAAT,CAAsBC,IAAD,IAAU;AAC7BA,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAqB,CAACC,MAAD,EAASC,CAAT,KAAe;AAClC;AACAD,IAAAA,MAAM,CAACE,GAAP,CAAW,QAAX,qBAAiCD,CAAjC;AACAD,IAAAA,MAAM,CAACE,GAAP,CAAW,UAAX,EAAuBD,CAAvB;AACAD,IAAAA,MAAM,CAACE,GAAP,CAAW,kBAAX,EAA+BL,IAAI,CAACM,SAAL,CAAeC,SAA9C;AACD,GALD;AAMD,CAPD,E,CASA;AACA;;AACAV,QAAQ,CAACW,YAAT,CAAsB,CAACR,IAAD,EAAOS,KAAP,KAAiB;AACrCA,EAAAA,KAAK,CAACJ,GAAN,CAAU,oBAAV,EAAgC,CAAhC;AACAI,EAAAA,KAAK,CAACJ,GAAN,CAAU,cAAV,EAA0B,CAA1B;AACAI,EAAAA,KAAK,CAACJ,GAAN,CAAU,QAAV,EAAoB,CAApB;AACAL,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAqB,CAACC,MAAD,EAASC,CAAT,KAAe;AAClCD,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,WAAjB,EAA8BL,IAAI,CAACM,SAAL,CAAeC,SAA7C;AACAJ,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,YAAjB,EAA+B,EAA/B;AACAF,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,cAAjB,EAAiC,CAAjC;AACAF,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,UAAjB,EAA6B,EAA7B;AACD,GALD;AAMD,CAVD,E,CAYA;AACA;;AACAR,QAAQ,CAACa,YAAT,CAAsB,CAACV,IAAD,EAAOS,KAAP,EAAcE,KAAd,KAAwB,CAAE,CAAhD,E,CAEA;AACA;;AACAd,QAAQ,CAACe,UAAT,CAAoB,CAACZ,IAAD,EAAOS,KAAP,EAAcE,KAAd,KAAwB;AAC1C,MAAIA,KAAK,CAACE,IAAN,IAAc,cAAlB,EAAkC;AAChCC,IAAAA,aAAa,CAACd,IAAD,EAAOS,KAAP,CAAb;AACD,GAHyC,CAGxC;;;AACF,MAAIE,KAAK,CAACE,IAAN,IAAc,SAAlB,EAA6B;AAC3BE,IAAAA,sBAAsB,CAACf,IAAD,EAAOS,KAAP,CAAtB;AACAO,IAAAA,uBAAuB,CAAChB,IAAD,EAAOS,KAAP,CAAvB;AACD;AACF,CARD,E,CAUA;AACA;;AACAZ,QAAQ,CAACoB,UAAT,CAAoB,CAACjB,IAAD,EAAOS,KAAP,KAAiB;AACnCT,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAMe,oBAAoB,GAAGf,MAAM,CAACgB,GAAP,CAAW,kBAAX,CAA7B;AACA,UAAMC,WAAW,GAAGjB,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,aAAjB,CAApB;AACA,UAAME,mBAAmB,GAAGC,IAAI,CAACb,KAAL,CAAWS,oBAAoB,GAAGE,WAAlC,CAA5B;AACAjB,IAAAA,MAAM,CAACE,GAAP,CAAW,kBAAX,EAA+BiB,IAAI,CAACC,GAAL,CAASF,mBAAT,EAA8B,CAA9B,CAA/B;AACD,GALD;AAMD,CAPD,E,CASA;AACA;;AACAxB,QAAQ,CAAC2B,SAAT,CAAoBxB,IAAD,IAAU;AAC3ByB,EAAAA,kBAAkB,CAACzB,IAAD,CAAlB;AACA0B,EAAAA,aAAa,CAAC1B,IAAD,CAAb;AACD,CAHD,E,CAKA;;AACA,SAASc,aAAT,CAAuBd,IAAvB,EAA6BS,KAA7B,EAAoC;AAClC,QAAMkB,UAAU,GAAG3B,IAAI,CAACM,SAAL,CAAeqB,UAAlC;AACA,MAAIC,qBAAqB,GAAG,CAA5B;AACA5B,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAM0B,YAAY,GAAG1B,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,cAAjB,CAArB;AACAS,IAAAA,qBAAqB,IAAIE,UAAU,CAACD,YAAD,CAAnC;AACD,GAHD;AAIApB,EAAAA,KAAK,CAACJ,GAAN,CAAU,oBAAV,EAAgCuB,qBAAhC;AACA,QAAMG,iBAAiB,GAAGT,IAAI,CAACb,KAAL,CACxBA,KAAK,CAACU,GAAN,CAAU,oBAAV,IAAkCQ,UADV,CAA1B;AAGAlB,EAAAA,KAAK,CAACJ,GAAN,CAAU,cAAV,EAA0B0B,iBAA1B;AACA,QAAMC,YAAY,GAAGvB,KAAK,CAACU,GAAN,CAAU,cAAV,CAArB;AACA,QAAMc,MAAM,GAAGX,IAAI,CAACb,KAAL,CAAWuB,YAAY,GAAGhC,IAAI,CAACC,OAAL,CAAaiC,MAAvC,CAAf;AACAzB,EAAAA,KAAK,CAACJ,GAAN,CAAU,QAAV,EAAoB4B,MAApB;AACD;;AAED,SAASlB,sBAAT,CAAgCf,IAAhC,EAAsCS,KAAtC,EAA6C;AAC3CT,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAMgC,QAAQ,GAAGhC,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,UAAjB,CAAjB;AACA,UAAMiB,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAZ,CAArB;AACA,QAAII,IAAI,GAAG,CAAX;;AACA,SAAK,MAAMC,GAAX,IAAkBJ,YAAlB,EAAgC;AAC9B,UAAID,QAAQ,CAACK,GAAD,CAAR,IAAiB,GAArB,EAA0B;AACxBC,QAAAA,MAAM,GAAGN,QAAQ,CAACK,GAAD,CAAjB;AACAD,QAAAA,IAAI,IAAIT,UAAU,CAACW,MAAD,CAAlB;AACD,OAHD,MAGO,CACN;AACF;;AACD,QAAIC,UAAU,GAAG,EAAjB;AACAvC,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,OAAjB,EAA0BkC,IAA1B;;AACA,UAAMI,YAAY,GAAGC,CAAC,CAACC,MAAF,CAAS7C,IAAI,CAACC,OAAd,EAAwB6C,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAU5C,MAAM,CAAC4C,GAA/C,CAArB;;AACAJ,IAAAA,YAAY,CAACzC,OAAb,CAAsB8C,WAAD,IAAiB;AACpC,YAAMC,mBAAmB,GAAGD,WAAW,CAACvC,KAAZ,CAAkBU,GAAlB,CAAsB,UAAtB,CAA5B;;AACA,UAAIkB,MAAM,CAACC,IAAP,CAAYW,mBAAZ,EAAiCC,QAAjC,CAA0C/C,MAAM,CAAC4C,GAAjD,CAAJ,EAA2D;AACzDL,QAAAA,UAAU,CAACM,WAAW,CAACD,GAAb,CAAV,GAA8BE,mBAAmB,CAAC9C,MAAM,CAAC4C,GAAR,CAAjD;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACD;AACF,KAND;AAOAvC,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,YAAjB,EAA+BqC,UAA/B;AACAA,IAAAA,UAAU,GAAGvC,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,YAAjB,CAAb;AACA,QAAIkC,mBAAmB,GAAG,CAA1B;AACA,UAAMC,cAAc,GAAGjB,MAAM,CAACC,IAAP,CAAYI,UAAZ,CAAvB;;AACA,SAAK,MAAMF,GAAX,IAAkBc,cAAlB,EAAkC;AAChC,UAAIZ,UAAU,CAACF,GAAD,CAAV,IAAmB,GAAvB,EAA4B;AAC1BC,QAAAA,MAAM,GAAGC,UAAU,CAACF,GAAD,CAAnB;AACAa,QAAAA,mBAAmB,IAAIvB,UAAU,CAACW,MAAD,CAAjC;AACD;AACF;;AACD,UAAMc,SAAS,GACbzB,UAAU,CAACuB,mBAAD,CAAV,GAAkCrD,IAAI,CAACM,SAAL,CAAekD,UADnD;AAEArD,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,WAAjB,EAA8BkD,SAA9B;AACD,GAlCD;AAmCD,C,CAED;;;AACA,SAASvC,uBAAT,CAAiChB,IAAjC,EAAuCS,KAAvC,EAA8C;AAC5CT,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAM8B,MAAM,GAAGxB,KAAK,CAACU,GAAN,CAAU,QAAV,CAAf;AACA,UAAMU,YAAY,GAAG1B,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,cAAjB,CAArB;AACA,UAAMsC,kBAAkB,GACtB3B,UAAU,CAAC9B,IAAI,CAACM,SAAL,CAAeC,SAAhB,CAAV,GAAuCuB,UAAU,CAACD,YAAD,CADnD;AAEA1B,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,oBAAjB,EAAuCoD,kBAAvC;AACA,UAAMF,SAAS,GAAGpD,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,WAAjB,CAAlB;AACA,UAAMuC,KAAK,GAAGvD,MAAM,CAACM,KAAP,CAAaU,GAAb,CAAiB,OAAjB,CAAd;AACA,UAAMC,WAAW,GACfU,UAAU,CAACG,MAAD,CAAV,GACAH,UAAU,CAAC2B,kBAAD,CADV,GAEA3B,UAAU,CAACyB,SAAD,CAFV,GAGAzB,UAAU,CAAC4B,KAAD,CAJZ;AAKAvD,IAAAA,MAAM,CAACM,KAAP,CAAaJ,GAAb,CAAiB,aAAjB,EAAgCe,WAAhC;AACD,GAdD;AAeD,C,CAED;;;AACA,SAASK,kBAAT,CAA4BzB,IAA5B,EAAkC;AAChC,MAAI2D,WAAW,GAAG,CAAlB;AACA3D,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAMyD,gBAAgB,GAAGzD,MAAM,CAACgB,GAAP,CAAW,kBAAX,CAAzB;AACAwC,IAAAA,WAAW,IAAI7B,UAAU,CAAC8B,gBAAD,CAAzB;AACA5D,IAAAA,IAAI,CAACK,GAAL,CAAS,aAAT,EAAwBsD,WAAxB;AACD,GAJD;AAKD,C,CAED;;;AACA,SAASjC,aAAT,CAAuB1B,IAAvB,EAA6B;AAC3BA,EAAAA,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAMyD,gBAAgB,GAAGzD,MAAM,CAACgB,GAAP,CAAW,kBAAX,CAAzB;AACA,QAAI0C,QAAQ,GAAG,CAAf;;AACA,QAAID,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,UAAIC,QAAQ,GACV/B,UAAU,CAAC8B,gBAAD,CAAV,GAA+B5D,IAAI,CAACM,SAAL,CAAewD,cADhD;AAED,KAHD,MAGO,CACN;;AACD3D,IAAAA,MAAM,CAACE,GAAP,CAAW,UAAX,EAAuBwD,QAAvB;AACD,GATD;AAUD,C,CAED;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ALIGN_LEFT } from \"@blueprintjs/core/lib/esm/common/classes\";\nimport Empirica from \"meteor/empirica:core\";\n\n// onGameStart is triggered opnce per game before the game starts, and before\n// the first onRoundStart. It receives the game and list of all the players in\n// the game.\nEmpirica.onGameStart((game) => {\n  game.players.forEach((player, i) => {\n    /*player.set(\"avatar\", `/avatars/jdenticon/${player._id}`);*/\n    player.set(\"avatar\", `/avatars/${i}.png`);\n    player.set(\"avatarId\", i);\n    player.set(\"cumulativePayoff\", game.treatment.endowment);\n  });\n});\n\n// onRoundStart is triggered before each round starts, and before onStageStart.\n// It receives the same options as onGameStart, and the round that is starting.\nEmpirica.onRoundStart((game, round) => {\n  round.set(\"totalContributions\", 0);\n  round.set(\"totalReturns\", 0);\n  round.set(\"payoff\", 0);\n  game.players.forEach((player, i) => {\n    player.round.set(\"endowment\", game.treatment.endowment);\n    player.round.set(\"punishedBy\", {});\n    player.round.set(\"contribution\", 0);\n    player.round.set(\"punished\", {});\n  });\n});\n\n// onStageStart is triggered before each stage starts.\n// It receives the same options as onRoundStart, and the stage that is starting.\nEmpirica.onStageStart((game, round, stage) => {});\n\n// onStageEnd is triggered after each stage.\n// It receives the same options as onRoundEnd, and the stage that just ended.\nEmpirica.onStageEnd((game, round, stage) => {\n  if (stage.name == \"contribution\") {\n    computePayoff(game, round);\n  } //player.stage.set values but wait to update until round end\n  if (stage.name == \"outcome\") {\n    computePunishmentCosts(game, round);\n    computeIndividualPayoff(game, round);\n  }\n});\n\n// onRoundEnd is triggered after each round.\n// It receives the same options as onGameEnd, and the round that just ended.\nEmpirica.onRoundEnd((game, round) => {\n  game.players.forEach((player) => {\n    const prevCumulativePayoff = player.get(\"cumulativePayoff\");\n    const roundPayoff = player.round.get(\"roundPayoff\");\n    const newCumulativePayoff = Math.round(prevCumulativePayoff + roundPayoff);\n    player.set(\"cumulativePayoff\", Math.max(newCumulativePayoff, 0));\n  });\n});\n\n// onGameEnd is triggered when the game ends.\n// It receives the same options as onGameStart.\nEmpirica.onGameEnd((game) => {\n  computeTotalPayoff(game);\n  convertPayoff(game);\n});\n\n// compute each players' payoffs\nfunction computePayoff(game, round) {\n  const multiplier = game.treatment.multiplier;\n  let newTotalContributions = 0;\n  game.players.forEach((player) => {\n    const contribution = player.round.get(\"contribution\");\n    newTotalContributions += parseFloat(contribution);\n  });\n  round.set(\"totalContributions\", newTotalContributions);\n  const multipliedReturns = Math.round(\n    round.get(\"totalContributions\") * multiplier\n  );\n  round.set(\"totalReturns\", multipliedReturns);\n  const totalReturns = round.get(\"totalReturns\");\n  const payoff = Math.round(totalReturns / game.players.length);\n  round.set(\"payoff\", payoff);\n}\n\nfunction computePunishmentCosts(game, round) {\n  game.players.forEach((player) => {\n    const punished = player.round.get(\"punished\");\n    const punishedKeys = Object.keys(punished);\n    let cost = 0;\n    for (const key of punishedKeys) {\n      if (punished[key] != \"0\") {\n        amount = punished[key];\n        cost += parseFloat(amount);\n      } else {\n      }\n    }\n    let punishedBy = {};\n    player.round.set(\"costs\", cost);\n    const otherPlayers = _.reject(game.players, (p) => p._id === player._id);\n    otherPlayers.forEach((otherPlayer) => {\n      const otherPlayerPunished = otherPlayer.round.get(\"punished\");\n      if (Object.keys(otherPlayerPunished).includes(player._id)) {\n        punishedBy[otherPlayer._id] = otherPlayerPunished[player._id];\n        console.log(punishedBy);\n      }\n    });\n    player.round.set(\"punishedBy\", punishedBy);\n    punishedBy = player.round.get(\"punishedBy\");\n    let receivedPunishments = 0;\n    const punishedByKeys = Object.keys(punishedBy);\n    for (const key of punishedByKeys) {\n      if (punishedBy[key] != \"0\") {\n        amount = punishedBy[key];\n        receivedPunishments += parseFloat(amount);\n      }\n    }\n    const penalties =\n      parseFloat(receivedPunishments) * game.treatment.punishment;\n    player.round.set(\"penalties\", penalties);\n  });\n}\n\n// computes players' individual payoff (round payoff minus punishment costs and penalties)\nfunction computeIndividualPayoff(game, round) {\n  game.players.forEach((player) => {\n    const payoff = round.get(\"payoff\");\n    const contribution = player.round.get(\"contribution\");\n    const remainingEndowment =\n      parseFloat(game.treatment.endowment) - parseFloat(contribution);\n    player.round.set(\"remainingEndowment\", remainingEndowment);\n    const penalties = player.round.get(\"penalties\");\n    const costs = player.round.get(\"costs\");\n    const roundPayoff =\n      parseFloat(payoff) +\n      parseFloat(remainingEndowment) -\n      parseFloat(penalties) -\n      parseFloat(costs);\n    player.round.set(\"roundPayoff\", roundPayoff);\n  });\n}\n\n// computes the total payoff across all players (measure of cooperation) //\nfunction computeTotalPayoff(game) {\n  let totalPayoff = 0;\n  game.players.forEach((player) => {\n    const cumulativePayoff = player.get(\"cumulativePayoff\");\n    totalPayoff += parseFloat(cumulativePayoff);\n    game.set(\"totalPayoff\", totalPayoff);\n  });\n}\n\n// converts player's payoff to real money\nfunction convertPayoff(game) {\n  game.players.forEach((player) => {\n    const cumulativePayoff = player.get(\"cumulativePayoff\");\n    let earnings = 0;\n    if (cumulativePayoff > 0) {\n      let earnings =\n        parseFloat(cumulativePayoff) * game.treatment.conversionRate;\n    } else {\n    }\n    player.set(\"earnings\", earnings);\n  });\n}\n\n// ===========================================================================\n// => onSet, onAppend and onChange ==========================================\n// ===========================================================================\n\n// onSet, onAppend and onChange are called on every single update made by all\n// players in each game, so they can rapidly become quite expensive and have\n// the potential to slow down the app. Use wisely.\n\n// It is very useful to be able to react to each update a user makes. Try\n// nontheless to limit the amount of computations and database saves (.set)\n// done in these callbacks. You can also try to limit the amount of calls to\n// set() and append() you make (avoid calling them on a continuous drag of a\n// slider for example) and inside these callbacks use the `key` argument at the\n// very beginning of the callback to filter out which keys your need to run\n// logic against.\n\n// If you are not using these callbacks, comment them out so the system does\n// not call them for nothing.\n\n// onSet is called when the experiment code call the .set() method\n// on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onSet(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player, // Player who made the change\n//     target, // Object on which the change was made (eg. player.set() => player)\n//     targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//     key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//     value, // New value\n//     prevValue // Previous value\n//   ) => {\n//     // // Example filtering\n//     // if (key !== \"value\") {\n//     //   return;\n//     // }\n//   }\n// );\n\n// // onAppend is called when the experiment code call the `.append()` method\n// // on games, rounds, stages, players, playerRounds or playerStages.\n// Empirica.onAppend(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player, // Player who made the change\n//     target, // Object on which the change was made (eg. player.set() => player)\n//     targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//     key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//     value, // New value\n//     prevValue // Previous value\n//   ) => {\n//     // Note: `value` is the single last value (e.g 0.2), while `prevValue` will\n//     //       be an array of the previsous valued (e.g. [0.3, 0.4, 0.65]).\n//   }\n// );\n\n// // onChange is called when the experiment code call the `.set()` or the\n// // `.append()` method on games, rounds, stages, players, playerRounds or\n// // playerStages.\n// Empirica.onChange(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player, // Player who made the change\n//     target, // Object on which the change was made (eg. player.set() => player)\n//     targetType, // Type of object on which the change was made (eg. player.set() => \"player\")\n//     key, // Key of changed value (e.g. player.set(\"score\", 1) => \"score\")\n//     value, // New value\n//     prevValue, // Previous value\n//     isAppend // True if the change was an append, false if it was a set\n//   ) => {\n//     // `onChange` is useful to run server-side logic for any user interaction.\n//     // Note the extra isAppend boolean that will allow to differenciate sets and\n//     // appends.\n//     Game.set(\"lastChangeAt\", new Date().toString());\n//   }\n// );\n\n// // onSubmit is called when the player submits a stage.\n// Empirica.onSubmit(\n//   (\n//     game,\n//     round,\n//     stage,\n//     player // Player who submitted\n//   ) => {}\n// );\n"]},"sourceType":"module","hash":"ef55efccc482a318c06c2867547cf841c3fb077e"}
