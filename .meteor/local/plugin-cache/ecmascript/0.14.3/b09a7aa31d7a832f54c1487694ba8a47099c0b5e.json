{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/Admin.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/Admin.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/Admin.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/Admin.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/Admin.jsx"}},"code":"module.export({\n  default: () => Admin\n});\nlet Alert, Button, Classes, Divider, Intent, Menu, MenuItem, Navbar, NavbarDivider, NavbarGroup, NavbarHeading, Popover;\nmodule.link(\"@blueprintjs/core\", {\n  Alert(v) {\n    Alert = v;\n  },\n\n  Button(v) {\n    Button = v;\n  },\n\n  Classes(v) {\n    Classes = v;\n  },\n\n  Divider(v) {\n    Divider = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  },\n\n  Menu(v) {\n    Menu = v;\n  },\n\n  MenuItem(v) {\n    MenuItem = v;\n  },\n\n  Navbar(v) {\n    Navbar = v;\n  },\n\n  NavbarDivider(v) {\n    NavbarDivider = v;\n  },\n\n  NavbarGroup(v) {\n    NavbarGroup = v;\n  },\n\n  NavbarHeading(v) {\n    NavbarHeading = v;\n  },\n\n  Popover(v) {\n    Popover = v;\n  }\n\n}, 0);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 1);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 2);\nlet PropTypes;\nmodule.link(\"prop-types\", {\n  default(v) {\n    PropTypes = v;\n  }\n\n}, 3);\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 4);\nlet Helmet;\nmodule.link(\"react-helmet\", {\n  Helmet(v) {\n    Helmet = v;\n  }\n\n}, 5);\nlet NavLink, Route, Switch;\nmodule.link(\"react-router-dom\", {\n  NavLink(v) {\n    NavLink = v;\n  },\n\n  Route(v) {\n    Route = v;\n  },\n\n  Switch(v) {\n    Switch = v;\n  }\n\n}, 6);\nlet AdminBatchesContainer;\nmodule.link(\"../containers/admin/AdminBatchesContainer.jsx\", {\n  default(v) {\n    AdminBatchesContainer = v;\n  }\n\n}, 7);\nlet AdminFactorsContainer;\nmodule.link(\"../containers/admin/AdminFactorsContainer.jsx\", {\n  default(v) {\n    AdminFactorsContainer = v;\n  }\n\n}, 8);\nlet AdminLobbyConfigsContainer;\nmodule.link(\"../containers/admin/AdminLobbyConfigsContainer.jsx\", {\n  default(v) {\n    AdminLobbyConfigsContainer = v;\n  }\n\n}, 9);\nlet AdminPlayersContainer;\nmodule.link(\"../containers/admin/AdminPlayersContainer.jsx\", {\n  default(v) {\n    AdminPlayersContainer = v;\n  }\n\n}, 10);\nlet AdminTreatmentsContainer;\nmodule.link(\"../containers/admin/AdminTreatmentsContainer.jsx\", {\n  default(v) {\n    AdminTreatmentsContainer = v;\n  }\n\n}, 11);\nlet AdminExport;\nmodule.link(\"./admin/AdminExport.jsx\", {\n  default(v) {\n    AdminExport = v;\n  }\n\n}, 12);\nlet AdminGames;\nmodule.link(\"./admin/AdminGames.jsx\", {\n  default(v) {\n    AdminGames = v;\n  }\n\n}, 13);\nlet withStaticProps;\nmodule.link(\"./Helpers.jsx\", {\n  withStaticProps(v) {\n    withStaticProps = v;\n  }\n\n}, 14);\nlet AlertToaster, SuccessToaster;\nmodule.link(\"./Toasters.jsx\", {\n  AlertToaster(v) {\n    AlertToaster = v;\n  },\n\n  SuccessToaster(v) {\n    SuccessToaster = v;\n  }\n\n}, 15);\nconst configurationPaths = [\"/admin/treatments\", \"/admin/treatments/archived\", \"/admin/factors\", \"/admin/factors/archived\", \"/admin/lobby-configurations\", \"/admin/lobby-configurations/archived\"];\n\nconst NavBarLink = (_ref) => {\n  let {\n    path,\n    name,\n    exact = false\n  } = _ref;\n  return /*#__PURE__*/React.createElement(NavLink, {\n    exact: exact,\n    to: path,\n    activeClassName: Classes.ACTIVE,\n    className: [Classes.BUTTON, Classes.MINIMAL].join(\" \")\n  }, name);\n};\n\nclass Admin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleConfigImport = () => {\n      this.uploadRef.current.click();\n    };\n\n    this.onImportConfigFileSelected = event => {\n      const file = event.currentTarget.files[0];\n      event.currentTarget.value = null;\n\n      if (!file) {\n        AlertToaster.show({\n          message: \"No file selected\"\n        });\n        return;\n      }\n\n      this.setState({\n        importing: true\n      });\n      var r = new FileReader();\n\n      r.onload = e => {\n        var text = e.target.result;\n        console.log(\"Got the file: \" + \"name: \" + file.name + \"type: \" + file.type + \"size: \" + file.size + \" bytes:\");\n        Meteor.call(\"adminImportConfiguration\", {\n          text\n        }, err => {\n          this.setState({\n            importing: false\n          });\n\n          if (err) {\n            AlertToaster.show({\n              message: \"Failed to import: \".concat(err)\n            });\n            return;\n          } else {\n            SuccessToaster.show({\n              message: \"Import Successful!\"\n            });\n          }\n        });\n      };\n\n      r.readAsText(file);\n    };\n\n    this.handleConfigExport = () => {\n      this.setState({\n        exporting: true\n      });\n      Meteor.call(\"adminExportConfiguration\", (err, yaml) => {\n        this.setState({\n          exporting: false\n        });\n\n        if (err) {\n          AlertToaster.show({\n            message: \"Failed to export configuration: \".concat(err)\n          });\n        } else {\n          console.log(yaml);\n          const ts = moment().format(\"YYYY-MM-DD HH-mm-ss\");\n          const filename = \"Empirica Configuration - \".concat(ts, \".yaml\");\n          const a = document.createElement(\"a\");\n          a.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(yaml));\n          a.setAttribute(\"download\", filename);\n          a.style.display = \"none\";\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n        }\n      });\n    };\n\n    this.setMode = mode => {\n      const {\n        router\n      } = this.context;\n      let path;\n\n      switch (mode) {\n        case \"monitoring\":\n          path = \"/admin\";\n          break;\n\n        case \"configuration\":\n          path = \"/admin/treatments\";\n          break;\n\n        default:\n          console.error(\"unknown mode: \".concat(mode));\n          return;\n      }\n\n      this.setState({\n        mode\n      });\n      router.history.push(path);\n    };\n\n    this.setBodyDark = mode => {\n      if (mode === \"configuration\") {\n        document.body.classList.add(Classes.DARK);\n      } else {\n        document.body.classList.remove(Classes.DARK);\n      }\n    };\n\n    this.handleOpenApp = () => {\n      window.open(\"/\", \"_blank\");\n    };\n\n    this.handleLogout = () => {\n      Meteor.logout();\n    };\n\n    this.handleResetGames = () => {\n      this.setState({\n        isOpenResetGames: false\n      });\n\n      if (!this.resetDatabaseIsActived()) {\n        return;\n      }\n\n      Meteor.call(\"adminResetDB\", true, err => {\n        if (err) {\n          AlertToaster.show({\n            message: \"Failed to reset games: \".concat(err)\n          });\n          return;\n        } else {\n          SuccessToaster.show({\n            message: \"Games reset!\"\n          });\n        }\n      });\n    };\n\n    this.handleResetApp = () => {\n      this.setState({\n        isOpenResetApp: false\n      });\n\n      if (!this.resetDatabaseIsActived()) {\n        return;\n      }\n\n      Meteor.call(\"adminResetDB\", err => {\n        if (err) {\n          AlertToaster.show({\n            message: \"Failed to reset app: \".concat(err)\n          });\n          return;\n        } else {\n          SuccessToaster.show({\n            message: \"App reset!\"\n          });\n        }\n      });\n    };\n\n    const _mode = configurationPaths.includes(props.location.pathname) ? \"configuration\" : \"monitoring\";\n\n    this.state = {\n      mode: _mode,\n      isOpenResetGames: false,\n      isOpenResetApp: false\n    };\n    this.setBodyDark(_mode);\n    this.uploadRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.redirectLoggedOut(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.redirectLoggedOut(nextProps);\n\n    if (this.props.location.pathname !== nextProps.location.pathname) {\n      const mode = configurationPaths.includes(nextProps.location.pathname) ? \"configuration\" : \"monitoring\";\n\n      if (mode !== this.state.mode) {\n        this.setState({\n          mode\n        });\n        this.setBodyDark(mode);\n      }\n    }\n  }\n\n  resetDatabaseIsActived() {\n    return Meteor.isDevelopment || Meteor.settings.public.debug_resetDatabase;\n  }\n\n  redirectLoggedOut(props) {\n    const {\n      user,\n      loggingIn,\n      loginPath\n    } = props;\n    const {\n      router\n    } = this.context;\n\n    if (!loggingIn && !user) {\n      router.history.push(loginPath || \"/login\");\n    }\n  }\n\n  render() {\n    const {\n      user,\n      loggingIn\n    } = this.props;\n    const {\n      mode,\n      importing,\n      exporting,\n      isOpenResetGames,\n      isOpenResetApp\n    } = this.state;\n\n    if (loggingIn || !user) {\n      return null;\n    }\n\n    const isConfigMode = mode === \"configuration\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"admin\"\n    }, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Empirica Admin\")), /*#__PURE__*/React.createElement(Navbar, {\n      className: \"header\"\n    }, /*#__PURE__*/React.createElement(NavbarGroup, {\n      align: \"left\"\n    }, /*#__PURE__*/React.createElement(NavbarHeading, null, /*#__PURE__*/React.createElement(\"strong\", null, \"Empirica\"), /*#__PURE__*/React.createElement(Divider, {\n      tagName: \"span\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: Classes.TEXT_MUTED\n    }, isConfigMode ? \"Configuration\" : \"Monitoring\")), isConfigMode ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavBarLink, {\n      path: \"/admin/treatments\",\n      name: \"Treatments\"\n    }), /*#__PURE__*/React.createElement(NavBarLink, {\n      path: \"/admin/factors\",\n      name: \"Factors\"\n    }), /*#__PURE__*/React.createElement(NavBarLink, {\n      path: \"/admin/lobby-configurations\",\n      name: \"Lobby Configurations\"\n    }), /*#__PURE__*/React.createElement(NavbarDivider, null), /*#__PURE__*/React.createElement(Button, {\n      text: \"Import\",\n      minimal: true,\n      icon: IconNames.IMPORT,\n      onClick: this.handleConfigImport,\n      loading: importing\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      ref: this.uploadRef,\n      onChange: this.onImportConfigFileSelected,\n      type: \"file\"\n    }), /*#__PURE__*/React.createElement(Button, {\n      text: \"Export\",\n      minimal: true,\n      icon: IconNames.EXPORT,\n      onClick: this.handleConfigExport,\n      loading: exporting\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavBarLink, {\n      exact: true,\n      path: \"/admin\",\n      name: \"Batches\"\n    }), /*#__PURE__*/React.createElement(NavBarLink, {\n      path: \"/admin/games\",\n      name: \"Games\"\n    }), /*#__PURE__*/React.createElement(NavBarLink, {\n      path: \"/admin/players\",\n      name: \"Players\"\n    }), /*#__PURE__*/React.createElement(NavBarLink, {\n      path: \"/admin/export\",\n      name: \"Export\"\n    }))), /*#__PURE__*/React.createElement(NavbarGroup, {\n      align: \"right\"\n    }, isConfigMode ? /*#__PURE__*/React.createElement(Button, {\n      icon: IconNames.PLAY,\n      onClick: this.setMode.bind(this, \"monitoring\")\n    }, \"Monitoring\") : /*#__PURE__*/React.createElement(Button, {\n      icon: IconNames.COG,\n      onClick: this.setMode.bind(this, \"configuration\")\n    }, \"Configuration\"), /*#__PURE__*/React.createElement(NavbarDivider, null), this.resetDatabaseIsActived() ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Popover, {\n      content: /*#__PURE__*/React.createElement(Menu, null, /*#__PURE__*/React.createElement(MenuItem, {\n        intent: Intent.WARNING,\n        icon: IconNames.ERASER,\n        text: \"Reset Games\",\n        onClick: () => this.setState({\n          isOpenResetGames: true\n        })\n      }), /*#__PURE__*/React.createElement(MenuItem, {\n        intent: Intent.DANGER,\n        icon: IconNames.TRASH,\n        text: \"Reset Entire App\",\n        onClick: () => this.setState({\n          isOpenResetApp: true\n        })\n      }))\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: Classes.MINIMAL,\n      icon: IconNames.ERASER,\n      text: \"Reset\"\n    })), /*#__PURE__*/React.createElement(Alert, {\n      className: isConfigMode ? Classes.DARK : \"\",\n      canOutsideClickCancel: true,\n      canEscapeKeyCancel: true,\n      confirmButtonText: \"Reset Games\",\n      cancelButtonText: \"Cancel\",\n      intent: Intent.WARNING,\n      icon: IconNames.ERASER,\n      isOpen: isOpenResetGames,\n      onCancel: () => this.setState({\n        isOpenResetGames: false\n      }),\n      onConfirm: this.handleResetGames\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"This will remove batches/games/players and keep treatments/factors.\"), /*#__PURE__*/React.createElement(\"p\", null, \"Do you wish to continue?\")), /*#__PURE__*/React.createElement(Alert, {\n      className: isConfigMode ? Classes.DARK : \"\",\n      canOutsideClickCancel: true,\n      canEscapeKeyCancel: true,\n      confirmButtonText: \"Reset Entire App\",\n      cancelButtonText: \"Cancel\",\n      intent: Intent.DANGER,\n      icon: IconNames.TRASH,\n      isOpen: isOpenResetApp,\n      onCancel: () => this.setState({\n        isOpenResetApp: false\n      }),\n      onConfirm: this.handleResetApp\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"You are about to delete all data in the DB!\"), /*#__PURE__*/React.createElement(\"p\", null, \"Are you sure you want to do that?\"))) : \"\", /*#__PURE__*/React.createElement(NavbarDivider, null), \" \", /*#__PURE__*/React.createElement(Button, {\n      className: Classes.MINIMAL,\n      icon: IconNames.PLAY,\n      text: \"Open App\",\n      onClick: this.handleOpenApp\n    }), /*#__PURE__*/React.createElement(NavbarDivider, null), \" \", /*#__PURE__*/React.createElement(Button, {\n      className: Classes.MINIMAL,\n      icon: IconNames.LOG_OUT,\n      text: \"Logout\",\n      onClick: this.handleLogout\n    }))), /*#__PURE__*/React.createElement(\"main\", null, /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin\",\n      exact: true,\n      component: AdminBatchesContainer\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/batches/archived\",\n      component: withStaticProps(AdminBatchesContainer, {\n        archived: true\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/games\",\n      component: AdminGames\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/players/retired\",\n      component: withStaticProps(AdminPlayersContainer, {\n        retired: true\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/players\",\n      component: AdminPlayersContainer\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/export\",\n      component: AdminExport\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/treatments/archived\",\n      component: withStaticProps(AdminTreatmentsContainer, {\n        archived: true\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/treatments\",\n      component: withStaticProps(AdminTreatmentsContainer, {\n        archived: false\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/lobby-configurations/archived\",\n      component: withStaticProps(AdminLobbyConfigsContainer, {\n        archived: true\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/lobby-configurations\",\n      component: withStaticProps(AdminLobbyConfigsContainer, {\n        archived: false\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/factors/archived\",\n      component: withStaticProps(AdminFactorsContainer, {\n        archived: true\n      })\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"/admin/factors\",\n      component: AdminFactorsContainer\n    }))));\n  }\n\n}\n\nAdmin.propTypes = {\n  user: PropTypes.object,\n  // Current meteor user\n  loggingIn: PropTypes.bool,\n  // Current meteor user logging in\n  loading: PropTypes.bool // Subscription status\n\n};\nAdmin.contextTypes = {\n  router: PropTypes.object\n};","map":{"version":3,"sources":["packages/empirica:core/ui/components/Admin.jsx"],"names":["module","export","default","Admin","Alert","Button","Classes","Divider","Intent","Menu","MenuItem","Navbar","NavbarDivider","NavbarGroup","NavbarHeading","Popover","link","v","IconNames","moment","PropTypes","React","Helmet","NavLink","Route","Switch","AdminBatchesContainer","AdminFactorsContainer","AdminLobbyConfigsContainer","AdminPlayersContainer","AdminTreatmentsContainer","AdminExport","AdminGames","withStaticProps","AlertToaster","SuccessToaster","configurationPaths","NavBarLink","path","name","exact","ACTIVE","BUTTON","MINIMAL","join","Component","constructor","props","handleConfigImport","uploadRef","current","click","onImportConfigFileSelected","event","file","currentTarget","files","value","show","message","setState","importing","r","FileReader","onload","e","text","target","result","console","log","type","size","Meteor","call","err","readAsText","handleConfigExport","exporting","yaml","ts","format","filename","a","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","removeChild","setMode","mode","router","context","error","history","push","setBodyDark","classList","add","DARK","remove","handleOpenApp","window","open","handleLogout","logout","handleResetGames","isOpenResetGames","resetDatabaseIsActived","handleResetApp","isOpenResetApp","includes","location","pathname","state","createRef","componentDidMount","redirectLoggedOut","componentWillReceiveProps","nextProps","isDevelopment","settings","public","debug_resetDatabase","user","loggingIn","loginPath","render","isConfigMode","TEXT_MUTED","IMPORT","EXPORT","PLAY","bind","COG","WARNING","ERASER","DANGER","TRASH","LOG_OUT","archived","retired","propTypes","object","bool","loading","contextTypes"],"mappings":"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","sourcesContent":["import {\n  Alert,\n  Button,\n  Classes,\n  Divider,\n  Intent,\n  Menu,\n  MenuItem,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  Popover\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport moment from \"moment\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { NavLink, Route, Switch } from \"react-router-dom\";\nimport AdminBatchesContainer from \"../containers/admin/AdminBatchesContainer.jsx\";\nimport AdminFactorsContainer from \"../containers/admin/AdminFactorsContainer.jsx\";\nimport AdminLobbyConfigsContainer from \"../containers/admin/AdminLobbyConfigsContainer.jsx\";\nimport AdminPlayersContainer from \"../containers/admin/AdminPlayersContainer.jsx\";\nimport AdminTreatmentsContainer from \"../containers/admin/AdminTreatmentsContainer.jsx\";\nimport AdminExport from \"./admin/AdminExport.jsx\";\nimport AdminGames from \"./admin/AdminGames.jsx\";\nimport { withStaticProps } from \"./Helpers.jsx\";\nimport { AlertToaster, SuccessToaster } from \"./Toasters.jsx\";\n\nconst configurationPaths = [\n  \"/admin/treatments\",\n  \"/admin/treatments/archived\",\n  \"/admin/factors\",\n  \"/admin/factors/archived\",\n  \"/admin/lobby-configurations\",\n  \"/admin/lobby-configurations/archived\"\n];\n\nconst NavBarLink = ({ path, name, exact = false }) => (\n  <NavLink\n    exact={exact}\n    to={path}\n    activeClassName={Classes.ACTIVE}\n    className={[Classes.BUTTON, Classes.MINIMAL].join(\" \")}\n  >\n    {name}\n  </NavLink>\n);\n\nexport default class Admin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const mode = configurationPaths.includes(props.location.pathname)\n      ? \"configuration\"\n      : \"monitoring\";\n    this.state = { mode, isOpenResetGames: false, isOpenResetApp: false };\n    this.setBodyDark(mode);\n    this.uploadRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.redirectLoggedOut(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.redirectLoggedOut(nextProps);\n\n    if (this.props.location.pathname !== nextProps.location.pathname) {\n      const mode = configurationPaths.includes(nextProps.location.pathname)\n        ? \"configuration\"\n        : \"monitoring\";\n      if (mode !== this.state.mode) {\n        this.setState({ mode });\n        this.setBodyDark(mode);\n      }\n    }\n  }\n\n  handleConfigImport = () => {\n    this.uploadRef.current.click();\n  };\n\n  onImportConfigFileSelected = event => {\n    const file = event.currentTarget.files[0];\n    event.currentTarget.value = null;\n    if (!file) {\n      AlertToaster.show({ message: \"No file selected\" });\n      return;\n    }\n\n    this.setState({ importing: true });\n\n    var r = new FileReader();\n    r.onload = e => {\n      var text = e.target.result;\n      console.log(\n        \"Got the file: \" +\n          \"name: \" +\n          file.name +\n          \"type: \" +\n          file.type +\n          \"size: \" +\n          file.size +\n          \" bytes:\"\n      );\n\n      Meteor.call(\"adminImportConfiguration\", { text }, err => {\n        this.setState({ importing: false });\n        if (err) {\n          AlertToaster.show({ message: `Failed to import: ${err}` });\n          return;\n        } else {\n          SuccessToaster.show({\n            message: \"Import Successful!\"\n          });\n        }\n      });\n    };\n    r.readAsText(file);\n  };\n\n  handleConfigExport = () => {\n    this.setState({ exporting: true });\n    Meteor.call(\"adminExportConfiguration\", (err, yaml) => {\n      this.setState({ exporting: false });\n      if (err) {\n        AlertToaster.show({\n          message: `Failed to export configuration: ${err}`\n        });\n      } else {\n        console.log(yaml);\n        const ts = moment().format(\"YYYY-MM-DD HH-mm-ss\");\n        const filename = `Empirica Configuration - ${ts}.yaml`;\n        const a = document.createElement(\"a\");\n        a.setAttribute(\n          \"href\",\n          \"data:text/plain;charset=utf-8,\" + encodeURIComponent(yaml)\n        );\n        a.setAttribute(\"download\", filename);\n        a.style.display = \"none\";\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    });\n  };\n\n  setMode = mode => {\n    const { router } = this.context;\n\n    let path;\n    switch (mode) {\n      case \"monitoring\":\n        path = \"/admin\";\n        break;\n      case \"configuration\":\n        path = \"/admin/treatments\";\n        break;\n      default:\n        console.error(`unknown mode: ${mode}`);\n        return;\n    }\n\n    this.setState({ mode });\n    router.history.push(path);\n  };\n\n  setBodyDark = mode => {\n    if (mode === \"configuration\") {\n      document.body.classList.add(Classes.DARK);\n    } else {\n      document.body.classList.remove(Classes.DARK);\n    }\n  };\n\n  resetDatabaseIsActived() {\n    return Meteor.isDevelopment || Meteor.settings.public.debug_resetDatabase;\n  }\n\n  handleOpenApp = () => {\n    window.open(\"/\", \"_blank\");\n  };\n\n  handleLogout = () => {\n    Meteor.logout();\n  };\n\n  handleResetGames = () => {\n    this.setState({ isOpenResetGames: false });\n    if (!this.resetDatabaseIsActived()) {\n      return;\n    }\n    Meteor.call(\"adminResetDB\", true, err => {\n      if (err) {\n        AlertToaster.show({ message: `Failed to reset games: ${err}` });\n        return;\n      } else {\n        SuccessToaster.show({\n          message: \"Games reset!\"\n        });\n      }\n    });\n  };\n\n  handleResetApp = () => {\n    this.setState({ isOpenResetApp: false });\n    if (!this.resetDatabaseIsActived()) {\n      return;\n    }\n    Meteor.call(\"adminResetDB\", err => {\n      if (err) {\n        AlertToaster.show({ message: `Failed to reset app: ${err}` });\n        return;\n      } else {\n        SuccessToaster.show({\n          message: \"App reset!\"\n        });\n      }\n    });\n  };\n\n  redirectLoggedOut(props) {\n    const { user, loggingIn, loginPath } = props;\n    const { router } = this.context;\n\n    if (!loggingIn && !user) {\n      router.history.push(loginPath || `/login`);\n    }\n  }\n\n  render() {\n    const { user, loggingIn } = this.props;\n    const {\n      mode,\n      importing,\n      exporting,\n      isOpenResetGames,\n      isOpenResetApp\n    } = this.state;\n\n    if (loggingIn || !user) {\n      return null;\n    }\n\n    const isConfigMode = mode === \"configuration\";\n\n    return (\n      <div className=\"admin\">\n        <Helmet>\n          <title>Empirica Admin</title>\n        </Helmet>\n        <Navbar className=\"header\">\n          <NavbarGroup align=\"left\">\n            <NavbarHeading>\n              <strong>Empirica</strong>\n              <Divider tagName=\"span\" />\n              <span className={Classes.TEXT_MUTED}>\n                {isConfigMode ? \"Configuration\" : \"Monitoring\"}\n              </span>\n            </NavbarHeading>\n            {isConfigMode ? (\n              <>\n                <NavBarLink path=\"/admin/treatments\" name=\"Treatments\" />\n                <NavBarLink path=\"/admin/factors\" name=\"Factors\" />\n                <NavBarLink\n                  path=\"/admin/lobby-configurations\"\n                  name=\"Lobby Configurations\"\n                />\n                <NavbarDivider />\n                <Button\n                  text=\"Import\"\n                  minimal\n                  icon={IconNames.IMPORT}\n                  onClick={this.handleConfigImport}\n                  loading={importing}\n                />\n                <input\n                  ref={this.uploadRef}\n                  onChange={this.onImportConfigFileSelected}\n                  type=\"file\"\n                />\n                <Button\n                  text=\"Export\"\n                  minimal\n                  icon={IconNames.EXPORT}\n                  onClick={this.handleConfigExport}\n                  loading={exporting}\n                />\n              </>\n            ) : (\n              <>\n                <NavBarLink exact path=\"/admin\" name=\"Batches\" />\n                <NavBarLink path=\"/admin/games\" name=\"Games\" />\n                <NavBarLink path=\"/admin/players\" name=\"Players\" />\n                <NavBarLink path=\"/admin/export\" name=\"Export\" />\n              </>\n            )}\n          </NavbarGroup>\n\n          <NavbarGroup align=\"right\">\n            {isConfigMode ? (\n              <Button\n                icon={IconNames.PLAY}\n                onClick={this.setMode.bind(this, \"monitoring\")}\n              >\n                Monitoring\n              </Button>\n            ) : (\n              <Button\n                icon={IconNames.COG}\n                onClick={this.setMode.bind(this, \"configuration\")}\n              >\n                Configuration\n              </Button>\n            )}\n            <NavbarDivider />\n            {this.resetDatabaseIsActived() ? (\n              <>\n                <Popover\n                  content={\n                    <Menu>\n                      <MenuItem\n                        intent={Intent.WARNING}\n                        icon={IconNames.ERASER}\n                        text=\"Reset Games\"\n                        onClick={() =>\n                          this.setState({ isOpenResetGames: true })\n                        }\n                      />\n\n                      <MenuItem\n                        intent={Intent.DANGER}\n                        icon={IconNames.TRASH}\n                        text=\"Reset Entire App\"\n                        onClick={() => this.setState({ isOpenResetApp: true })}\n                      />\n                    </Menu>\n                  }\n                >\n                  <Button\n                    className={Classes.MINIMAL}\n                    icon={IconNames.ERASER}\n                    text=\"Reset\"\n                  />\n                </Popover>\n\n                <Alert\n                  className={isConfigMode ? Classes.DARK : \"\"}\n                  canOutsideClickCancel\n                  canEscapeKeyCancel\n                  confirmButtonText=\"Reset Games\"\n                  cancelButtonText=\"Cancel\"\n                  intent={Intent.WARNING}\n                  icon={IconNames.ERASER}\n                  isOpen={isOpenResetGames}\n                  onCancel={() => this.setState({ isOpenResetGames: false })}\n                  onConfirm={this.handleResetGames}\n                >\n                  <p>\n                    This will remove batches/games/players and keep\n                    treatments/factors.\n                  </p>\n                  <p>Do you wish to continue?</p>\n                </Alert>\n\n                <Alert\n                  className={isConfigMode ? Classes.DARK : \"\"}\n                  canOutsideClickCancel\n                  canEscapeKeyCancel\n                  confirmButtonText=\"Reset Entire App\"\n                  cancelButtonText=\"Cancel\"\n                  intent={Intent.DANGER}\n                  icon={IconNames.TRASH}\n                  isOpen={isOpenResetApp}\n                  onCancel={() => this.setState({ isOpenResetApp: false })}\n                  onConfirm={this.handleResetApp}\n                >\n                  <p>You are about to delete all data in the DB!</p>\n                  <p>Are you sure you want to do that?</p>\n                </Alert>\n              </>\n            ) : (\n              \"\"\n            )}\n            <NavbarDivider />{\" \"}\n            <Button\n              className={Classes.MINIMAL}\n              icon={IconNames.PLAY}\n              text=\"Open App\"\n              onClick={this.handleOpenApp}\n            />\n            <NavbarDivider />{\" \"}\n            <Button\n              className={Classes.MINIMAL}\n              icon={IconNames.LOG_OUT}\n              text=\"Logout\"\n              onClick={this.handleLogout}\n            />\n          </NavbarGroup>\n        </Navbar>\n\n        <main>\n          <Switch>\n            <Route path=\"/admin\" exact component={AdminBatchesContainer} />\n            <Route\n              path=\"/admin/batches/archived\"\n              component={withStaticProps(AdminBatchesContainer, {\n                archived: true\n              })}\n            />\n            <Route path=\"/admin/games\" component={AdminGames} />\n            <Route\n              path=\"/admin/players/retired\"\n              component={withStaticProps(AdminPlayersContainer, {\n                retired: true\n              })}\n            />\n            <Route path=\"/admin/players\" component={AdminPlayersContainer} />\n            <Route path=\"/admin/export\" component={AdminExport} />\n            <Route\n              path=\"/admin/treatments/archived\"\n              component={withStaticProps(AdminTreatmentsContainer, {\n                archived: true\n              })}\n            />\n            <Route\n              path=\"/admin/treatments\"\n              component={withStaticProps(AdminTreatmentsContainer, {\n                archived: false\n              })}\n            />\n            <Route\n              path=\"/admin/lobby-configurations/archived\"\n              component={withStaticProps(AdminLobbyConfigsContainer, {\n                archived: true\n              })}\n            />\n            <Route\n              path=\"/admin/lobby-configurations\"\n              component={withStaticProps(AdminLobbyConfigsContainer, {\n                archived: false\n              })}\n            />\n            <Route\n              path=\"/admin/factors/archived\"\n              component={withStaticProps(AdminFactorsContainer, {\n                archived: true\n              })}\n            />\n            <Route path=\"/admin/factors\" component={AdminFactorsContainer} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nAdmin.propTypes = {\n  user: PropTypes.object, // Current meteor user\n  loggingIn: PropTypes.bool, // Current meteor user logging in\n  loading: PropTypes.bool // Subscription status\n};\n\nAdmin.contextTypes = {\n  router: PropTypes.object\n};\n"]},"sourceType":"module","hash":"b09a7aa31d7a832f54c1487694ba8a47099c0b5e"}
