{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/admin/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/empirica:core/api/admin/methods.js","filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/admin/methods.js","passPerPreset":false,"envName":"production","cwd":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","root":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/admin/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/admin/methods.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet yaml;\nmodule.link(\"js-yaml\", {\n  default(v) {\n    yaml = v;\n  }\n\n}, 0);\nlet Treatments;\nmodule.link(\"../../api/treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 1);\nlet Factors;\nmodule.link(\"../../api/factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"../../api/factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet LobbyConfigs;\nmodule.link(\"../../api/lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 4);\nlet bootstrap;\nmodule.link(\"../../startup/server/bootstrap.js\", {\n  bootstrap(v) {\n    bootstrap = v;\n  }\n\n}, 5);\nlet log;\nmodule.link(\"../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 6);\nconst userColls = [\"meteor_accounts_loginServiceConfiguration\", \"users\"];\nconst keepPartial = [\"treatments\", \"factors\", \"factor_types\", \"lobby_configs\"];\nconst deleteColls = [\"game_lobbies\", \"player_inputs\", \"batches\", \"rounds\", \"counters\", \"games\", \"player_rounds\", \"players\", \"player_stages\", \"player_logs\", \"stages\"].concat(keepPartial);\n\nconst localTypeForImported = data => {\n  return factorTypeId => {\n    const importedType = data.factorTypes.find(t => t._id === factorTypeId);\n\n    if (!importedType) {\n      log.warn(\"could not find corresponding factorTypeId\", factorTypeId);\n      return;\n    }\n\n    const type = FactorTypes.findOne({\n      name: importedType.name\n    });\n\n    if (!type) {\n      log.warn(\"could not import factor type, no correponding type\");\n      return;\n    }\n\n    return type._id;\n  };\n};\n\nconst localFactorForImported = data => {\n  return factorId => {\n    const importedFactor = data.factors.find(t => t._id === factorId);\n\n    if (!importedFactor) {\n      log.warn(\"could not import factor, no correponding imported factor\");\n      return;\n    }\n\n    const {\n      value,\n      factorTypeId: importedFactorTypeId\n    } = importedFactor;\n    const factorTypeId = localTypeForImported(data)(importedFactorTypeId);\n\n    if (!factorTypeId) {\n      log.warn(\"could not convert factor types\");\n      return;\n    }\n\n    const factor = Factors.findOne({\n      value,\n      factorTypeId\n    });\n\n    if (!factor) {\n      log.warn(\"could not import factor, no correponding factor\");\n      return;\n    }\n\n    return factor._id;\n  };\n};\n\nconst archivedUpdate = (archivedAt, existingArchivedAt) => !!archivedAt === !!existingArchivedAt ? null : archivedAt ? {\n  $set: {\n    archivedAt: new Date()\n  }\n} : {\n  $unset: {\n    archivedAt: true,\n    archivedById: true\n  }\n};\n\nMeteor.methods({\n  adminImportConfiguration(_ref) {\n    let {\n      text\n    } = _ref;\n    log.debug(\"Import starting.\");\n    const data = yaml.safeLoad(text);\n    const convertFactorTypeId = localTypeForImported(data);\n    const convertFactorId = localFactorForImported(data);\n    (data.factorTypes || []).forEach(f => {\n      const {\n        archivedAt,\n        name\n      } = f;\n      const exists = FactorTypes.findOne({\n        name\n      });\n\n      if (exists) {\n        log.debug(\"exists FactorTypes\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n\n        if (query) {\n          FactorTypes.update(exists._id, query);\n        }\n\n        return;\n      }\n\n      log.debug(\"new FactorTypes\");\n      FactorTypes.insert(f);\n    });\n    (data.factors || []).forEach(f => {\n      const {\n        factorTypeId: importedFactorTypeId,\n        value\n      } = f;\n      const factorTypeId = convertFactorTypeId(importedFactorTypeId);\n\n      if (!factorTypeId) {\n        log.debug(\"could not convert factorTypeIds\");\n        return;\n      }\n\n      const exists = Factors.findOne({\n        factorTypeId,\n        value\n      });\n\n      if (exists) {\n        log.debug(\"exists Factors\");\n        return;\n      }\n\n      const params = _objectSpread({}, f, {\n        factorTypeId\n      });\n\n      log.debug(\"new Factors\", params);\n      Factors.insert(params);\n    });\n    (data.treatments || []).forEach(t => {\n      const {\n        archivedAt,\n        factorIds: importedFactorIds\n      } = t;\n      const factorIds = importedFactorIds.map(convertFactorId);\n\n      if (_.compact(factorIds).length !== importedFactorIds.length) {\n        log.debug(\"could not convert factorIds\");\n        return;\n      }\n\n      const exists = Treatments.findOne({\n        factorIds\n      });\n\n      if (exists) {\n        log.debug(\"exists Treatments\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n\n        if (query) {\n          Treatments.update(exists._id, query);\n        }\n\n        return;\n      }\n\n      const params = _objectSpread({}, t, {\n        factorIds\n      });\n\n      log.debug(\"new Treatments\", params);\n      Treatments.insert(params);\n    });\n    (data.lobbyConfigs || []).forEach(l => {\n      const query = _.pick(l, \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"extendCount\");\n\n      const exists = LobbyConfigs.findOne(query);\n\n      if (exists) {\n        log.debug(\"exists LobbyConfigs\");\n        const query = archivedUpdate(l.archivedAt, exists.archivedAt);\n\n        if (query) {\n          LobbyConfigs.update(exists._id, query);\n        }\n\n        return;\n      }\n\n      log.debug(\"new LobbyConfigs\");\n      LobbyConfigs.insert(l);\n    });\n    log.debug(\"Import done.\");\n  },\n\n  adminExportConfiguration() {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const out = {\n      treatments: [],\n      factorTypes: [],\n      factors: [],\n      lobbyConfigs: []\n    };\n    const treatments = Treatments.find().fetch();\n    treatments.forEach(t => out.treatments.push(_.pick(t, \"name\", \"factorIds\", \"archivedAt\")));\n    const factorTypes = FactorTypes.find().fetch();\n    factorTypes.forEach(t => out.factorTypes.push(_.pick(t, \"_id\", \"name\", \"description\", \"required\", \"type\", \"min\", \"max\", \"archivedAt\")));\n    const factors = Factors.find().fetch();\n    factors.forEach(f => out.factors.push(_.pick(f, \"_id\", \"name\", \"value\", \"factorTypeId\", \"archivedAt\")));\n    const lobbyConfigs = LobbyConfigs.find().fetch();\n    lobbyConfigs.forEach(l => out.lobbyConfigs.push(_.pick(l, \"name\", \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"extendCount\", \"bacthIds\", \"gameLobbyIds\", \"archivedAt\")));\n    return yaml.safeDump(out);\n  }\n\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_resetDatabase) {\n  Meteor.methods({\n    adminResetDB(partial) {\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      if (Meteor.isClient) {\n        return;\n      }\n\n      const driver = MongoInternals.defaultRemoteCollectionDriver();\n      const db = driver.mongo.db;\n      db.listCollections().toArray(Meteor.bindEnvironment((err, colls) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        colls = _.sortBy(colls, c => c.name === \"players\" ? 0 : 1);\n        colls.forEach(collection => {\n          if (!deleteColls.includes(collection.name)) {\n            return;\n          }\n\n          if (partial && keepPartial.includes(collection.name)) {\n            return;\n          }\n\n          const coll = driver.open(collection.name);\n          coll.rawCollection().drop();\n        });\n        db.listCollections().toArray(Meteor.bindEnvironment((err, colls) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n\n          log.debug(\"Keeping:\");\n          colls.forEach(collection => {\n            let extra = \"\";\n\n            if (userColls.includes(collection.name)) {\n              extra = \"(used by admin login system)\";\n            }\n\n            log.debug(\" - \" + collection.name, extra);\n          });\n          log.debug(\"Cleared DB\");\n          bootstrap();\n        }));\n      }));\n    }\n\n  });\n}\n\nMeteor.startup(() => {});","map":{"version":3,"sources":["packages/empirica:core/api/admin/methods.js"],"names":["_objectSpread","module","link","default","v","yaml","Treatments","Factors","FactorTypes","LobbyConfigs","bootstrap","log","userColls","keepPartial","deleteColls","concat","localTypeForImported","data","factorTypeId","importedType","factorTypes","find","t","_id","warn","type","findOne","name","localFactorForImported","factorId","importedFactor","factors","value","importedFactorTypeId","factor","archivedUpdate","archivedAt","existingArchivedAt","$set","Date","$unset","archivedById","Meteor","methods","adminImportConfiguration","text","debug","safeLoad","convertFactorTypeId","convertFactorId","forEach","f","exists","query","update","insert","params","treatments","factorIds","importedFactorIds","map","_","compact","length","lobbyConfigs","l","pick","adminExportConfiguration","userId","Error","out","fetch","push","safeDump","isDevelopment","settings","public","debug_resetDatabase","adminResetDB","partial","isClient","driver","MongoInternals","defaultRemoteCollectionDriver","db","mongo","listCollections","toArray","bindEnvironment","err","colls","console","error","sortBy","c","collection","includes","coll","open","rawCollection","drop","extra","startup"],"mappings":"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","sourcesContent":["// This should contain admin top level type operations like resetting the DB\n// or performing other grand operations. Use with extreme caution.\nimport yaml from \"js-yaml\";\n\nimport { Treatments } from \"../../api/treatments/treatments.js\";\nimport { Factors } from \"../../api/factors/factors.js\";\nimport { FactorTypes } from \"../../api/factor-types/factor-types.js\";\nimport { LobbyConfigs } from \"../../api/lobby-configs/lobby-configs.js\";\nimport { bootstrap } from \"../../startup/server/bootstrap.js\";\nimport log from \"../../lib/log.js\";\n\nconst userColls = [\"meteor_accounts_loginServiceConfiguration\", \"users\"];\nconst keepPartial = [\"treatments\", \"factors\", \"factor_types\", \"lobby_configs\"];\nconst deleteColls = [\n  \"game_lobbies\",\n  \"player_inputs\",\n  \"batches\",\n  \"rounds\",\n  \"counters\",\n  \"games\",\n  \"player_rounds\",\n  \"players\",\n  \"player_stages\",\n  \"player_logs\",\n  \"stages\"\n].concat(keepPartial);\n\nconst localTypeForImported = data => {\n  return factorTypeId => {\n    const importedType = data.factorTypes.find(t => t._id === factorTypeId);\n    if (!importedType) {\n      log.warn(\"could not find corresponding factorTypeId\", factorTypeId);\n      return;\n    }\n    const type = FactorTypes.findOne({ name: importedType.name });\n    if (!type) {\n      log.warn(\"could not import factor type, no correponding type\");\n      return;\n    }\n\n    return type._id;\n  };\n};\n\nconst localFactorForImported = data => {\n  return factorId => {\n    const importedFactor = data.factors.find(t => t._id === factorId);\n    if (!importedFactor) {\n      log.warn(\"could not import factor, no correponding imported factor\");\n      return;\n    }\n    const { value, factorTypeId: importedFactorTypeId } = importedFactor;\n\n    const factorTypeId = localTypeForImported(data)(importedFactorTypeId);\n    if (!factorTypeId) {\n      log.warn(\"could not convert factor types\");\n      return;\n    }\n    const factor = Factors.findOne({ value, factorTypeId });\n    if (!factor) {\n      log.warn(\"could not import factor, no correponding factor\");\n      return;\n    }\n\n    return factor._id;\n  };\n};\n\nconst archivedUpdate = (archivedAt, existingArchivedAt) =>\n  !!archivedAt === !!existingArchivedAt\n    ? null\n    : archivedAt\n    ? { $set: { archivedAt: new Date() } }\n    : { $unset: { archivedAt: true, archivedById: true } };\n\nMeteor.methods({\n  adminImportConfiguration({ text }) {\n    log.debug(\"Import starting.\");\n    const data = yaml.safeLoad(text);\n    const convertFactorTypeId = localTypeForImported(data);\n    const convertFactorId = localFactorForImported(data);\n\n    (data.factorTypes || []).forEach(f => {\n      const { archivedAt, name } = f;\n      const exists = FactorTypes.findOne({ name });\n      if (exists) {\n        log.debug(\"exists FactorTypes\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n        if (query) {\n          FactorTypes.update(exists._id, query);\n        }\n        return;\n      }\n      log.debug(\"new FactorTypes\");\n      FactorTypes.insert(f);\n    });\n\n    (data.factors || []).forEach(f => {\n      const { factorTypeId: importedFactorTypeId, value } = f;\n      const factorTypeId = convertFactorTypeId(importedFactorTypeId);\n      if (!factorTypeId) {\n        log.debug(\"could not convert factorTypeIds\");\n        return;\n      }\n      const exists = Factors.findOne({ factorTypeId, value });\n      if (exists) {\n        log.debug(\"exists Factors\");\n        return;\n      }\n      const params = { ...f, factorTypeId };\n      log.debug(\"new Factors\", params);\n      Factors.insert(params);\n    });\n\n    (data.treatments || []).forEach(t => {\n      const { archivedAt, factorIds: importedFactorIds } = t;\n      const factorIds = importedFactorIds.map(convertFactorId);\n      if (_.compact(factorIds).length !== importedFactorIds.length) {\n        log.debug(\"could not convert factorIds\");\n        return;\n      }\n      const exists = Treatments.findOne({ factorIds });\n      if (exists) {\n        log.debug(\"exists Treatments\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n        if (query) {\n          Treatments.update(exists._id, query);\n        }\n        return;\n      }\n      const params = { ...t, factorIds };\n      log.debug(\"new Treatments\", params);\n      Treatments.insert(params);\n    });\n\n    (data.lobbyConfigs || []).forEach(l => {\n      const query = _.pick(\n        l,\n        \"timeoutType\",\n        \"timeoutInSeconds\",\n        \"timeoutStrategy\",\n        \"timeoutBots\",\n        \"extendCount\"\n      );\n      const exists = LobbyConfigs.findOne(query);\n      if (exists) {\n        log.debug(\"exists LobbyConfigs\");\n        const query = archivedUpdate(l.archivedAt, exists.archivedAt);\n        if (query) {\n          LobbyConfigs.update(exists._id, query);\n        }\n        return;\n      }\n      log.debug(\"new LobbyConfigs\");\n      LobbyConfigs.insert(l);\n    });\n\n    log.debug(\"Import done.\");\n  },\n\n  adminExportConfiguration() {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const out = {\n      treatments: [],\n      factorTypes: [],\n      factors: [],\n      lobbyConfigs: []\n    };\n\n    const treatments = Treatments.find().fetch();\n    treatments.forEach(t =>\n      out.treatments.push(_.pick(t, \"name\", \"factorIds\", \"archivedAt\"))\n    );\n\n    const factorTypes = FactorTypes.find().fetch();\n    factorTypes.forEach(t =>\n      out.factorTypes.push(\n        _.pick(\n          t,\n          \"_id\",\n          \"name\",\n          \"description\",\n          \"required\",\n          \"type\",\n          \"min\",\n          \"max\",\n          \"archivedAt\"\n        )\n      )\n    );\n\n    const factors = Factors.find().fetch();\n    factors.forEach(f =>\n      out.factors.push(\n        _.pick(f, \"_id\", \"name\", \"value\", \"factorTypeId\", \"archivedAt\")\n      )\n    );\n\n    const lobbyConfigs = LobbyConfigs.find().fetch();\n    lobbyConfigs.forEach(l =>\n      out.lobbyConfigs.push(\n        _.pick(\n          l,\n          \"name\",\n          \"timeoutType\",\n          \"timeoutInSeconds\",\n          \"timeoutStrategy\",\n          \"timeoutBots\",\n          \"extendCount\",\n          \"bacthIds\",\n          \"gameLobbyIds\",\n          \"archivedAt\"\n        )\n      )\n    );\n\n    return yaml.safeDump(out);\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_resetDatabase) {\n  Meteor.methods({\n    adminResetDB(partial) {\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      if (Meteor.isClient) {\n        return;\n      }\n\n      const driver = MongoInternals.defaultRemoteCollectionDriver();\n      const db = driver.mongo.db;\n\n      db.listCollections().toArray(\n        Meteor.bindEnvironment((err, colls) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n          colls = _.sortBy(colls, c => (c.name === \"players\" ? 0 : 1));\n          colls.forEach(collection => {\n            if (!deleteColls.includes(collection.name)) {\n              return;\n            }\n            if (partial && keepPartial.includes(collection.name)) {\n              return;\n            }\n            const coll = driver.open(collection.name);\n            coll.rawCollection().drop();\n          });\n\n          db.listCollections().toArray(\n            Meteor.bindEnvironment((err, colls) => {\n              if (err) {\n                console.error(err);\n                return;\n              }\n\n              log.debug(\"Keeping:\");\n              colls.forEach(collection => {\n                let extra = \"\";\n                if (userColls.includes(collection.name)) {\n                  extra = \"(used by admin login system)\";\n                }\n                log.debug(\" - \" + collection.name, extra);\n              });\n\n              log.debug(\"Cleared DB\");\n\n              bootstrap();\n            })\n          );\n        })\n      );\n    }\n  });\n}\n\nMeteor.startup(() => {});\n"]},"sourceType":"module","hash":"4a318a72f956c2511c43a0ce54b967dd20300374"}
