{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/server/onchange.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/empirica:core/api/server/onchange.js","filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/server/onchange.js","passPerPreset":false,"envName":"production","cwd":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","root":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/server/onchange.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/server/onchange.js"}},"code":"module.export({\n  callOnChange: () => callOnChange\n});\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet Rounds;\nmodule.link(\"../rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 3);\nlet Stages;\nmodule.link(\"../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet augmentGameStageRound, augmentPlayerStageRound;\nmodule.link(\"../player-stages/augment.js\", {\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  },\n\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  }\n\n}, 6);\nlet augmentGameObject;\nmodule.link(\"../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 7);\nlet config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 8);\nconst targets = {\n  playerStageId: \"playerStage\",\n  playerRoundId: \"playerRound\",\n  stageId: \"stage\",\n  roundId: \"round\",\n  gameId: \"game\"\n}; // Central point for triggering the onSet, onAppend and onChange callbacks.\n// These callbacks are called when the experiment code calls custom data update\n// methods on games, rounds, stages, players, playerRounds or playerStages.\n// onSet is called when the .set() method is used.\n// onAppend is called when the .append() method is used.\n// onChange is called when the .set() or .append() method is used.\n\nconst callOnChange = params => {\n  const cbName = params.append ? \"onAppend\" : \"onSet\";\n  const {\n    onChange,\n    [cbName]: onSetAppend\n  } = config;\n  const callbacks = [];\n\n  if (onSetAppend) {\n    callbacks.push(onSetAppend);\n  }\n\n  if (onChange) {\n    callbacks.push(onChange);\n  }\n\n  if (callbacks.length === 0) {\n    return;\n  }\n\n  if (params.conn && !params.playerId) {\n    params.playerId = shared.playerIdForConn(params.conn);\n  }\n\n  let target = params.player,\n      targetType = \"player\";\n\n  for (const key in targets) {\n    if (params[key]) {\n      targetType = targets[key];\n      target = params[targets[key]]; // Update field to latest value\n\n      if (params.append) {\n        if (!target.data[params.key]) {\n          target.data[params.key] = [params.value];\n        } else {\n          target.data[params.key] = target.data[params.key].slice(0);\n          target.data[params.key].push(params.value);\n        }\n      } else {\n        target.data[params.key] = params.value;\n      }\n\n      break;\n    }\n  }\n\n  let {\n    player,\n    game,\n    round,\n    stage\n  } = params;\n  player = player || Players.findOne(params.playerId);\n  game = game || Games.findOne(player.gameId);\n\n  if (!game) {\n    console.error(\"\".concat(targetType, \" data updated without game\"));\n    return;\n  }\n\n  stage = stage || Stages.findOne(game.currentStageId);\n\n  if (!stage) {\n    console.error(\"\".concat(targetType, \" data updated without stage\"));\n    return;\n  }\n\n  const {\n    roundId\n  } = stage;\n  round = round || Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n  augmentGameObject({\n    game,\n    treatment,\n    round,\n    stage\n  });\n  augmentGameStageRound(game, stage, round);\n  callbacks.forEach(callback => {\n    callback(game, round, stage, player, target, targetType, params.key, params.value, params.prevValue, params.append // for onChange\n    );\n  });\n};","map":{"version":3,"sources":["packages/empirica:core/api/server/onchange.js"],"names":["module","export","callOnChange","shared","link","default","v","Games","Players","Rounds","Stages","Treatments","augmentGameStageRound","augmentPlayerStageRound","augmentGameObject","config","targets","playerStageId","playerRoundId","stageId","roundId","gameId","params","cbName","append","onChange","onSetAppend","callbacks","push","length","conn","playerId","playerIdForConn","target","player","targetType","key","data","value","slice","game","round","stage","findOne","console","error","currentStageId","treatment","treatmentId","forEach","callback","prevValue"],"mappings":"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","sourcesContent":["import shared from \"../../shared.js\";\nimport { Games } from \"../games/games.js\";\nimport { Players } from \"../players/players.js\";\nimport { Rounds } from \"../rounds/rounds.js\";\nimport { Stages } from \"../stages/stages.js\";\nimport { Treatments } from \"../treatments/treatments.js\";\nimport {\n  augmentGameStageRound,\n  augmentPlayerStageRound\n} from \"../player-stages/augment.js\";\nimport { augmentGameObject } from \"../games/augment.js\";\nimport { config } from \"../../server\";\n\nconst targets = {\n  playerStageId: \"playerStage\",\n  playerRoundId: \"playerRound\",\n  stageId: \"stage\",\n  roundId: \"round\",\n  gameId: \"game\"\n};\n\n// Central point for triggering the onSet, onAppend and onChange callbacks.\n// These callbacks are called when the experiment code calls custom data update\n// methods on games, rounds, stages, players, playerRounds or playerStages.\n// onSet is called when the .set() method is used.\n// onAppend is called when the .append() method is used.\n// onChange is called when the .set() or .append() method is used.\nexport const callOnChange = params => {\n  const cbName = params.append ? \"onAppend\" : \"onSet\";\n  const { onChange, [cbName]: onSetAppend } = config;\n  const callbacks = [];\n  if (onSetAppend) {\n    callbacks.push(onSetAppend);\n  }\n  if (onChange) {\n    callbacks.push(onChange);\n  }\n  if (callbacks.length === 0) {\n    return;\n  }\n\n  if (params.conn && !params.playerId) {\n    params.playerId = shared.playerIdForConn(params.conn);\n  }\n\n  let target = params.player,\n    targetType = \"player\";\n  for (const key in targets) {\n    if (params[key]) {\n      targetType = targets[key];\n      target = params[targets[key]];\n      // Update field to latest value\n      if (params.append) {\n        if (!target.data[params.key]) {\n          target.data[params.key] = [params.value];\n        } else {\n          target.data[params.key] = target.data[params.key].slice(0);\n          target.data[params.key].push(params.value);\n        }\n      } else {\n        target.data[params.key] = params.value;\n      }\n      break;\n    }\n  }\n\n  let { player, game, round, stage } = params;\n\n  player = player || Players.findOne(params.playerId);\n  game = game || Games.findOne(player.gameId);\n  if (!game) {\n    console.error(`${targetType} data updated without game`);\n    return;\n  }\n  stage = stage || Stages.findOne(game.currentStageId);\n  if (!stage) {\n    console.error(`${targetType} data updated without stage`);\n    return;\n  }\n\n  const { roundId } = stage;\n  round = round || Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n\n  augmentGameObject({ game, treatment, round, stage });\n\n  augmentGameStageRound(game, stage, round);\n\n  callbacks.forEach(callback => {\n    callback(\n      game,\n      round,\n      stage,\n      player,\n      target,\n      targetType,\n      params.key,\n      params.value,\n      params.prevValue,\n      params.append // for onChange\n    );\n  });\n};\n"]},"sourceType":"module","hash":"4f8b0af79706085490ded8bed480bf03ebf0d423"}
