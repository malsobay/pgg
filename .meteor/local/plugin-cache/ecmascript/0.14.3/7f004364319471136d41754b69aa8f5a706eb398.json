{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminFactors.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminFactors.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminFactors.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminFactors.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminFactors.jsx"}},"code":"module.export({\n  default: () => AdminFactors\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Link;\nmodule.link(\"react-router-dom\", {\n  Link(v) {\n    Link = v;\n  }\n\n}, 1);\nlet Button, ButtonGroup, Card, Classes, Elevation, HTMLTable, Icon, Position, Tooltip, Intent;\nmodule.link(\"@blueprintjs/core\", {\n  Button(v) {\n    Button = v;\n  },\n\n  ButtonGroup(v) {\n    ButtonGroup = v;\n  },\n\n  Card(v) {\n    Card = v;\n  },\n\n  Classes(v) {\n    Classes = v;\n  },\n\n  Elevation(v) {\n    Elevation = v;\n  },\n\n  HTMLTable(v) {\n    HTMLTable = v;\n  },\n\n  Icon(v) {\n    Icon = v;\n  },\n\n  Position(v) {\n    Position = v;\n  },\n\n  Tooltip(v) {\n    Tooltip = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  }\n\n}, 2);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 3);\nlet FactorTypes;\nmodule.link(\"../../../api/factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 4);\nlet updateFactorType;\nmodule.link(\"../../../api/factor-types/methods.js\", {\n  updateFactorType(v) {\n    updateFactorType = v;\n  }\n\n}, 5);\nlet AdminFactor;\nmodule.link(\"./AdminFactor.jsx\", {\n  default(v) {\n    AdminFactor = v;\n  }\n\n}, 6);\nlet AdminNewFactor;\nmodule.link(\"./AdminNewFactor.jsx\", {\n  default(v) {\n    AdminNewFactor = v;\n  }\n\n}, 7);\nlet AdminNewFactorType;\nmodule.link(\"./AdminNewFactorType.jsx\", {\n  default(v) {\n    AdminNewFactorType = v;\n  }\n\n}, 8);\nlet Loading;\nmodule.link(\"../Loading.jsx\", {\n  default(v) {\n    Loading = v;\n  }\n\n}, 9);\nlet AdminPageHeader;\nmodule.link(\"./AdminHeading.jsx\", {\n  AdminPageHeader(v) {\n    AdminPageHeader = v;\n  }\n\n}, 10);\n\nclass AdminFactors extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n\n    this.handleArchive = _id => {\n      const {\n        archived\n      } = this.props;\n      updateFactorType.call({\n        _id,\n        archived: !archived\n      });\n    };\n  }\n\n  render() {\n    const {\n      loading,\n      archived,\n      factors,\n      factorTypes\n    } = this.props;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(Loading, null);\n    }\n\n    factorTypes.map(t => {\n      t.factors = factors.filter(f => f.factorTypeId === t._id);\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"factors\"\n    }, /*#__PURE__*/React.createElement(AdminPageHeader, {\n      icon: IconNames.PROPERTY\n    }, archived ? \"Archived Factors\" : \"Factors\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"factors-list\"\n    }, archived && factorTypes.length === 0 ? /*#__PURE__*/React.createElement(\"p\", null, \"No archived Factors\") : null, factorTypes.map(t => {\n      const hasNewForm = t.type !== \"Boolean\";\n      const requiredType = FactorTypes.requiredTypes.includes(t.name);\n      return /*#__PURE__*/React.createElement(Card, {\n        className: \"factor\",\n        key: t._id,\n        elevation: Elevation.TWO\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"factor-actions\"\n      }, /*#__PURE__*/React.createElement(ButtonGroup, null, requiredType ? null : /*#__PURE__*/React.createElement(Tooltip, {\n        content: archived ? \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, \"Archive \", /*#__PURE__*/React.createElement(\"code\", null, t.name)),\n        position: Position.TOP\n      }, /*#__PURE__*/React.createElement(Button, {\n        text: archived ? \"Unarchive \".concat(t.name) : \"\",\n        intent: archived ? Intent.SUCCESS : null,\n        icon: IconNames.BOX,\n        onClick: this.handleArchive.bind(this, t._id)\n      })), archived || !hasNewForm ? \"\" : /*#__PURE__*/React.createElement(Tooltip, {\n        content: /*#__PURE__*/React.createElement(React.Fragment, null, \"New \", /*#__PURE__*/React.createElement(\"code\", null, t.name), \" Factor Value\"),\n        position: Position.TOP\n      }, /*#__PURE__*/React.createElement(Button, {\n        icon: IconNames.PLUS,\n        onClick: () => this.setState({\n          [\"newOpen\".concat(t._id)]: true\n        })\n      }))), archived || !hasNewForm ? \"\" : /*#__PURE__*/React.createElement(AdminNewFactor, {\n        type: t,\n        onClose: () => this.setState({\n          [\"newOpen\".concat(t._id)]: false\n        }),\n        isOpen: this.state[\"newOpen\".concat(t._id)]\n      })), /*#__PURE__*/React.createElement(\"h4\", {\n        className: Classes.MONOSPACE_TEXT\n      }, t.name), t.description ? /*#__PURE__*/React.createElement(\"p\", {\n        className: Classes.TEXT_DISABLED\n      }, t.description) : \"\", archived ? null : t.factors.length > 0 ? /*#__PURE__*/React.createElement(HTMLTable, {\n        striped: true,\n        condensed: true\n      }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"Name\"), /*#__PURE__*/React.createElement(\"th\", null, \"Value\"), /*#__PURE__*/React.createElement(\"th\", null))), /*#__PURE__*/React.createElement(\"tbody\", null, t.factors.map(factor => /*#__PURE__*/React.createElement(AdminFactor, {\n        key: factor._id,\n        factor: factor,\n        archived: archived\n      })))) : /*#__PURE__*/React.createElement(\"p\", {\n        className: Classes.TEXT_MUTED\n      }, \"No \", /*#__PURE__*/React.createElement(\"code\", null, t.name), \" factors yet.\"));\n    })), archived ? /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(Link, {\n      to: \"/admin/factors\"\n    }, \"Back to Active Factors\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(Button, {\n      text: \"New Factor\",\n      onClick: () => this.setState({\n        newFactorIsOpen: true\n      })\n    }), /*#__PURE__*/React.createElement(AdminNewFactorType, {\n      factors: factors,\n      factorTypes: factorTypes,\n      onClose: () => this.setState({\n        newFactorIsOpen: false\n      }),\n      isOpen: this.state.newFactorIsOpen\n    }), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(Link, {\n      to: \"/admin/factors/archived\"\n    }, \"View Archived Factors\"))));\n  }\n\n}","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminFactors.jsx"],"names":["module","export","default","AdminFactors","React","link","v","Link","Button","ButtonGroup","Card","Classes","Elevation","HTMLTable","Icon","Position","Tooltip","Intent","IconNames","FactorTypes","updateFactorType","AdminFactor","AdminNewFactor","AdminNewFactorType","Loading","AdminPageHeader","Component","state","handleArchive","_id","archived","props","call","render","loading","factors","factorTypes","map","t","filter","f","factorTypeId","PROPERTY","length","hasNewForm","type","requiredType","requiredTypes","includes","name","TWO","TOP","SUCCESS","BOX","bind","PLUS","setState","MONOSPACE_TEXT","description","TEXT_DISABLED","factor","TEXT_MUTED","newFactorIsOpen"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  Classes,\n  Elevation,\n  HTMLTable,\n  Icon,\n  Position,\n  Tooltip,\n  Intent\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport { FactorTypes } from \"../../../api/factor-types/factor-types.js\";\nimport { updateFactorType } from \"../../../api/factor-types/methods.js\";\n\nimport AdminFactor from \"./AdminFactor.jsx\";\nimport AdminNewFactor from \"./AdminNewFactor.jsx\";\nimport AdminNewFactorType from \"./AdminNewFactorType.jsx\";\nimport Loading from \"../Loading.jsx\";\nimport { AdminPageHeader } from \"./AdminHeading.jsx\";\n\nexport default class AdminFactors extends React.Component {\n  state = {};\n\n  handleArchive = _id => {\n    const { archived } = this.props;\n    updateFactorType.call({ _id, archived: !archived });\n  };\n\n  render() {\n    const { loading, archived, factors, factorTypes } = this.props;\n    if (loading) {\n      return <Loading />;\n    }\n\n    factorTypes.map(t => {\n      t.factors = factors.filter(f => f.factorTypeId === t._id);\n    });\n\n    return (\n      <div className=\"factors\">\n        <AdminPageHeader icon={IconNames.PROPERTY}>\n          {archived ? \"Archived Factors\" : \"Factors\"}\n        </AdminPageHeader>\n\n        <div className=\"factors-list\">\n          {archived && factorTypes.length === 0 ? (\n            <p>No archived Factors</p>\n          ) : null}\n          {factorTypes.map(t => {\n            const hasNewForm = t.type !== \"Boolean\";\n\n            const requiredType = FactorTypes.requiredTypes.includes(t.name);\n\n            return (\n              <Card className=\"factor\" key={t._id} elevation={Elevation.TWO}>\n                <div className=\"factor-actions\">\n                  <ButtonGroup>\n                    {requiredType ? null : (\n                      <Tooltip\n                        content={\n                          archived ? (\n                            \"\"\n                          ) : (\n                            <>\n                              Archive <code>{t.name}</code>\n                            </>\n                          )\n                        }\n                        position={Position.TOP}\n                      >\n                        <Button\n                          text={archived ? `Unarchive ${t.name}` : \"\"}\n                          intent={archived ? Intent.SUCCESS : null}\n                          icon={IconNames.BOX}\n                          onClick={this.handleArchive.bind(this, t._id)}\n                        />\n                      </Tooltip>\n                    )}\n\n                    {archived || !hasNewForm ? (\n                      \"\"\n                    ) : (\n                      <Tooltip\n                        content={\n                          <>\n                            New <code>{t.name}</code> Factor Value\n                          </>\n                        }\n                        position={Position.TOP}\n                      >\n                        <Button\n                          icon={IconNames.PLUS}\n                          onClick={() =>\n                            this.setState({ [`newOpen${t._id}`]: true })\n                          }\n                        />\n                      </Tooltip>\n                    )}\n                  </ButtonGroup>\n\n                  {archived || !hasNewForm ? (\n                    \"\"\n                  ) : (\n                    <AdminNewFactor\n                      type={t}\n                      onClose={() =>\n                        this.setState({ [`newOpen${t._id}`]: false })\n                      }\n                      isOpen={this.state[`newOpen${t._id}`]}\n                    />\n                  )}\n                </div>\n\n                <h4 className={Classes.MONOSPACE_TEXT}>{t.name}</h4>\n\n                {t.description ? (\n                  <p className={Classes.TEXT_DISABLED}>{t.description}</p>\n                ) : (\n                  \"\"\n                )}\n\n                {archived ? null : t.factors.length > 0 ? (\n                  <HTMLTable striped condensed>\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        <th>Value</th>\n                        <th />\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {t.factors.map(factor => (\n                        <AdminFactor\n                          key={factor._id}\n                          factor={factor}\n                          archived={archived}\n                        />\n                      ))}\n                    </tbody>\n                  </HTMLTable>\n                ) : (\n                  <p className={Classes.TEXT_MUTED}>\n                    No <code>{t.name}</code> factors yet.\n                  </p>\n                )}\n              </Card>\n            );\n          })}\n        </div>\n\n        {archived ? (\n          <p>\n            <br />\n            <Link to=\"/admin/factors\">Back to Active Factors</Link>\n          </p>\n        ) : (\n          <>\n            <br />\n\n            <Button\n              text=\"New Factor\"\n              onClick={() => this.setState({ newFactorIsOpen: true })}\n            />\n\n            <AdminNewFactorType\n              factors={factors}\n              factorTypes={factorTypes}\n              onClose={() => this.setState({ newFactorIsOpen: false })}\n              isOpen={this.state.newFactorIsOpen}\n            />\n\n            <p>\n              <br />\n              <Link to=\"/admin/factors/archived\">View Archived Factors</Link>\n            </p>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"7f004364319471136d41754b69aa8f5a706eb398"}
