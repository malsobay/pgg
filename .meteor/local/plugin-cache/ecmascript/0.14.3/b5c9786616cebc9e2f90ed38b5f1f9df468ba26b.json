{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/hooks.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/empirica:core/api/batches/hooks.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/hooks.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/batches/hooks.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/batches/hooks.js"}},"code":"let config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 0);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 1);\nlet sendPlayersToNextBatches;\nmodule.link(\"../games/create\", {\n  sendPlayersToNextBatches(v) {\n    sendPlayersToNextBatches = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet Batches;\nmodule.link(\"./batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 6);\n// Create GameLobbies\nBatches.after.insert(function (userId, batch) {\n  let gameLobbies = [];\n\n  switch (batch.assignment) {\n    case \"simple\":\n      _.times(batch.simpleConfig.count, index => {\n        const treatment = Random.choice(batch.simpleConfig.treatments);\n        const {\n          _id: treatmentId,\n          lobbyConfigId\n        } = treatment;\n        gameLobbies.push({\n          treatmentId,\n          lobbyConfigId,\n          index\n        });\n      });\n\n      break;\n\n    case \"complete\":\n      batch.completeConfig.treatments.forEach((_ref) => {\n        let {\n          count,\n          _id,\n          lobbyConfigId\n        } = _ref;\n\n        _.times(count, () => {\n          gameLobbies.push({\n            treatmentId: _id,\n            lobbyConfigId\n          });\n        });\n      });\n      gameLobbies = _.shuffle(gameLobbies);\n      gameLobbies.forEach((l, index) => {\n        l.index = index;\n      });\n      break;\n\n    default:\n      console.error(\"Batches.after: unknown assignment: \" + batch.assignment);\n      break;\n  }\n\n  const gameLobbyIds = gameLobbies.map(l => {\n    l._id = Random.id();\n    l.status = batch.status;\n    l.batchId = batch._id; // This is trully horrific. Sorry.\n    // The debug mode is assigned asynchronously onto the batch, which might happen\n    // just as this on insert hook is called. Sorry.\n\n    const batchUpdated = Batches.findOne(batch._id);\n    l.debugMode = batchUpdated.debugMode;\n    const treatment = Treatments.findOne(l.treatmentId);\n    l.availableCount = treatment.factor(\"playerCount\").value;\n    const botsCountCond = treatment.factor(\"botsCount\");\n\n    if (botsCountCond) {\n      const botsCount = botsCountCond.value;\n\n      if (botsCount > l.availableCount) {\n        throw \"Trying to create a game with more bots than players\";\n      }\n\n      if (botsCount === l.availableCount) {\n        //throw \"Creating a game with only bots...\";\n        //Would be good to display a message \"Are you sure you want to create a game with only bots?\"\n        console.log(\"Warning: Creating a game with only bots!\");\n      }\n\n      const botNames = config.bots && _.keys(config.bots);\n\n      if (!config.bots || botNames.length === 0) {\n        throw \"Trying to create a game with bots, but no bots defined\";\n      }\n\n      l.playerIds = [];\n\n      _.times(botsCount, () => {\n        const params = {\n          id: Random.id(),\n          gameLobbyId: l._id,\n          readyAt: new Date(),\n          bot: _.shuffle(botNames)[0]\n        };\n        console.info(\"Creating bot:\", params);\n        const playerId = Players.insert(params);\n        l.playerIds.push(playerId);\n      });\n\n      l.queuedPlayerIds = l.playerIds;\n    }\n\n    return GameLobbies.insert(l);\n  });\n  Batches.update(batch._id, {\n    $set: {\n      gameLobbyIds\n    }\n  });\n}); // Update status on Games and GameLobbies\n\nBatches.after.update(function (userId, _ref2, fieldNames, modifier, options) {\n  let {\n    _id: batchId,\n    status\n  } = _ref2;\n\n  if (!fieldNames.includes(\"status\")) {\n    return;\n  }\n\n  [Games, GameLobbies].forEach(coll => {\n    coll.update({\n      batchId,\n      status: {\n        $nin: [\"finished\", \"cancelled\", \"failed\", \"custom\"]\n      }\n    }, {\n      $set: {\n        status\n      }\n    }, {\n      multi: true\n    });\n  });\n\n  if (status !== \"cancelled\") {\n    return;\n  }\n\n  const games = Games.find({\n    batchId\n  }).fetch();\n\n  const gplayerIds = _.flatten(_.pluck(games, \"playerIds\"));\n\n  Players.update({\n    _id: {\n      $in: gplayerIds\n    },\n    exitAt: {\n      $exists: false\n    }\n  }, {\n    $set: {\n      exitStatus: \"gameCancelled\",\n      exitAt: new Date()\n    }\n  }, {\n    multi: true\n  });\n  const gameLobbies = GameLobbies.find({\n    batchId,\n    gameId: {\n      $exists: false\n    }\n  }).fetch();\n\n  if (gameLobbies.length === 0) {\n    return;\n  }\n\n  const glplayerIds = _.flatten(_.pluck(gameLobbies, \"queuedPlayerIds\"));\n\n  const players = Players.find({\n    _id: {\n      $in: glplayerIds\n    },\n    exitAt: {\n      $exists: false\n    }\n  }).fetch();\n\n  const playerIds = _.pluck(players, \"_id\");\n\n  sendPlayersToNextBatches(playerIds, batchId, gameLobbies[0]);\n}, {\n  fetchPrevious: false\n});","map":{"version":3,"sources":["packages/empirica:core/api/batches/hooks.js"],"names":["config","module","link","v","GameLobbies","sendPlayersToNextBatches","Games","Players","Treatments","Batches","after","insert","userId","batch","gameLobbies","assignment","_","times","simpleConfig","count","index","treatment","Random","choice","treatments","_id","treatmentId","lobbyConfigId","push","completeConfig","forEach","shuffle","l","console","error","gameLobbyIds","map","id","status","batchId","batchUpdated","findOne","debugMode","availableCount","factor","value","botsCountCond","botsCount","log","botNames","bots","keys","length","playerIds","params","gameLobbyId","readyAt","Date","bot","info","playerId","queuedPlayerIds","update","$set","fieldNames","modifier","options","includes","coll","$nin","multi","games","find","fetch","gplayerIds","flatten","pluck","$in","exitAt","$exists","exitStatus","gameId","glplayerIds","players","fetchPrevious"],"mappings":"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","sourcesContent":["import { config } from \"../../server\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { sendPlayersToNextBatches } from \"../games/create\";\nimport { Games } from \"../games/games\";\nimport { Players } from \"../players/players.js\";\nimport { Treatments } from \"../treatments/treatments\";\nimport { Batches } from \"./batches\";\n\n// Create GameLobbies\nBatches.after.insert(function(userId, batch) {\n  let gameLobbies = [];\n  switch (batch.assignment) {\n    case \"simple\":\n      _.times(batch.simpleConfig.count, index => {\n        const treatment = Random.choice(batch.simpleConfig.treatments);\n        const { _id: treatmentId, lobbyConfigId } = treatment;\n        gameLobbies.push({\n          treatmentId,\n          lobbyConfigId,\n          index\n        });\n      });\n      break;\n    case \"complete\":\n      batch.completeConfig.treatments.forEach(\n        ({ count, _id, lobbyConfigId }) => {\n          _.times(count, () => {\n            gameLobbies.push({ treatmentId: _id, lobbyConfigId });\n          });\n        }\n      );\n\n      gameLobbies = _.shuffle(gameLobbies);\n      gameLobbies.forEach((l, index) => {\n        l.index = index;\n      });\n      break;\n    default:\n      console.error(\"Batches.after: unknown assignment: \" + batch.assignment);\n      break;\n  }\n\n  const gameLobbyIds = gameLobbies.map(l => {\n    l._id = Random.id();\n    l.status = batch.status;\n    l.batchId = batch._id;\n\n    // This is trully horrific. Sorry.\n    // The debug mode is assigned asynchronously onto the batch, which might happen\n    // just as this on insert hook is called. Sorry.\n    const batchUpdated = Batches.findOne(batch._id);\n    l.debugMode = batchUpdated.debugMode;\n\n    const treatment = Treatments.findOne(l.treatmentId);\n    l.availableCount = treatment.factor(\"playerCount\").value;\n    const botsCountCond = treatment.factor(\"botsCount\");\n    if (botsCountCond) {\n      const botsCount = botsCountCond.value;\n      if (botsCount > l.availableCount) {\n        throw \"Trying to create a game with more bots than players\";\n      }\n      if (botsCount === l.availableCount) {\n        //throw \"Creating a game with only bots...\";\n        //Would be good to display a message \"Are you sure you want to create a game with only bots?\"\n        console.log(\"Warning: Creating a game with only bots!\");\n      }\n      const botNames = config.bots && _.keys(config.bots);\n      if (!config.bots || botNames.length === 0) {\n        throw \"Trying to create a game with bots, but no bots defined\";\n      }\n\n      l.playerIds = [];\n      _.times(botsCount, () => {\n        const params = {\n          id: Random.id(),\n          gameLobbyId: l._id,\n          readyAt: new Date(),\n          bot: _.shuffle(botNames)[0]\n        };\n        console.info(\"Creating bot:\", params);\n        const playerId = Players.insert(params);\n        l.playerIds.push(playerId);\n      });\n      l.queuedPlayerIds = l.playerIds;\n    }\n\n    return GameLobbies.insert(l);\n  });\n\n  Batches.update(batch._id, { $set: { gameLobbyIds } });\n});\n\n// Update status on Games and GameLobbies\nBatches.after.update(\n  function(userId, { _id: batchId, status }, fieldNames, modifier, options) {\n    if (!fieldNames.includes(\"status\")) {\n      return;\n    }\n\n    [Games, GameLobbies].forEach(coll => {\n      coll.update(\n        {\n          batchId,\n          status: { $nin: [\"finished\", \"cancelled\", \"failed\", \"custom\"] }\n        },\n        { $set: { status } },\n        { multi: true }\n      );\n    });\n\n    if (status !== \"cancelled\") {\n      return;\n    }\n\n    const games = Games.find({ batchId }).fetch();\n    const gplayerIds = _.flatten(_.pluck(games, \"playerIds\"));\n\n    Players.update(\n      { _id: { $in: gplayerIds }, exitAt: { $exists: false } },\n      { $set: { exitStatus: \"gameCancelled\", exitAt: new Date() } },\n      { multi: true }\n    );\n\n    const gameLobbies = GameLobbies.find({\n      batchId,\n      gameId: { $exists: false }\n    }).fetch();\n\n    if (gameLobbies.length === 0) {\n      return;\n    }\n\n    const glplayerIds = _.flatten(_.pluck(gameLobbies, \"queuedPlayerIds\"));\n    const players = Players.find({\n      _id: { $in: glplayerIds },\n      exitAt: { $exists: false }\n    }).fetch();\n\n    const playerIds = _.pluck(players, \"_id\");\n\n    sendPlayersToNextBatches(playerIds, batchId, gameLobbies[0]);\n  },\n  { fetchPrevious: false }\n);\n"]},"sourceType":"module","hash":"b5c9786616cebc9e2f90ed38b5f1f9df468ba26b"}
