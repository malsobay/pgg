{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/factors/factors.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/api/factors/factors.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/factors/factors.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/factors/factors.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/factors/factors.js"}},"code":"module.export({\n  Factors: () => Factors,\n  typeConversion: () => typeConversion\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ArchivedSchema, BelongsTo, TimestampSchema;\nmodule.link(\"../default-schemas.js\", {\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  },\n\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 1);\nlet FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 2);\nconst Factors = new Mongo.Collection(\"factors\");\nFactors.helpers({\n  label() {\n    let label = this.name;\n    const value = String(this.value);\n\n    if (label !== value) {\n      label += \" (\".concat(value, \")\");\n    }\n\n    return label;\n  },\n\n  factorType() {\n    return FactorTypes.findOne(this.factorTypeId);\n  },\n\n  factorTypeName() {\n    const t = this.factorType();\n    return t && t.name;\n  },\n\n  fullLabel() {\n    return \"\".concat(this.factorTypeName(), \": \").concat(this.label());\n  }\n\n});\nconst typeConversion = {\n  Integer: SimpleSchema.Integer,\n  String: String,\n  Number: Number,\n  Boolean: Boolean\n};\n\nFactors.valueValidation = function (factorType, value, simpleSchmemaType) {\n  const type = typeConversion[factorType.type];\n\n  if (simpleSchmemaType && simpleSchmemaType !== type) {\n    return;\n  }\n\n  const fieldSchema = {\n    type\n  };\n\n  if (factorType.min) {\n    fieldSchema.min = factorType.min;\n  }\n\n  if (factorType.max) {\n    fieldSchema.max = factorType.max;\n  }\n\n  const schema = {\n    value: fieldSchema\n  };\n  const val = new SimpleSchema(schema).newContext();\n  val.validate({\n    value\n  });\n\n  if (!val.isValid()) {\n    return val.validationErrors();\n  }\n\n  if (Factors.find({\n    factorTypeId: factorType._id,\n    value\n  }).count() > 0) {\n    return [{\n      name: \"value\",\n      type: \"scopedUnique\"\n    }];\n  }\n};\n\nconst valueValidation = function () {\n  if (this.key !== \"value\") {\n    return;\n  }\n\n  const factorTypeId = this.field(\"factorTypeId\").value;\n  const factorType = FactorTypes.findOne(factorTypeId);\n  const value = this.value;\n  const errors = Factors.valueValidation(factorType, value);\n\n  if (errors) {\n    this.addValidationErrors(errors);\n    return false;\n  }\n};\n\nFactors.schema = new SimpleSchema({\n  name: {\n    type: String,\n\n    autoValue() {\n      if (!this.isSet && (this.isInsert || Meteor.isClient)) {\n        return String(this.field(\"value\").value).slice(0, 32);\n      }\n    },\n\n    max: 256,\n    regEx: /^[a-zA-Z0-9_\\.]+$/\n  },\n  value: {\n    type: SimpleSchema.oneOf({\n      type: String\n    }, {\n      type: SimpleSchema.Integer\n    }, {\n      type: Number\n    }, {\n      type: Boolean\n    })\n  }\n});\nFactors.schema.addValidator(valueValidation);\nFactors.schema.extend(ArchivedSchema);\nFactors.schema.extend(BelongsTo(\"FactorTypes\"));\nFactors.schema.extend(TimestampSchema);\nFactors.attachSchema(Factors.schema);","map":{"version":3,"sources":["packages/empirica:core/api/factors/factors.js"],"names":["module","export","Factors","typeConversion","SimpleSchema","link","default","v","ArchivedSchema","BelongsTo","TimestampSchema","FactorTypes","Mongo","Collection","helpers","label","name","value","String","factorType","findOne","factorTypeId","factorTypeName","t","fullLabel","Integer","Number","Boolean","valueValidation","simpleSchmemaType","type","fieldSchema","min","max","schema","val","newContext","validate","isValid","validationErrors","find","_id","count","key","field","errors","addValidationErrors","autoValue","isSet","isInsert","Meteor","isClient","slice","regEx","oneOf","addValidator","extend","attachSchema"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport {\n  ArchivedSchema,\n  BelongsTo,\n  TimestampSchema\n} from \"../default-schemas.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\n\nexport const Factors = new Mongo.Collection(\"factors\");\n\nFactors.helpers({\n  label() {\n    let label = this.name;\n    const value = String(this.value);\n    if (label !== value) {\n      label += ` (${value})`;\n    }\n    return label;\n  },\n\n  factorType() {\n    return FactorTypes.findOne(this.factorTypeId);\n  },\n\n  factorTypeName() {\n    const t = this.factorType();\n    return t && t.name;\n  },\n\n  fullLabel() {\n    return `${this.factorTypeName()}: ${this.label()}`;\n  }\n});\n\nexport const typeConversion = {\n  Integer: SimpleSchema.Integer,\n  String: String,\n  Number: Number,\n  Boolean: Boolean\n};\n\nFactors.valueValidation = function(factorType, value, simpleSchmemaType) {\n  const type = typeConversion[factorType.type];\n\n  if (simpleSchmemaType && simpleSchmemaType !== type) {\n    return;\n  }\n\n  const fieldSchema = { type };\n  if (factorType.min) {\n    fieldSchema.min = factorType.min;\n  }\n  if (factorType.max) {\n    fieldSchema.max = factorType.max;\n  }\n  const schema = { value: fieldSchema };\n  const val = new SimpleSchema(schema).newContext();\n\n  val.validate({ value });\n\n  if (!val.isValid()) {\n    return val.validationErrors();\n  }\n\n  if (Factors.find({ factorTypeId: factorType._id, value }).count() > 0) {\n    return [{ name: \"value\", type: \"scopedUnique\" }];\n  }\n};\n\nconst valueValidation = function() {\n  if (this.key !== \"value\") {\n    return;\n  }\n  const factorTypeId = this.field(\"factorTypeId\").value;\n  const factorType = FactorTypes.findOne(factorTypeId);\n  const value = this.value;\n  const errors = Factors.valueValidation(factorType, value);\n\n  if (errors) {\n    this.addValidationErrors(errors);\n    return false;\n  }\n};\n\nFactors.schema = new SimpleSchema({\n  name: {\n    type: String,\n    autoValue() {\n      if (!this.isSet && (this.isInsert || Meteor.isClient)) {\n        return String(this.field(\"value\").value).slice(0, 32);\n      }\n    },\n    max: 256,\n    regEx: /^[a-zA-Z0-9_\\.]+$/\n  },\n\n  value: {\n    type: SimpleSchema.oneOf(\n      {\n        type: String\n      },\n      {\n        type: SimpleSchema.Integer\n      },\n      {\n        type: Number\n      },\n      {\n        type: Boolean\n      }\n    )\n  }\n});\n\nFactors.schema.addValidator(valueValidation);\nFactors.schema.extend(ArchivedSchema);\nFactors.schema.extend(BelongsTo(\"FactorTypes\"));\nFactors.schema.extend(TimestampSchema);\nFactors.attachSchema(Factors.schema);\n"]},"sourceType":"module","hash":"a6d4ec697a62f185a735437b61d99242c0a9852d"}
