{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/default-schemas.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/empirica:core/api/default-schemas.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/default-schemas.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/default-schemas.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/default-schemas.js"}},"code":"module.export({\n  IdSchema: function () {\n    return IdSchema;\n  },\n  ArchivedSchema: function () {\n    return ArchivedSchema;\n  },\n  DebugModeSchema: function () {\n    return DebugModeSchema;\n  },\n  TimestampSchema: function () {\n    return TimestampSchema;\n  },\n  CreatorSchema: function () {\n    return CreatorSchema;\n  },\n  UserDataSchema: function () {\n    return UserDataSchema;\n  },\n  PolymorphicSchema: function () {\n    return PolymorphicSchema;\n  },\n  HasManyByRef: function () {\n    return HasManyByRef;\n  },\n  BelongsTo: function () {\n    return BelongsTo;\n  }\n});\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 0);\nvar inflection;\nmodule.link(\"inflection\", {\n  \"default\": function (v) {\n    inflection = v;\n  }\n}, 1);\nvar IdSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\nvar ArchivedSchema = new SimpleSchema({\n  archivedById: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue: function () {\n      if (this.field(\"archivedAt\").isSet) {\n        return this.userId;\n      }\n\n      return undefined;\n    }\n  },\n  archivedAt: {\n    type: Date,\n    label: \"Archived at\",\n    optional: true\n  }\n});\nvar DebugModeSchema = new SimpleSchema({\n  debugMode: {\n    type: Boolean,\n    defaultValue: false\n  }\n});\nvar TimestampSchema = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    // denyUpdate: true,\n    index: true,\n    autoValue: function () {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      } else {\n        this.unset(); // Prevent user from supplying their own value\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    label: \"Last updated at\",\n    optional: true,\n    // denyInsert: true,\n    index: true,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    }\n  }\n});\nvar CreatorSchema = new SimpleSchema({\n  createdById: {\n    type: String,\n    label: \"Created by\",\n    // denyUpdate: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue: function () {\n      if (this.isInsert) {\n        return this.isSet && this.isFromTrustedCode ? undefined : this.userId;\n      }\n\n      return undefined;\n    },\n    index: true\n  },\n  updatedById: {\n    type: String,\n    label: \"Last updated by\",\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue: function () {\n      if (this.isUpdate) {\n        return this.userId;\n      }\n    },\n    index: true\n  }\n});\nvar UserDataSchema = new SimpleSchema({\n  data: {\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  }\n});\n\nvar PolymorphicSchema = function (collTypes) {\n  return new SimpleSchema({\n    objectType: {\n      type: String,\n      allowedValues: collTypes,\n      // denyUpdate: true,\n      index: true\n    },\n    objectId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      // denyUpdate: true,\n      index: true\n    }\n  });\n};\n\nvar HasManyByRef = function (coll) {\n  var _SimpleSchema;\n\n  var camel = inflection.camelize(inflection.singularize(coll), true);\n  var label = inflection.titleize(coll);\n  var fieldName = camel + \"Ids\";\n  return new SimpleSchema((_SimpleSchema = {}, _SimpleSchema[fieldName] = {\n    type: Array,\n    defaultValue: [],\n    label: label,\n    index: true\n  }, _SimpleSchema[fieldName + \".$\"] = {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    label: label + \" Item\"\n  }, _SimpleSchema));\n};\n\nvar BelongsTo = function (coll) {\n  var _SimpleSchema2;\n\n  var required = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var singular = inflection.singularize(coll);\n  var camel = inflection.camelize(singular, true);\n  var label = inflection.titleize(singular);\n  var fieldName = camel + \"Id\";\n  return new SimpleSchema((_SimpleSchema2 = {}, _SimpleSchema2[fieldName] = {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    label: label,\n    // denyUpdate,\n    index: true,\n    optional: !required\n  }, _SimpleSchema2));\n};","map":{"version":3,"sources":["packages/empirica:core/api/default-schemas.js"],"names":["module","export","IdSchema","ArchivedSchema","DebugModeSchema","TimestampSchema","CreatorSchema","UserDataSchema","PolymorphicSchema","HasManyByRef","BelongsTo","SimpleSchema","link","v","inflection","_id","type","String","optional","regEx","RegEx","Id","archivedById","autoValue","field","isSet","userId","undefined","archivedAt","Date","label","debugMode","Boolean","defaultValue","createdAt","index","isInsert","isUpsert","$setOnInsert","unset","updatedAt","isUpdate","createdById","isFromTrustedCode","updatedById","data","Object","blackbox","collTypes","objectType","allowedValues","objectId","coll","camel","camelize","singularize","titleize","fieldName","Array","required","singular"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport inflection from \"inflection\";\n\nexport const IdSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nexport const ArchivedSchema = new SimpleSchema({\n  archivedById: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue() {\n      if (this.field(\"archivedAt\").isSet) {\n        return this.userId;\n      }\n      return undefined;\n    }\n  },\n  archivedAt: {\n    type: Date,\n    label: \"Archived at\",\n    optional: true\n  }\n});\n\nexport const DebugModeSchema = new SimpleSchema({\n  debugMode: {\n    type: Boolean,\n    defaultValue: false\n  }\n});\n\nexport const TimestampSchema = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    // denyUpdate: true,\n    index: true,\n    autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return { $setOnInsert: new Date() };\n      } else {\n        this.unset(); // Prevent user from supplying their own value\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    label: \"Last updated at\",\n    optional: true,\n    // denyInsert: true,\n    index: true,\n    autoValue() {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    }\n  }\n});\n\n// Userful for admin operations, tracking who created what.\nexport const CreatorSchema = new SimpleSchema({\n  createdById: {\n    type: String,\n    label: \"Created by\",\n    // denyUpdate: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue() {\n      if (this.isInsert) {\n        return this.isSet && this.isFromTrustedCode ? undefined : this.userId;\n      }\n      return undefined;\n    },\n    index: true\n  },\n  updatedById: {\n    type: String,\n    label: \"Last updated by\",\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue() {\n      if (this.isUpdate) {\n        return this.userId;\n      }\n    },\n    index: true\n  }\n});\n\nexport const UserDataSchema = new SimpleSchema({\n  data: {\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  }\n});\n\n// The PolymorphicSchema allows to have records be attached to different\n// types of collection. (belongs_to :coll, polymorphic: true)\n// objectType and objectId point to the owning object of the record\n// objectTypes are the names of the collection that the record can be\n// associated with. ex. [\"BriefSection\", \"Brief\", \"Board\"]\nexport const PolymorphicSchema = function(collTypes) {\n  return new SimpleSchema({\n    objectType: {\n      type: String,\n      allowedValues: collTypes,\n      // denyUpdate: true,\n      index: true\n    },\n    objectId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      // denyUpdate: true,\n      index: true\n    }\n  });\n};\n\nexport const HasManyByRef = function(coll) {\n  const camel = inflection.camelize(inflection.singularize(coll), true);\n  const label = inflection.titleize(coll);\n  const fieldName = `${camel}Ids`;\n  return new SimpleSchema({\n    [fieldName]: {\n      type: Array,\n      defaultValue: [],\n      label,\n      index: true\n    },\n    [`${fieldName}.$`]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      label: `${label} Item`\n    }\n  });\n};\n\nexport const BelongsTo = function(coll, required = true) {\n  const singular = inflection.singularize(coll);\n  const camel = inflection.camelize(singular, true);\n  const label = inflection.titleize(singular);\n  const fieldName = `${camel}Id`;\n  return new SimpleSchema({\n    [fieldName]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      label,\n      // denyUpdate,\n      index: true,\n      optional: !required\n    }\n  });\n};\n"]},"sourceType":"module","hash":"8d9aff3c64a9a021a39ed2f7bce50476ce5f4670"}
