{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminTreatment.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminTreatment.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminTreatment.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminTreatment.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminTreatment.jsx"}},"code":"module.export({\n  default: () => AdminTreatment\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Button, Classes, EditableText, Intent;\nmodule.link(\"@blueprintjs/core\", {\n  Button(v) {\n    Button = v;\n  },\n\n  Classes(v) {\n    Classes = v;\n  },\n\n  EditableText(v) {\n    EditableText = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  }\n\n}, 1);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 2);\nlet AlertToaster;\nmodule.link(\"../Toasters.jsx\", {\n  AlertToaster(v) {\n    AlertToaster = v;\n  }\n\n}, 3);\nlet updateTreatment;\nmodule.link(\"../../../api/treatments/methods.js\", {\n  updateTreatment(v) {\n    updateTreatment = v;\n  }\n\n}, 4);\n\nclass AdminTreatment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = name => {\n      this.setState({\n        name: name || \"\"\n      });\n    };\n\n    this.handleNameConfirm = () => {\n      const {\n        _id,\n        name: prevName\n      } = this.props.treatment;\n      const {\n        name: nameRaw\n      } = this.state;\n      const name = nameRaw.trim();\n\n      if (name === prevName) {\n        this.handleNameChange(prevName);\n        return;\n      }\n\n      updateTreatment.call({\n        _id,\n        name\n      }, err => {\n        if (err) {\n          AlertToaster.show({\n            message: String(err)\n          });\n          this.handleNameChange(prevName);\n          return;\n        }\n      });\n    };\n\n    this.handleArchive = () => {\n      const {\n        archived,\n        treatment: {\n          _id\n        }\n      } = this.props;\n      updateTreatment.call({\n        _id,\n        archived: !archived\n      });\n    };\n\n    this.state = {\n      name: props.treatment.name || \"\"\n    };\n  }\n\n  componentWillUpdate(props) {\n    if (props.treatment.name !== this.props.treatment.name) {\n      this.setState({\n        name: props.treatment.name\n      });\n    }\n  }\n\n  render() {\n    const {\n      treatment,\n      factorTypes,\n      archived\n    } = this.props;\n    const {\n      name\n    } = this.state;\n    const conds = treatment.factors();\n    const archiveIntent = archived ? Intent.SUCCESS : Intent.DANGER;\n    return /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(EditableText, {\n      onChange: this.handleNameChange,\n      onConfirm: this.handleNameConfirm,\n      value: name\n    })), factorTypes.map(type => {\n      const cond = conds.find(c => c.factorTypeId === type._id);\n      return /*#__PURE__*/React.createElement(\"td\", {\n        key: type._id\n      }, cond ? cond.label() : \"-\");\n    }), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(Button, {\n      text: archived ? \"Unarchive\" : \"Archive\",\n      intent: archiveIntent,\n      minimal: true,\n      icon: IconNames.BOX,\n      className: Classes.SMALL,\n      onClick: this.handleArchive\n    })));\n  }\n\n}","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminTreatment.jsx"],"names":["module","export","default","AdminTreatment","React","link","v","Button","Classes","EditableText","Intent","IconNames","AlertToaster","updateTreatment","Component","constructor","props","handleNameChange","name","setState","handleNameConfirm","_id","prevName","treatment","nameRaw","state","trim","call","err","show","message","String","handleArchive","archived","componentWillUpdate","render","factorTypes","conds","factors","archiveIntent","SUCCESS","DANGER","map","type","cond","find","c","factorTypeId","label","BOX","SMALL"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { Button, Classes, EditableText, Intent } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport { AlertToaster } from \"../Toasters.jsx\";\nimport { updateTreatment } from \"../../../api/treatments/methods.js\";\n\nexport default class AdminTreatment extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: props.treatment.name || \"\"\n    };\n  }\n\n  componentWillUpdate(props) {\n    if (props.treatment.name !== this.props.treatment.name) {\n      this.setState({ name: props.treatment.name });\n    }\n  }\n\n  handleNameChange = name => {\n    this.setState({ name: name || \"\" });\n  };\n\n  handleNameConfirm = () => {\n    const { _id, name: prevName } = this.props.treatment;\n    const { name: nameRaw } = this.state;\n    const name = nameRaw.trim();\n    if (name === prevName) {\n      this.handleNameChange(prevName);\n      return;\n    }\n\n    updateTreatment.call({ _id, name }, err => {\n      if (err) {\n        AlertToaster.show({ message: String(err) });\n        this.handleNameChange(prevName);\n        return;\n      }\n    });\n  };\n\n  handleArchive = () => {\n    const {\n      archived,\n      treatment: { _id }\n    } = this.props;\n    updateTreatment.call({ _id, archived: !archived });\n  };\n\n  render() {\n    const { treatment, factorTypes, archived } = this.props;\n    const { name } = this.state;\n    const conds = treatment.factors();\n\n    const archiveIntent = archived ? Intent.SUCCESS : Intent.DANGER;\n    return (\n      <tr>\n        <td>\n          <EditableText\n            onChange={this.handleNameChange}\n            onConfirm={this.handleNameConfirm}\n            value={name}\n          />\n        </td>\n\n        {factorTypes.map(type => {\n          const cond = conds.find(c => c.factorTypeId === type._id);\n          return <td key={type._id}>{cond ? cond.label() : \"-\"}</td>;\n        })}\n\n        <td>\n          <Button\n            text={archived ? \"Unarchive\" : \"Archive\"}\n            intent={archiveIntent}\n            minimal\n            icon={IconNames.BOX}\n            className={Classes.SMALL}\n            onClick={this.handleArchive}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"3d3d89bfbdd08556fdd2689d0198348d4bd257e3"}
