{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/indexes.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/empirica:core/api/indexes.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/indexes.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/indexes.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/indexes.js"}},"code":"let inflection;\nmodule.link(\"inflection\", {\n  default(v) {\n    inflection = v;\n  }\n\n}, 0);\nlet log;\nmodule.link(\"../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 1);\nlet collections;\nmodule.link(\"./collections.js\", {\n  collections(v) {\n    collections = v;\n  }\n\n}, 2);\nMeteor.startup(() => {\n  // Add manual indexes here. Example:\n  //\n  // Batches.rawCollection().createIndex({\n  //   \"fieldname\": 1\n  // }, { unique: true })\n  //\n  // The following loop will try to add indexes marked in the Schemas\n  //\n  Meteor.setTimeout(() => {\n    collections.forEach(coll => {\n      if (!coll.schema) {\n        return;\n      }\n\n      try {\n        const name = inflection.titleize(coll._name);\n        log.debug(\"Adding indexes to\", name);\n\n        for (const key in coll.schema._schema) {\n          if (coll.schema._schema.hasOwnProperty(key)) {\n            const def = coll.schema._schema[key];\n            const desc = \"\\\"\".concat(name, \"\\\" \\u2013 { \").concat(key, \": { index: \").concat(def.index, \" } }\"); // No index wanted\n\n            if (def.index === undefined) {\n              continue;\n            } // Wanting index to be removed, not supported\n\n\n            if (def.index === false) {\n              log.warn(\"{ index: false } not supported on \".concat(desc));\n              continue;\n            } // Only 1, -1 and true values supported\n\n\n            if (!(def.index === true || def.index === 1 || def.index === -1)) {\n              log.warn(\"unknown index value on \".concat(desc));\n              continue;\n            } // Add opts supported by SimpleSchema:index\n\n\n            const opts = {};\n\n            if (def.sparse === true) {\n              options.sparse = true;\n            }\n\n            if (def.unique === true) {\n              opts.unique = true;\n            }\n\n            let index = {};\n\n            switch (def.index) {\n              case 1:\n              case true:\n                index = {\n                  [key]: 1\n                };\n                break;\n\n              case -1:\n                index = {\n                  [key]: -1\n                };\n                break;\n            }\n\n            log.debug(\"  - createIndex(\".concat(JSON.stringify(index), \", \").concat(JSON.stringify(opts), \")\"));\n            coll.rawCollection().createIndex(index, opts, (err, res) => {\n              if (err && err.codeName !== \"IndexOptionsConflict\") {\n                log.error(\"can't create index: \".concat(name, \"/\").concat(JSON.stringify(index), \". \").concat(err));\n              }\n            });\n          }\n        }\n      } catch (error) {}\n    });\n  }, 1000);\n});","map":{"version":3,"sources":["packages/empirica:core/api/indexes.js"],"names":["inflection","module","link","default","v","log","collections","Meteor","startup","setTimeout","forEach","coll","schema","name","titleize","_name","debug","key","_schema","hasOwnProperty","def","desc","index","undefined","warn","opts","sparse","options","unique","JSON","stringify","rawCollection","createIndex","err","res","codeName","error"],"mappings":"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","sourcesContent":["// This file handles index creation.\n//\n// You can add manual indexes below in the Meteor.startup callback. But it is\n// first recommended to try and add the indexes directly to the schemas.\n//\n// Due to circular references in the schemas, the schemas are not always all\n// composed before SimpleSchema's attempt to create indexes. Therefor we\n// sometimes end up missing some indexes. The loop over all collecitons below\n// is trying to remedy this problem by running index creation after a delay.\n//\n\nimport inflection from \"inflection\";\nimport log from \"../lib/log.js\";\nimport { collections } from \"./collections.js\";\n\nMeteor.startup(() => {\n  // Add manual indexes here. Example:\n  //\n  // Batches.rawCollection().createIndex({\n  //   \"fieldname\": 1\n  // }, { unique: true })\n\n  //\n  // The following loop will try to add indexes marked in the Schemas\n  //\n\n  Meteor.setTimeout(() => {\n    collections.forEach(coll => {\n      if (!coll.schema) {\n        return;\n      }\n\n      try {\n        const name = inflection.titleize(coll._name);\n        log.debug(\"Adding indexes to\", name);\n\n        for (const key in coll.schema._schema) {\n          if (coll.schema._schema.hasOwnProperty(key)) {\n            const def = coll.schema._schema[key];\n\n            const desc = `\"${name}\" – { ${key}: { index: ${def.index} } }`;\n\n            // No index wanted\n            if (def.index === undefined) {\n              continue;\n            }\n\n            // Wanting index to be removed, not supported\n            if (def.index === false) {\n              log.warn(`{ index: false } not supported on ${desc}`);\n              continue;\n            }\n\n            // Only 1, -1 and true values supported\n            if (!(def.index === true || def.index === 1 || def.index === -1)) {\n              log.warn(`unknown index value on ${desc}`);\n              continue;\n            }\n\n            // Add opts supported by SimpleSchema:index\n            const opts = {};\n            if (def.sparse === true) {\n              options.sparse = true;\n            }\n            if (def.unique === true) {\n              opts.unique = true;\n            }\n\n            let index = {};\n            switch (def.index) {\n              case 1:\n              case true:\n                index = { [key]: 1 };\n                break;\n              case -1:\n                index = { [key]: -1 };\n                break;\n            }\n\n            log.debug(\n              `  - createIndex(${JSON.stringify(index)}, ${JSON.stringify(\n                opts\n              )})`\n            );\n\n            coll.rawCollection().createIndex(index, opts, (err, res) => {\n              if (err && err.codeName !== \"IndexOptionsConflict\") {\n                log.error(\n                  `can't create index: ${name}/${JSON.stringify(index)}. ${err}`\n                );\n              }\n            });\n          }\n        }\n      } catch (error) {}\n    });\n  }, 1000);\n});\n"]},"sourceType":"module","hash":"39bbaa4f9b2f1ee44426b5701cdcb3de66cf007f"}
