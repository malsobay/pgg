{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewBatch.jsx"}},"code":"var _createSuper;\n\nmodule.link(\"@babel/runtime/helpers/createSuper\", {\n  default: function (v) {\n    _createSuper = v;\n  }\n}, 0);\n\nvar _inheritsLoose;\n\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 1);\nmodule.export({\n  \"default\": function () {\n    return AdminNewBatch;\n  }\n});\nvar React;\nmodule.link(\"react\", {\n  \"default\": function (v) {\n    React = v;\n  }\n}, 0);\nvar Link;\nmodule.link(\"react-router-dom\", {\n  Link: function (v) {\n    Link = v;\n  }\n}, 1);\nvar Button, Classes, Dialog, FormGroup, HTMLSelect, HTMLTable, Intent, NumericInput;\nmodule.link(\"@blueprintjs/core\", {\n  Button: function (v) {\n    Button = v;\n  },\n  Classes: function (v) {\n    Classes = v;\n  },\n  Dialog: function (v) {\n    Dialog = v;\n  },\n  FormGroup: function (v) {\n    FormGroup = v;\n  },\n  HTMLSelect: function (v) {\n    HTMLSelect = v;\n  },\n  HTMLTable: function (v) {\n    HTMLTable = v;\n  },\n  Intent: function (v) {\n    Intent = v;\n  },\n  NumericInput: function (v) {\n    NumericInput = v;\n  }\n}, 2);\nvar IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames: function (v) {\n    IconNames = v;\n  }\n}, 3);\nvar assignmentTypes, maxGamesCount;\nmodule.link(\"../../../api/batches/batches.js\", {\n  assignmentTypes: function (v) {\n    assignmentTypes = v;\n  },\n  maxGamesCount: function (v) {\n    maxGamesCount = v;\n  }\n}, 4);\nvar createBatch;\nmodule.link(\"../../../api/batches/methods.js\", {\n  createBatch: function (v) {\n    createBatch = v;\n  }\n}, 5);\nvar AlertToaster;\nmodule.link(\"../Toasters.jsx\", {\n  AlertToaster: function (v) {\n    AlertToaster = v;\n  }\n}, 6);\n\nvar AdminNewBatch = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(AdminNewBatch, _React$Component);\n\n  var _super = _createSuper(AdminNewBatch);\n\n  function AdminNewBatch() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      assignment: \"simple\",\n      simpleTreatments: [],\n      completeTreatments: [],\n      simpleGamesCount: 1,\n      gamesCount: 1\n    };\n\n    _this.handleAssignmentChange = function (event) {\n      var _this$state = _this.state,\n          completeTreatments = _this$state.completeTreatments,\n          simpleGamesCount = _this$state.simpleGamesCount;\n      var assignment = event.currentTarget.value;\n\n      _this.setState({\n        assignment: assignment,\n        gamesCount: _this.gamesCountCalc(assignment, completeTreatments, simpleGamesCount)\n      });\n    };\n\n    _this.handleGamesCountChange = function (simpleGamesCount) {\n      _this.setState({\n        simpleGamesCount: simpleGamesCount,\n        gamesCount: simpleGamesCount\n      });\n    };\n\n    _this.handleAddTreatment = function (event) {\n      event.preventDefault();\n\n      var lobbyConfigs = _this.validLobbyConfigs();\n\n      var _this$state2 = _this.state,\n          assignment = _this$state2.assignment,\n          simpleGamesCount = _this$state2.simpleGamesCount;\n      var key = assignment + \"Treatments\";\n      var _id = event.currentTarget.value;\n\n      if (!_id) {\n        return;\n      }\n\n      var params = {};\n\n      var existing = _this.state[key].find(function (tt) {\n        return tt._id === _id;\n      });\n\n      var treatment = existing || {\n        _id: _id,\n        count: 1,\n        lobbyConfigId: !_.isEmpty(lobbyConfigs) && lobbyConfigs[0]._id\n      };\n\n      if (!existing) {\n        _this.state[key].push(treatment);\n      } else {\n        existing.count++;\n      }\n\n      params[key] = _this.state[key];\n\n      if (assignment === \"complete\") {\n        params.gamesCount = _this.state.gamesCount + 1;\n      }\n\n      _this.setState(params);\n    };\n\n    _this.handleTreatmentCountChange = function (id, count) {\n      var _params;\n\n      var _this$state3 = _this.state,\n          assignment = _this$state3.assignment,\n          completeTreatments = _this$state3.completeTreatments,\n          simpleGamesCount = _this$state3.simpleGamesCount;\n      var key = assignment + \"Treatments\";\n\n      var t = _this.state[key].find(function (tt) {\n        return tt._id === id;\n      });\n\n      t.count = count;\n      var params = (_params = {}, _params[key] = _this.state[key], _params);\n\n      if (assignment === \"complete\") {\n        params.gamesCount = _this.gamesCountCalc(assignment, _this.state[key], simpleGamesCount);\n      }\n\n      _this.setState(params);\n    };\n\n    _this.handleLobbyConfigChange = function (id, event) {\n      var _this$setState;\n\n      var lobbyConfigId = event.currentTarget.value;\n      var _this$state4 = _this.state,\n          assignment = _this$state4.assignment,\n          completeTreatments = _this$state4.completeTreatments;\n      var key = assignment + \"Treatments\";\n\n      var t = _this.state[key].find(function (tt) {\n        return tt._id === id;\n      });\n\n      t.lobbyConfigId = lobbyConfigId;\n\n      _this.setState((_this$setState = {}, _this$setState[key] = _this.state[key], _this$setState));\n    };\n\n    _this.handleRemoveTreatment = function (event) {\n      var _params2;\n\n      event.preventDefault();\n      var _this$state5 = _this.state,\n          assignment = _this$state5.assignment,\n          simpleGamesCount = _this$state5.simpleGamesCount,\n          gamesCount = _this$state5.gamesCount;\n      var key = assignment + \"Treatments\";\n      var id = event.currentTarget.dataset.id;\n\n      var treatment = _this.state[key].find(function (t) {\n        return t._id === id;\n      });\n\n      var val = _.reject(_this.state[key], function (t) {\n        return t._id === id;\n      });\n\n      var params = (_params2 = {}, _params2[key] = val, _params2);\n\n      if (assignment === \"complete\") {\n        params.gamesCount = gamesCount - treatment.count;\n      }\n\n      _this.setState(params);\n    };\n\n    _this.handleNewBatch = function (event) {\n      event.preventDefault();\n      var _this$state6 = _this.state,\n          assignment = _this$state6.assignment,\n          simpleGamesCount = _this$state6.simpleGamesCount,\n          simpleTreatments = _this$state6.simpleTreatments,\n          completeTreatments = _this$state6.completeTreatments;\n      var params = {\n        assignment: assignment\n      };\n\n      switch (assignment) {\n        case \"simple\":\n          var treatments = simpleTreatments.map(function (t) {\n            return _.pick(t, \"_id\", \"lobbyConfigId\");\n          });\n          params.simpleConfig = {\n            treatments: treatments,\n            count: simpleGamesCount\n          };\n          break;\n\n        case \"complete\":\n          params.completeConfig = {\n            treatments: completeTreatments\n          };\n          break;\n\n        default:\n          AlertToaster.show({\n            message: \"unknown assignement type?!\"\n          });\n          return;\n      }\n\n      createBatch.call(params, function (err) {\n        if (err) {\n          console.error(JSON.stringify(err));\n          AlertToaster.show({\n            message: String(err)\n          });\n          return;\n        }\n\n        _this.setState({\n          assignment: \"simple\",\n          simpleTreatments: [],\n          completeTreatments: [],\n          simpleGamesCount: 1,\n          gamesCount: 1\n        });\n\n        _this.props.onClose();\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = AdminNewBatch.prototype;\n\n  _proto.gamesCountCalc = function () {\n    function gamesCountCalc(assignment, completeTreatments, simpleGamesCount) {\n      return assignment === \"complete\" ? _.inject(completeTreatments, function (sum, t) {\n        return (t.count || 0) + sum;\n      }, 0) : simpleGamesCount;\n    }\n\n    return gamesCountCalc;\n  }();\n\n  _proto.validTreatments = function () {\n    function validTreatments() {\n      var treatments = this.props.treatments;\n      return treatments.filter(function (t) {\n        return !t.archivedAt;\n      });\n    }\n\n    return validTreatments;\n  }();\n\n  _proto.validLobbyConfigs = function () {\n    function validLobbyConfigs() {\n      var lobbyConfigs = this.props.lobbyConfigs;\n      return lobbyConfigs.filter(function (l) {\n        return !l.archivedAt;\n      });\n    }\n\n    return validLobbyConfigs;\n  }();\n\n  _proto.renderRequired = function () {\n    function renderRequired() {\n      var issues = [];\n      var treatments = this.validTreatments();\n      var lobbyConfigs = this.validLobbyConfigs();\n\n      if (_.isEmpty(treatments)) {\n        issues.push( /*#__PURE__*/React.createElement(Link, {\n          to: \"/admin/treatments\"\n        }, \"Create a Treatment\"));\n      }\n\n      if (_.isEmpty(lobbyConfigs)) {\n        issues.push( /*#__PURE__*/React.createElement(Link, {\n          to: \"/admin/lobby-configurations\"\n        }, \"Create a Lobby Configuration\"));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: Classes.DIALOG_BODY\n      }, \"You must first:\", /*#__PURE__*/React.createElement(\"ul\", null, issues.map(function (issue, i) {\n        return /*#__PURE__*/React.createElement(\"li\", {\n          key: i\n        }, issue);\n      })));\n    }\n\n    return renderRequired;\n  }();\n\n  _proto.renderContent = function () {\n    function renderContent() {\n      var _this2 = this;\n\n      var treatments = this.validTreatments();\n      var lobbyConfigs = this.validLobbyConfigs();\n      var _this$state7 = this.state,\n          gamesCount = _this$state7.gamesCount,\n          assignment = _this$state7.assignment,\n          simpleTreatments = _this$state7.simpleTreatments,\n          completeTreatments = _this$state7.completeTreatments;\n      var isComplete = assignment === \"complete\";\n      var currentTreatments = isComplete ? completeTreatments : simpleTreatments;\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"new-batch\",\n        onSubmit: this.handleNewBatch\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: Classes.DIALOG_BODY\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Assignment Method\",\n        labelFor: \"assignment\"\n      }, /*#__PURE__*/React.createElement(HTMLSelect, {\n        name: \"assignment\",\n        id: \"assignment\",\n        onChange: this.handleAssignmentChange,\n        value: assignment\n      }, _.map(assignmentTypes, function (name, key) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: key,\n          value: key\n        }, name);\n      }))), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Treatments\",\n        labelFor: \"treatment\"\n      }, currentTreatments.length > 0 ? /*#__PURE__*/React.createElement(HTMLTable, {\n        striped: true,\n        bordered: true\n      }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"Treatment\"), /*#__PURE__*/React.createElement(\"th\", null, \"Lobby Configuration\"))), /*#__PURE__*/React.createElement(\"tbody\", null, _.map(currentTreatments, function (t) {\n        var id = \"gamesCount\" + t._id;\n        var treatment = treatments.find(function (tt) {\n          return tt._id === t._id;\n        });\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: id\n        }, /*#__PURE__*/React.createElement(\"td\", null, treatment.displayName(), \" \"), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(HTMLSelect, {\n          name: \"lobbyConfigId\",\n          id: \"lobbyConfigId\",\n          onChange: _this2.handleLobbyConfigChange.bind(_this2, t._id),\n          value: t.lobbyConfigId,\n          style: {\n            width: 250\n          }\n        }, _.map(lobbyConfigs, function (l) {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            key: l._id,\n            value: l._id\n          }, l.displayName());\n        }))), isComplete ? /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(NumericInput, {\n          name: id,\n          id: id,\n          min: \"1\",\n          max: maxGamesCount,\n          stepSize: \"1\",\n          onValueChange: _this2.handleTreatmentCountChange.bind(_this2, t._id),\n          value: t.count,\n          style: {\n            width: 100\n          }\n        })) : null, /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(Button, {\n          text: \"Remove\",\n          intent: Intent.DANGER,\n          onClick: _this2.handleRemoveTreatment,\n          \"data-id\": t._id\n        })));\n      }))) : \"\", currentTreatments.length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n        className: \"bp3-text-muted\"\n      }, \"No treatments yet, add one:\") : \"\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(HTMLSelect, {\n        name: \"treatment\",\n        id: \"treatment\",\n        onChange: this.handleAddTreatment,\n        value: \"\",\n        style: {\n          width: 250\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\"\n      }, \"Add a new treatment...\"), _.map(treatments, function (tr) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: tr._id,\n          value: tr._id\n        }, tr.displayName());\n      }))), /*#__PURE__*/React.createElement(FormGroup, {\n        label: \"Game Count\",\n        labelFor: \"gamesCount\",\n        helperText: isComplete ? null : \"The total number of games to run\"\n      }, isComplete ? gamesCount : /*#__PURE__*/React.createElement(NumericInput, {\n        name: \"gamesCount\",\n        id: \"gamesCount\",\n        min: \"1\",\n        max: maxGamesCount,\n        stepSize: \"1\",\n        onValueChange: this.handleGamesCountChange,\n        value: gamesCount\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: Classes.DIALOG_FOOTER\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: Classes.DIALOG_FOOTER_ACTIONS\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        text: \"Create Batch\",\n        intent: Intent.PRIMARY\n      }))));\n    }\n\n    return renderContent;\n  }();\n\n  _proto.render = function () {\n    function render() {\n      var _this$props = this.props,\n          isOpen = _this$props.isOpen,\n          onClose = _this$props.onClose;\n      var treatments = this.validTreatments();\n      var lobbyConfigs = this.validLobbyConfigs();\n      var content = _.isEmpty(treatments) || _.isEmpty(lobbyConfigs) ? this.renderRequired() : this.renderContent();\n      return /*#__PURE__*/React.createElement(Dialog, {\n        icon: IconNames.LAYERS,\n        isOpen: isOpen,\n        onClose: onClose,\n        title: \"New Batch\",\n        style: {\n          width: 700\n        }\n      }, content);\n    }\n\n    return render;\n  }();\n\n  return AdminNewBatch;\n}(React.Component);","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminNewBatch.jsx"],"names":["_createSuper","module","link","default","v","_inheritsLoose","export","AdminNewBatch","React","Link","Button","Classes","Dialog","FormGroup","HTMLSelect","HTMLTable","Intent","NumericInput","IconNames","assignmentTypes","maxGamesCount","createBatch","AlertToaster","state","assignment","simpleTreatments","completeTreatments","simpleGamesCount","gamesCount","handleAssignmentChange","event","currentTarget","value","setState","gamesCountCalc","handleGamesCountChange","handleAddTreatment","preventDefault","lobbyConfigs","validLobbyConfigs","key","_id","params","existing","find","tt","treatment","count","lobbyConfigId","_","isEmpty","push","handleTreatmentCountChange","id","t","handleLobbyConfigChange","handleRemoveTreatment","dataset","val","reject","handleNewBatch","treatments","map","pick","simpleConfig","completeConfig","show","message","call","err","console","error","JSON","stringify","String","props","onClose","inject","sum","validTreatments","filter","archivedAt","l","renderRequired","issues","DIALOG_BODY","issue","i","renderContent","isComplete","currentTreatments","name","length","displayName","bind","width","DANGER","tr","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY","render","isOpen","content","LAYERS","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Button,\n  Classes,\n  Dialog,\n  FormGroup,\n  HTMLSelect,\n  HTMLTable,\n  Intent,\n  NumericInput\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport {\n  assignmentTypes,\n  maxGamesCount\n} from \"../../../api/batches/batches.js\";\nimport { createBatch } from \"../../../api/batches/methods.js\";\n\nimport { AlertToaster } from \"../Toasters.jsx\";\n\nexport default class AdminNewBatch extends React.Component {\n  state = {\n    assignment: \"simple\",\n    simpleTreatments: [],\n    completeTreatments: [],\n    simpleGamesCount: 1,\n    gamesCount: 1\n  };\n\n  gamesCountCalc(assignment, completeTreatments, simpleGamesCount) {\n    return assignment === \"complete\"\n      ? _.inject(completeTreatments, (sum, t) => (t.count || 0) + sum, 0)\n      : simpleGamesCount;\n  }\n\n  handleAssignmentChange = event => {\n    const { completeTreatments, simpleGamesCount } = this.state;\n    const assignment = event.currentTarget.value;\n    this.setState({\n      assignment,\n      gamesCount: this.gamesCountCalc(\n        assignment,\n        completeTreatments,\n        simpleGamesCount\n      )\n    });\n  };\n\n  handleGamesCountChange = simpleGamesCount => {\n    this.setState({\n      simpleGamesCount,\n      gamesCount: simpleGamesCount\n    });\n  };\n\n  handleAddTreatment = event => {\n    event.preventDefault();\n\n    const lobbyConfigs = this.validLobbyConfigs();\n    const { assignment, simpleGamesCount } = this.state;\n\n    const key = `${assignment}Treatments`;\n    const _id = event.currentTarget.value;\n\n    if (!_id) {\n      return;\n    }\n\n    const params = {};\n    const existing = this.state[key].find(tt => tt._id === _id);\n    const treatment = existing || {\n      _id,\n      count: 1,\n      lobbyConfigId: !_.isEmpty(lobbyConfigs) && lobbyConfigs[0]._id\n    };\n\n    if (!existing) {\n      this.state[key].push(treatment);\n    } else {\n      existing.count++;\n    }\n    params[key] = this.state[key];\n    if (assignment === \"complete\") {\n      params.gamesCount = this.state.gamesCount + 1;\n    }\n    this.setState(params);\n  };\n\n  handleTreatmentCountChange = (id, count) => {\n    const { assignment, completeTreatments, simpleGamesCount } = this.state;\n\n    const key = `${assignment}Treatments`;\n    const t = this.state[key].find(tt => tt._id === id);\n    t.count = count;\n\n    const params = { [key]: this.state[key] };\n    if (assignment === \"complete\") {\n      params.gamesCount = this.gamesCountCalc(\n        assignment,\n        this.state[key],\n        simpleGamesCount\n      );\n    }\n\n    this.setState(params);\n  };\n\n  handleLobbyConfigChange = (id, event) => {\n    const {\n      currentTarget: { value: lobbyConfigId }\n    } = event;\n    const { assignment, completeTreatments } = this.state;\n\n    const key = `${assignment}Treatments`;\n    const t = this.state[key].find(tt => tt._id === id);\n    t.lobbyConfigId = lobbyConfigId;\n\n    this.setState({ [key]: this.state[key] });\n  };\n\n  handleRemoveTreatment = event => {\n    event.preventDefault();\n\n    const { assignment, simpleGamesCount, gamesCount } = this.state;\n    const key = `${assignment}Treatments`;\n\n    const id = event.currentTarget.dataset.id;\n    const treatment = this.state[key].find(t => t._id === id);\n    const val = _.reject(this.state[key], t => t._id === id);\n    const params = { [key]: val };\n\n    if (assignment === \"complete\") {\n      params.gamesCount = gamesCount - treatment.count;\n    }\n\n    this.setState(params);\n  };\n\n  handleNewBatch = event => {\n    event.preventDefault();\n    const {\n      assignment,\n      simpleGamesCount,\n      simpleTreatments,\n      completeTreatments\n    } = this.state;\n    const params = { assignment };\n\n    switch (assignment) {\n      case \"simple\":\n        const treatments = simpleTreatments.map(t =>\n          _.pick(t, \"_id\", \"lobbyConfigId\")\n        );\n        params.simpleConfig = {\n          treatments,\n          count: simpleGamesCount\n        };\n        break;\n      case \"complete\":\n        params.completeConfig = {\n          treatments: completeTreatments\n        };\n        break;\n      default:\n        AlertToaster.show({ message: \"unknown assignement type?!\" });\n        return;\n    }\n\n    createBatch.call(params, err => {\n      if (err) {\n        console.error(JSON.stringify(err));\n        AlertToaster.show({ message: String(err) });\n        return;\n      }\n\n      this.setState({\n        assignment: \"simple\",\n        simpleTreatments: [],\n        completeTreatments: [],\n        simpleGamesCount: 1,\n        gamesCount: 1\n      });\n      this.props.onClose();\n    });\n  };\n\n  validTreatments() {\n    const { treatments } = this.props;\n\n    return treatments.filter(t => !t.archivedAt);\n  }\n\n  validLobbyConfigs() {\n    const { lobbyConfigs } = this.props;\n\n    return lobbyConfigs.filter(l => !l.archivedAt);\n  }\n\n  renderRequired() {\n    const issues = [];\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    if (_.isEmpty(treatments)) {\n      issues.push(<Link to=\"/admin/treatments\">Create a Treatment</Link>);\n    }\n\n    if (_.isEmpty(lobbyConfigs)) {\n      issues.push(\n        <Link to=\"/admin/lobby-configurations\">\n          Create a Lobby Configuration\n        </Link>\n      );\n    }\n\n    return (\n      <div className={Classes.DIALOG_BODY}>\n        You must first:\n        <ul>\n          {issues.map((issue, i) => (\n            <li key={i}>{issue}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  renderContent() {\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    const {\n      gamesCount,\n      assignment,\n      simpleTreatments,\n      completeTreatments\n    } = this.state;\n\n    const isComplete = assignment === \"complete\";\n    const currentTreatments = isComplete\n      ? completeTreatments\n      : simpleTreatments;\n\n    return (\n      <form className=\"new-batch\" onSubmit={this.handleNewBatch}>\n        <div className={Classes.DIALOG_BODY}>\n          <FormGroup label=\"Assignment Method\" labelFor=\"assignment\">\n            <HTMLSelect\n              name=\"assignment\"\n              id=\"assignment\"\n              onChange={this.handleAssignmentChange}\n              value={assignment}\n            >\n              {_.map(assignmentTypes, (name, key) => (\n                <option key={key} value={key}>\n                  {name}\n                </option>\n              ))}\n            </HTMLSelect>\n          </FormGroup>\n\n          <FormGroup label=\"Treatments\" labelFor=\"treatment\">\n            {currentTreatments.length > 0 ? (\n              <HTMLTable striped bordered>\n                <thead>\n                  <tr>\n                    <th>Treatment</th>\n                    <th>Lobby Configuration</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {_.map(currentTreatments, t => {\n                    const id = `gamesCount${t._id}`;\n                    const treatment = treatments.find(tt => tt._id === t._id);\n                    return (\n                      <tr key={id}>\n                        <td>{treatment.displayName()} </td>\n\n                        <td>\n                          <HTMLSelect\n                            name=\"lobbyConfigId\"\n                            id=\"lobbyConfigId\"\n                            onChange={this.handleLobbyConfigChange.bind(\n                              this,\n                              t._id\n                            )}\n                            value={t.lobbyConfigId}\n                            style={{ width: 250 }}\n                          >\n                            {_.map(lobbyConfigs, l => (\n                              <option key={l._id} value={l._id}>\n                                {l.displayName()}\n                              </option>\n                            ))}\n                          </HTMLSelect>\n                        </td>\n\n                        {isComplete ? (\n                          <td>\n                            <NumericInput\n                              name={id}\n                              id={id}\n                              min=\"1\"\n                              max={maxGamesCount}\n                              stepSize=\"1\"\n                              onValueChange={this.handleTreatmentCountChange.bind(\n                                this,\n                                t._id\n                              )}\n                              value={t.count}\n                              style={{ width: 100 }}\n                            />\n                          </td>\n                        ) : null}\n                        <td>\n                          <Button\n                            text=\"Remove\"\n                            intent={Intent.DANGER}\n                            onClick={this.handleRemoveTreatment}\n                            data-id={t._id}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </HTMLTable>\n            ) : (\n              \"\"\n            )}\n\n            {currentTreatments.length === 0 ? (\n              <p className=\"bp3-text-muted\">No treatments yet, add one:</p>\n            ) : (\n              \"\"\n            )}\n\n            <br />\n\n            <HTMLSelect\n              name=\"treatment\"\n              id=\"treatment\"\n              onChange={this.handleAddTreatment}\n              value={\"\"}\n              style={{ width: 250 }}\n            >\n              <option value=\"\">Add a new treatment...</option>\n              {_.map(treatments, tr => (\n                <option key={tr._id} value={tr._id}>\n                  {tr.displayName()}\n                </option>\n              ))}\n            </HTMLSelect>\n          </FormGroup>\n\n          <FormGroup\n            label=\"Game Count\"\n            labelFor=\"gamesCount\"\n            helperText={isComplete ? null : \"The total number of games to run\"}\n          >\n            {isComplete ? (\n              gamesCount\n            ) : (\n              <NumericInput\n                name=\"gamesCount\"\n                id=\"gamesCount\"\n                min=\"1\"\n                max={maxGamesCount}\n                stepSize=\"1\"\n                onValueChange={this.handleGamesCountChange}\n                value={gamesCount}\n              />\n            )}\n          </FormGroup>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button type=\"submit\" text=\"Create Batch\" intent={Intent.PRIMARY} />\n          </div>\n        </div>\n      </form>\n    );\n  }\n\n  render() {\n    const { isOpen, onClose } = this.props;\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    const content =\n      _.isEmpty(treatments) || _.isEmpty(lobbyConfigs)\n        ? this.renderRequired()\n        : this.renderContent();\n\n    return (\n      <Dialog\n        icon={IconNames.LAYERS}\n        isOpen={isOpen}\n        onClose={onClose}\n        title=\"New Batch\"\n        style={{ width: 700 }}\n      >\n        {content}\n      </Dialog>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"67bd2c55c44f57eed320e5676ed6829b3ced789f"}
