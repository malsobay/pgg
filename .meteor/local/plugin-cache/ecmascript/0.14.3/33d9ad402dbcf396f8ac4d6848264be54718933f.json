{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/player-rounds/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/empirica:core/api/player-rounds/methods.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/player-rounds/methods.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/player-rounds/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/player-rounds/methods.js"}},"code":"module.export({\n  updatePlayerRoundData: function () {\n    return updatePlayerRoundData;\n  }\n});\nvar ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar PlayerRounds;\nmodule.link(\"./player-rounds\", {\n  PlayerRounds: function (v) {\n    PlayerRounds = v;\n  }\n}, 2);\nvar shared;\nmodule.link(\"../../shared.js\", {\n  \"default\": function (v) {\n    shared = v;\n  }\n}, 3);\nvar updatePlayerRoundData = new ValidatedMethod({\n  name: \"PlayerRounds.methods.updateData\",\n  validate: new SimpleSchema({\n    playerRoundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n  run: function (_ref) {\n    var _update;\n\n    var playerRoundId = _ref.playerRoundId,\n        key = _ref.key,\n        value = _ref.value,\n        append = _ref.append,\n        noCallback = _ref.noCallback;\n    var playerRound = PlayerRounds.findOne(playerRoundId);\n\n    if (!playerRound) {\n      throw new Error(\"playerRound not found\");\n    } // TODO check can update this record playerRound\n\n\n    var val = JSON.parse(value);\n    var update = (_update = {}, _update[\"data.\" + key] = val, _update);\n    var modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    PlayerRounds.update(playerRoundId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId: playerRound.playerId,\n        playerRoundId: playerRoundId,\n        playerRound: playerRound,\n        key: key,\n        value: val,\n        prevValue: playerRound.data && playerRound.data[key],\n        append: append\n      });\n    }\n  }\n});","map":{"version":3,"sources":["packages/empirica:core/api/player-rounds/methods.js"],"names":["module","export","updatePlayerRoundData","ValidatedMethod","link","v","SimpleSchema","PlayerRounds","shared","name","validate","playerRoundId","type","String","regEx","RegEx","Id","key","value","append","Boolean","optional","noCallback","validator","run","playerRound","findOne","Error","val","JSON","parse","update","modifier","$push","$set","autoConvert","filter","trimStrings","removeEmptyStrings","Meteor","isServer","callOnChange","playerId","prevValue","data"],"mappings":"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","sourcesContent":["import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\nimport { PlayerRounds } from \"./player-rounds\";\nimport shared from \"../../shared.js\";\n\nexport const updatePlayerRoundData = new ValidatedMethod({\n  name: \"PlayerRounds.methods.updateData\",\n\n  validate: new SimpleSchema({\n    playerRoundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ playerRoundId, key, value, append, noCallback }) {\n    const playerRound = PlayerRounds.findOne(playerRoundId);\n    if (!playerRound) {\n      throw new Error(\"playerRound not found\");\n    }\n    // TODO check can update this record playerRound\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    PlayerRounds.update(playerRoundId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId: playerRound.playerId,\n        playerRoundId,\n        playerRound,\n        key,\n        value: val,\n        prevValue: playerRound.data && playerRound.data[key],\n        append\n      });\n    }\n  }\n});\n"]},"sourceType":"module","hash":"33d9ad402dbcf396f8ac4d6848264be54718933f"}
