{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/schema-helpers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/empirica:core/api/schema-helpers.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/schema-helpers.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/schema-helpers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/schema-helpers.js"}},"code":"let Collection2;\nmodule.link(\"meteor/aldeed:collection2\", {\n  default(v) {\n    Collection2 = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\n// Must be unique scoped by other field (for given value of passed field,\n// The current field should be unique). For ex:\n//   Name: {\n//     Type: String,\n//     ScopedUnique: \"orgId\"\n//   }\n// Name must be unique for document with equal orgId.\n// Documents with different orgId can have same name.\nSimpleSchema.extendOptions([\"scopedUnique\"]);\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (ss.version >= 2) {\n    ss.messageBox.messages({\n      scopedUnique: \"Already exists\"\n    });\n  }\n\n  ss.addValidator(function () {\n    if (!this.isSet) {\n      return;\n    }\n\n    const def = this.definition;\n    const uniqueFieldScope = def.scopedUnique;\n\n    if (!uniqueFieldScope) {\n      return;\n    }\n\n    const val = this.field(uniqueFieldScope).value;\n    const key = this.key;\n\n    if (collection.find({\n      [uniqueFieldScope]: val,\n      [key]: this.value\n    }).count() > 0) {\n      return \"uniqueScoped\";\n    }\n  });\n}); // Extend the schema options allowed by SimpleSchema\n\nSimpleSchema.extendOptions([\"denyInsert\", \"denyUpdate\"]);\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === \"function\") {\n    ss.messageBox.messages({\n      en: {\n        insertNotAllowed: \"{{label}} cannot be set during an insert\",\n        updateNotAllowed: \"{{label}} cannot be set during an update\"\n      }\n    });\n  }\n\n  ss.addValidator(function schemaDenyValidator() {\n    if (!this.isSet) return;\n    const def = this.definition;\n    if (def.denyInsert && this.isInsert) return \"insertNotAllowed\";\n    if (def.denyUpdate && (this.isUpdate || this.isUpsert)) return \"updateNotAllowed\";\n  });\n}); // Extend the schema options allowed by SimpleSchema\n\nSimpleSchema.extendOptions([\"index\", // one of Number, String, Boolean\n\"unique\", // Boolean\n\"sparse\" // Boolean\n]);","map":{"version":3,"sources":["packages/empirica:core/api/schema-helpers.js"],"names":["Collection2","module","link","default","v","SimpleSchema","extendOptions","on","collection","ss","version","messageBox","messages","scopedUnique","addValidator","isSet","def","definition","uniqueFieldScope","val","field","value","key","find","count","en","insertNotAllowed","updateNotAllowed","schemaDenyValidator","denyInsert","isInsert","denyUpdate","isUpdate","isUpsert"],"mappings":"AAAA,IAAIA,WAAJ;AAAgBC,MAAM,CAACC,IAAP,CAAY,2BAAZ,EAAwC;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACJ,IAAAA,WAAW,GAACI,CAAZ;AAAc;;AAA1B,CAAxC,EAAoE,CAApE;AAAuE,IAAIC,YAAJ;AAAiBJ,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACC,EAAAA,OAAO,CAACC,CAAD,EAAG;AAACC,IAAAA,YAAY,GAACD,CAAb;AAAe;;AAA3B,CAA3B,EAAwD,CAAxD;AAGxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,YAAY,CAACC,aAAb,CAA2B,CAAC,cAAD,CAA3B;AAEAN,WAAW,CAACO,EAAZ,CAAe,iBAAf,EAAkC,CAACC,UAAD,EAAaC,EAAb,KAAoB;AACpD,MAAIA,EAAE,CAACC,OAAH,IAAc,CAAlB,EAAqB;AACnBD,IAAAA,EAAE,CAACE,UAAH,CAAcC,QAAd,CAAuB;AACrBC,MAAAA,YAAY,EAAE;AADO,KAAvB;AAGD;;AAEDJ,EAAAA,EAAE,CAACK,YAAH,CAAgB,YAAW;AACzB,QAAI,CAAC,KAAKC,KAAV,EAAiB;AACf;AACD;;AAED,UAAMC,GAAG,GAAG,KAAKC,UAAjB;AACA,UAAMC,gBAAgB,GAAGF,GAAG,CAACH,YAA7B;;AAEA,QAAI,CAACK,gBAAL,EAAuB;AACrB;AACD;;AAED,UAAMC,GAAG,GAAG,KAAKC,KAAL,CAAWF,gBAAX,EAA6BG,KAAzC;AACA,UAAMC,GAAG,GAAG,KAAKA,GAAjB;;AACA,QACEd,UAAU,CACPe,IADH,CACQ;AACJ,OAACL,gBAAD,GAAoBC,GADhB;AAEJ,OAACG,GAAD,GAAO,KAAKD;AAFR,KADR,EAKGG,KALH,KAKa,CANf,EAOE;AACA,aAAO,cAAP;AACD;AACF,GAxBD;AAyBD,CAhCD,E,CAkCA;;AACAnB,YAAY,CAACC,aAAb,CAA2B,CAAC,YAAD,EAAe,YAAf,CAA3B;AAEAN,WAAW,CAACO,EAAZ,CAAe,iBAAf,EAAkC,CAACC,UAAD,EAAaC,EAAb,KAAoB;AACpD,MACEA,EAAE,CAACC,OAAH,IAAc,CAAd,IACAD,EAAE,CAACE,UADH,IAEA,OAAOF,EAAE,CAACE,UAAH,CAAcC,QAArB,KAAkC,UAHpC,EAIE;AACAH,IAAAA,EAAE,CAACE,UAAH,CAAcC,QAAd,CAAuB;AACrBa,MAAAA,EAAE,EAAE;AACFC,QAAAA,gBAAgB,EAAE,0CADhB;AAEFC,QAAAA,gBAAgB,EAAE;AAFhB;AADiB,KAAvB;AAMD;;AAEDlB,EAAAA,EAAE,CAACK,YAAH,CAAgB,SAASc,mBAAT,GAA+B;AAC7C,QAAI,CAAC,KAAKb,KAAV,EAAiB;AAEjB,UAAMC,GAAG,GAAG,KAAKC,UAAjB;AAEA,QAAID,GAAG,CAACa,UAAJ,IAAkB,KAAKC,QAA3B,EAAqC,OAAO,kBAAP;AACrC,QAAId,GAAG,CAACe,UAAJ,KAAmB,KAAKC,QAAL,IAAiB,KAAKC,QAAzC,CAAJ,EACE,OAAO,kBAAP;AACH,GARD;AASD,CAvBD,E,CAyBA;;AACA5B,YAAY,CAACC,aAAb,CAA2B,CACzB,OADyB,EAChB;AACT,QAFyB,EAEf;AACV,QAHyB,CAGhB;AAHgB,CAA3B","sourcesContent":["import Collection2 from \"meteor/aldeed:collection2\";\nimport SimpleSchema from \"simpl-schema\";\n\n// Must be unique scoped by other field (for given value of passed field,\n// The current field should be unique). For ex:\n//   Name: {\n//     Type: String,\n//     ScopedUnique: \"orgId\"\n//   }\n// Name must be unique for document with equal orgId.\n// Documents with different orgId can have same name.\nSimpleSchema.extendOptions([\"scopedUnique\"]);\n\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (ss.version >= 2) {\n    ss.messageBox.messages({\n      scopedUnique: \"Already exists\"\n    });\n  }\n\n  ss.addValidator(function() {\n    if (!this.isSet) {\n      return;\n    }\n\n    const def = this.definition;\n    const uniqueFieldScope = def.scopedUnique;\n\n    if (!uniqueFieldScope) {\n      return;\n    }\n\n    const val = this.field(uniqueFieldScope).value;\n    const key = this.key;\n    if (\n      collection\n        .find({\n          [uniqueFieldScope]: val,\n          [key]: this.value\n        })\n        .count() > 0\n    ) {\n      return \"uniqueScoped\";\n    }\n  });\n});\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\"denyInsert\", \"denyUpdate\"]);\n\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (\n    ss.version >= 2 &&\n    ss.messageBox &&\n    typeof ss.messageBox.messages === \"function\"\n  ) {\n    ss.messageBox.messages({\n      en: {\n        insertNotAllowed: \"{{label}} cannot be set during an insert\",\n        updateNotAllowed: \"{{label}} cannot be set during an update\"\n      }\n    });\n  }\n\n  ss.addValidator(function schemaDenyValidator() {\n    if (!this.isSet) return;\n\n    const def = this.definition;\n\n    if (def.denyInsert && this.isInsert) return \"insertNotAllowed\";\n    if (def.denyUpdate && (this.isUpdate || this.isUpsert))\n      return \"updateNotAllowed\";\n  });\n});\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  \"index\", // one of Number, String, Boolean\n  \"unique\", // Boolean\n  \"sparse\" // Boolean\n]);\n"]},"sourceType":"module","hash":"fa92a64d9856050ec910b77484d04f1bf524e151"}
