{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/treatments/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/api/treatments/methods.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/treatments/methods.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/treatments/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/treatments/methods.js"}},"code":"module.export({\n  createTreatment: () => createTreatment,\n  updateTreatment: () => updateTreatment\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet Factors;\nmodule.link(\"../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"./treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nconst createTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.create\",\n  validate: new SimpleSchema({\n    name: {\n      type: String,\n      max: 256,\n      optional: true\n    },\n    factorIds: {\n      type: Array,\n      label: \"Factors\"\n    },\n    \"factorIds.$\": {\n      type: String\n    }\n  }).validator(),\n\n  run(treatment) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    } // Validate the required factor types\n\n\n    const requiredFactorTypes = FactorTypes.find({\n      required: true,\n      archivedAt: {\n        $exists: false\n      }\n    }).fetch();\n\n    if (requiredFactorTypes.length > 0) {\n      const createdFactors = Factors.find({\n        _id: {\n          $in: treatment.factorIds\n        }\n      }).fetch();\n      const createdFactorTypes = FactorTypes.find({\n        $and: [{\n          _id: {\n            $in: createdFactors.map(f => f.factorTypeId)\n          }\n        }, {\n          required: true\n        }]\n      }).fetch();\n\n      if (requiredFactorTypes.length !== createdFactorTypes.length) {\n        throw new Error(\"Fill all required factors!\");\n      }\n    }\n\n    Treatments.insert(treatment);\n  }\n\n});\nconst updateTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.update\",\n  validate: Treatments.schema.pick(\"name\").extend(new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })).extend(IdSchema).validator(),\n\n  run(_ref) {\n    let {\n      _id,\n      name,\n      archived\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const treatment = Treatments.findOne(_id);\n\n    if (!treatment) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (name !== undefined) {\n      $set.name = name;\n    }\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Treatments.update(_id, modifier);\n  }\n\n});","map":{"version":3,"sources":["packages/empirica:core/api/treatments/methods.js"],"names":["module","export","createTreatment","updateTreatment","ValidatedMethod","link","v","SimpleSchema","default","IdSchema","FactorTypes","Factors","Treatments","name","validate","type","String","max","optional","factorIds","Array","label","validator","run","treatment","userId","Error","requiredFactorTypes","find","required","archivedAt","$exists","fetch","length","createdFactors","_id","$in","createdFactorTypes","$and","map","f","factorTypeId","insert","schema","pick","extend","archived","Boolean","findOne","$set","$unset","undefined","Date","archivedById","modifier","Object","keys","update"],"mappings":"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","sourcesContent":["import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { IdSchema } from \"../default-schemas.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\nimport { Factors } from \"../factors/factors.js\";\nimport { Treatments } from \"./treatments\";\n\nexport const createTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.create\",\n\n  validate: new SimpleSchema({\n    name: {\n      type: String,\n      max: 256,\n      optional: true\n    },\n    factorIds: {\n      type: Array,\n      label: \"Factors\"\n    },\n    \"factorIds.$\": {\n      type: String\n    }\n  }).validator(),\n\n  run(treatment) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    // Validate the required factor types\n    const requiredFactorTypes = FactorTypes.find({\n      required: true,\n      archivedAt: { $exists: false }\n    }).fetch();\n\n    if (requiredFactorTypes.length > 0) {\n      const createdFactors = Factors.find({\n        _id: { $in: treatment.factorIds }\n      }).fetch();\n      const createdFactorTypes = FactorTypes.find({\n        $and: [\n          {\n            _id: {\n              $in: createdFactors.map(f => f.factorTypeId)\n            }\n          },\n          { required: true }\n        ]\n      }).fetch();\n\n      if (requiredFactorTypes.length !== createdFactorTypes.length) {\n        throw new Error(\"Fill all required factors!\");\n      }\n    }\n\n    Treatments.insert(treatment);\n  }\n});\n\nexport const updateTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.update\",\n\n  validate: Treatments.schema\n    .pick(\"name\")\n    .extend(\n      new SimpleSchema({\n        archived: {\n          type: Boolean,\n          optional: true\n        }\n      })\n    )\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, name, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n    const treatment = Treatments.findOne(_id);\n    if (!treatment) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n    if (name !== undefined) {\n      $set.name = name;\n    }\n    if (archived !== undefined) {\n      if (archived) {\n        if (treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Treatments.update(_id, modifier);\n  }\n});\n"]},"sourceType":"module","hash":"faab40a699324833618d30f98dc9b730d8806b4b"}
