{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/treatments/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/empirica:core/api/treatments/methods.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/treatments/methods.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/treatments/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/treatments/methods.js"}},"code":"module.export({\n  createTreatment: function () {\n    return createTreatment;\n  },\n  updateTreatment: function () {\n    return updateTreatment;\n  }\n});\nvar ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod: function (v) {\n    ValidatedMethod = v;\n  }\n}, 0);\nvar SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  \"default\": function (v) {\n    SimpleSchema = v;\n  }\n}, 1);\nvar IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema: function (v) {\n    IdSchema = v;\n  }\n}, 2);\nvar FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes: function (v) {\n    FactorTypes = v;\n  }\n}, 3);\nvar Factors;\nmodule.link(\"../factors/factors.js\", {\n  Factors: function (v) {\n    Factors = v;\n  }\n}, 4);\nvar Treatments;\nmodule.link(\"./treatments\", {\n  Treatments: function (v) {\n    Treatments = v;\n  }\n}, 5);\nvar createTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.create\",\n  validate: new SimpleSchema({\n    name: {\n      type: String,\n      max: 256,\n      optional: true\n    },\n    factorIds: {\n      type: Array,\n      label: \"Factors\"\n    },\n    \"factorIds.$\": {\n      type: String\n    }\n  }).validator(),\n  run: function (treatment) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    } // Validate the required factor types\n\n\n    var requiredFactorTypes = FactorTypes.find({\n      required: true,\n      archivedAt: {\n        $exists: false\n      }\n    }).fetch();\n\n    if (requiredFactorTypes.length > 0) {\n      var createdFactors = Factors.find({\n        _id: {\n          $in: treatment.factorIds\n        }\n      }).fetch();\n      var createdFactorTypes = FactorTypes.find({\n        $and: [{\n          _id: {\n            $in: createdFactors.map(function (f) {\n              return f.factorTypeId;\n            })\n          }\n        }, {\n          required: true\n        }]\n      }).fetch();\n\n      if (requiredFactorTypes.length !== createdFactorTypes.length) {\n        throw new Error(\"Fill all required factors!\");\n      }\n    }\n\n    Treatments.insert(treatment);\n  }\n});\nvar updateTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.update\",\n  validate: Treatments.schema.pick(\"name\").extend(new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })).extend(IdSchema).validator(),\n  run: function (_ref) {\n    var _id = _ref._id,\n        name = _ref.name,\n        archived = _ref.archived;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    var treatment = Treatments.findOne(_id);\n\n    if (!treatment) {\n      throw new Error(\"not found\");\n    }\n\n    var $set = {},\n        $unset = {};\n\n    if (name !== undefined) {\n      $set.name = name;\n    }\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    var modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Treatments.update(_id, modifier);\n  }\n});","map":{"version":3,"sources":["packages/empirica:core/api/treatments/methods.js"],"names":["module","export","createTreatment","updateTreatment","ValidatedMethod","link","v","SimpleSchema","IdSchema","FactorTypes","Factors","Treatments","name","validate","type","String","max","optional","factorIds","Array","label","validator","run","treatment","userId","Error","requiredFactorTypes","find","required","archivedAt","$exists","fetch","length","createdFactors","_id","$in","createdFactorTypes","$and","map","f","factorTypeId","insert","schema","pick","extend","archived","Boolean","findOne","$set","$unset","undefined","Date","archivedById","modifier","Object","keys","update"],"mappings":"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","sourcesContent":["import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { IdSchema } from \"../default-schemas.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\nimport { Factors } from \"../factors/factors.js\";\nimport { Treatments } from \"./treatments\";\n\nexport const createTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.create\",\n\n  validate: new SimpleSchema({\n    name: {\n      type: String,\n      max: 256,\n      optional: true\n    },\n    factorIds: {\n      type: Array,\n      label: \"Factors\"\n    },\n    \"factorIds.$\": {\n      type: String\n    }\n  }).validator(),\n\n  run(treatment) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    // Validate the required factor types\n    const requiredFactorTypes = FactorTypes.find({\n      required: true,\n      archivedAt: { $exists: false }\n    }).fetch();\n\n    if (requiredFactorTypes.length > 0) {\n      const createdFactors = Factors.find({\n        _id: { $in: treatment.factorIds }\n      }).fetch();\n      const createdFactorTypes = FactorTypes.find({\n        $and: [\n          {\n            _id: {\n              $in: createdFactors.map(f => f.factorTypeId)\n            }\n          },\n          { required: true }\n        ]\n      }).fetch();\n\n      if (requiredFactorTypes.length !== createdFactorTypes.length) {\n        throw new Error(\"Fill all required factors!\");\n      }\n    }\n\n    Treatments.insert(treatment);\n  }\n});\n\nexport const updateTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.update\",\n\n  validate: Treatments.schema\n    .pick(\"name\")\n    .extend(\n      new SimpleSchema({\n        archived: {\n          type: Boolean,\n          optional: true\n        }\n      })\n    )\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, name, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n    const treatment = Treatments.findOne(_id);\n    if (!treatment) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n    if (name !== undefined) {\n      $set.name = name;\n    }\n    if (archived !== undefined) {\n      if (archived) {\n        if (treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Treatments.update(_id, modifier);\n  }\n});\n"]},"sourceType":"module","hash":"d65b73368da8f8294e5a656a1e37e0464ff47d04"}
