{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/games/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/empirica:core/api/games/methods.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/games/methods.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/games/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/games/methods.js"}},"code":"module.export({\n  updateGameData: () => updateGameData,\n  earlyExitGame: () => earlyExitGame\n});\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"./games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 4);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 5);\nlet Stages;\nmodule.link(\"../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 6);\nlet Batches;\nmodule.link(\"../batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 7);\nconst updateGameData = new ValidatedMethod({\n  name: \"Games.methods.updateData\",\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      gameId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    } // TODO check can update this record game\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    Games.update(gameId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        gameId,\n        game,\n        key,\n        value: val,\n        prevValue: game.data && game.data[key],\n        append\n      });\n    }\n  }\n\n});\nconst earlyExitGame = new ValidatedMethod({\n  name: \"Games.methods.earlyExitGame\",\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    endReason: {\n      label: \"Reason for End\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    status: {\n      label: \"status for games and players after exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    }\n  }).validator(),\n\n  run(_ref2) {\n    let {\n      gameId,\n      endReason,\n      status\n    } = _ref2;\n\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n\n    if (game && game.finishedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\n\\ngame already ended!\");\n      }\n\n      return;\n    }\n\n    Games.update(gameId, {\n      $set: {\n        finishedAt: new Date(),\n        status,\n        endReason\n      }\n    });\n    GameLobbies.update({\n      gameId\n    }, {\n      $set: {\n        status,\n        endReason\n      }\n    });\n    game.playerIds.forEach(playerId => Players.update(playerId, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: status,\n        exitReason: endReason\n      }\n    }));\n    const batch = Batches.findOne(game.batchId);\n    const availableLobby = GameLobbies.findOne({\n      $and: [{\n        _id: {\n          $in: batch.gameLobbyIds\n        }\n      }, {\n        status: {\n          $in: [\"init\", \"running\"]\n        }\n      }]\n    }); // End batch if there is no available game\n\n    if (!availableLobby) {\n      Batches.update({\n        gameLobbyIds: gameId\n      }, {\n        $set: {\n          status: status,\n          finishedAt: new Date()\n        }\n      });\n    }\n  }\n\n});","map":{"version":3,"sources":["packages/empirica:core/api/games/methods.js"],"names":["module","export","updateGameData","earlyExitGame","shared","link","default","v","ValidatedMethod","SimpleSchema","Games","GameLobbies","Players","Stages","Batches","name","validate","gameId","type","String","regEx","RegEx","Id","key","value","append","Boolean","optional","noCallback","validator","run","game","findOne","Error","val","JSON","parse","update","modifier","$push","$set","autoConvert","filter","trimStrings","removeEmptyStrings","Meteor","isServer","callOnChange","conn","connection","prevValue","data","endReason","label","status","finishedAt","isDevelopment","console","log","Date","playerIds","forEach","playerId","exitAt","exitStatus","exitReason","batch","batchId","availableLobby","$and","_id","$in","gameLobbyIds"],"mappings":"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","sourcesContent":["import shared from \"../../shared.js\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { Games } from \"./games.js\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies.js\";\nimport { Players } from \"../players/players.js\";\nimport { Stages } from \"../stages/stages.js\";\nimport { Batches } from \"../batches/batches.js\";\n\nexport const updateGameData = new ValidatedMethod({\n  name: \"Games.methods.updateData\",\n\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ gameId, key, value, append, noCallback }) {\n    const game = Games.findOne(gameId);\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n    // TODO check can update this record game\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    Games.update(gameId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        gameId,\n        game,\n        key,\n        value: val,\n        prevValue: game.data && game.data[key],\n        append\n      });\n    }\n  }\n});\n\nexport const earlyExitGame = new ValidatedMethod({\n  name: \"Games.methods.earlyExitGame\",\n\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    endReason: {\n      label: \"Reason for End\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    status: {\n      label: \"status for games and players after exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    }\n  }).validator(),\n\n  run({ gameId, endReason, status }) {\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n\n    if (game && game.finishedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\n\\ngame already ended!\");\n      }\n\n      return;\n    }\n\n    Games.update(gameId, {\n      $set: {\n        finishedAt: new Date(),\n        status,\n        endReason\n      }\n    });\n\n    GameLobbies.update(\n      { gameId },\n      {\n        $set: {\n          status,\n          endReason\n        }\n      }\n    );\n\n    game.playerIds.forEach(playerId =>\n      Players.update(playerId, {\n        $set: {\n          exitAt: new Date(),\n          exitStatus: status,\n          exitReason: endReason\n        }\n      })\n    );\n\n    const batch = Batches.findOne(game.batchId);\n    const availableLobby = GameLobbies.findOne({\n      $and: [\n        {\n          _id: { $in: batch.gameLobbyIds }\n        },\n        { status: { $in: [\"init\", \"running\"] } }\n      ]\n    });\n\n    // End batch if there is no available game\n    if (!availableLobby) {\n      Batches.update(\n        { gameLobbyIds: gameId },\n        { $set: { status: status, finishedAt: new Date() } }\n      );\n    }\n  }\n});\n"]},"sourceType":"module","hash":"78ec6ca9443813a5a5fb01c4ef798a2aa28ec561"}
