{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/batches/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/empirica:core/api/batches/methods.js","filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/batches/methods.js","passPerPreset":false,"envName":"production","cwd":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","root":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/mosobay/Dropbox (MIT)/research/pgg/pgg_empirica/packages/empirica:core/api/batches/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/batches/methods.js"}},"code":"module.export({\n  createBatch: () => createBatch,\n  duplicateBatch: () => duplicateBatch,\n  updateBatch: () => updateBatch,\n  updateBatchStatus: () => updateBatchStatus\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet Batches;\nmodule.link(\"./batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 2);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 3);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 4);\nlet IdSchema;\nmodule.link(\"../default-schemas\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 5);\nconst createBatch = new ValidatedMethod({\n  name: \"Batches.methods.create\",\n  validate: Batches.schema.omit(\"gameIds\", \"gameLobbyIds\", \"status\", \"createdAt\", \"updatedAt\", \"debugMode\", \"full\", \"index\").validator(),\n\n  run(batch) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    Batches.insert(batch, {\n      autoConvert: false,\n      filter: false,\n      validate: false\n    });\n  }\n\n});\nconst duplicateBatch = new ValidatedMethod({\n  name: \"Batches.methods.duplicate\",\n  validate: IdSchema.validator(),\n\n  run(_ref) {\n    let {\n      _id\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    batch.duplicate();\n  }\n\n});\nconst updateBatch = new ValidatedMethod({\n  name: \"Batches.methods.updateBatch\",\n  validate: new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  }).extend(IdSchema).validator(),\n\n  run(_ref2) {\n    let {\n      _id,\n      archived\n    } = _ref2;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Batches.update(_id, modifier);\n  }\n\n});\nconst updateBatchStatus = new ValidatedMethod({\n  name: \"Batches.methods.updateStatus\",\n  validate: Batches.schema.pick(\"status\").extend(IdSchema).validator(),\n\n  run(_ref3) {\n    let {\n      _id,\n      status\n    } = _ref3;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    if (status === \"init\") {\n      throw new Error(\"invalid\");\n    }\n\n    const $set = {\n      status\n    };\n\n    if (status === \"running\") {\n      $set.runningAt = new Date();\n      GameLobbies.update({\n        batchId: _id\n      }, {\n        $set: {\n          status: \"running\"\n        }\n      }, {\n        multi: true\n      });\n    }\n\n    Batches.update(_id, {\n      $set\n    });\n  }\n\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  module.export({\n    setBatchInDebugMode: () => setBatchInDebugMode\n  });\n  const setBatchInDebugMode = new ValidatedMethod({\n    name: \"Batches.methods.debugMode\",\n    validate: IdSchema.validator(),\n\n    run(_ref4) {\n      let {\n        _id\n      } = _ref4;\n\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      const batch = Batches.findOne(_id);\n\n      if (!batch) {\n        throw new Error(\"not found\");\n      }\n\n      Batches.update(_id, {\n        $set: {\n          debugMode: true\n        }\n      });\n      GameLobbies.update({\n        batchId: _id\n      }, {\n        $set: {\n          debugMode: true\n        }\n      });\n      Games.update({\n        batchId: _id\n      }, {\n        $set: {\n          debugMode: true\n        }\n      });\n    }\n\n  });\n}","map":{"version":3,"sources":["packages/empirica:core/api/batches/methods.js"],"names":["module","export","createBatch","duplicateBatch","updateBatch","updateBatchStatus","SimpleSchema","link","default","v","ValidatedMethod","Batches","GameLobbies","Games","IdSchema","name","validate","schema","omit","validator","run","batch","userId","Error","insert","autoConvert","filter","_id","findOne","duplicate","archived","type","Boolean","optional","extend","$set","$unset","undefined","archivedAt","Date","archivedById","modifier","Object","keys","length","update","pick","status","runningAt","batchId","multi","Meteor","isDevelopment","settings","public","debug_gameDebugMode","setBatchInDebugMode","debugMode"],"mappings":"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","sourcesContent":["import SimpleSchema from \"simpl-schema\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\n\nimport { Batches } from \"./batches\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies.js\";\nimport { Games } from \"../games/games.js\";\nimport { IdSchema } from \"../default-schemas\";\n\nexport const createBatch = new ValidatedMethod({\n  name: \"Batches.methods.create\",\n\n  validate: Batches.schema\n    .omit(\n      \"gameIds\",\n      \"gameLobbyIds\",\n      \"status\",\n      \"createdAt\",\n      \"updatedAt\",\n      \"debugMode\",\n      \"full\",\n      \"index\"\n    )\n    .validator(),\n\n  run(batch) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    Batches.insert(batch, {\n      autoConvert: false,\n      filter: false,\n      validate: false\n    });\n  }\n});\n\nexport const duplicateBatch = new ValidatedMethod({\n  name: \"Batches.methods.duplicate\",\n\n  validate: IdSchema.validator(),\n\n  run({ _id }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    batch.duplicate();\n  }\n});\n\nexport const updateBatch = new ValidatedMethod({\n  name: \"Batches.methods.updateBatch\",\n\n  validate: new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Batches.update(_id, modifier);\n  }\n});\n\nexport const updateBatchStatus = new ValidatedMethod({\n  name: \"Batches.methods.updateStatus\",\n\n  validate: Batches.schema\n    .pick(\"status\")\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, status }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    if (status === \"init\") {\n      throw new Error(\"invalid\");\n    }\n\n    const $set = { status };\n\n    if (status === \"running\") {\n      $set.runningAt = new Date();\n      GameLobbies.update(\n        { batchId: _id },\n        { $set: { status: \"running\" } },\n        { multi: true }\n      );\n    }\n\n    Batches.update(_id, { $set });\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  export const setBatchInDebugMode = new ValidatedMethod({\n    name: \"Batches.methods.debugMode\",\n\n    validate: IdSchema.validator(),\n\n    run({ _id }) {\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      const batch = Batches.findOne(_id);\n      if (!batch) {\n        throw new Error(\"not found\");\n      }\n\n      Batches.update(_id, { $set: { debugMode: true } });\n      GameLobbies.update({ batchId: _id }, { $set: { debugMode: true } });\n      Games.update({ batchId: _id }, { $set: { debugMode: true } });\n    }\n  });\n}\n"]},"sourceType":"module","hash":"3f3f077222a09017871a68b1de9867834af1ee57"}
