{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/startup/server/export.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/empirica:core/startup/server/export.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/startup/server/export.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/startup/server/export.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/startup/server/export.js"}},"code":"module.export({\n  BOM: () => BOM,\n  cast: () => cast,\n  quoteMark: () => quoteMark,\n  doubleQuoteMark: () => doubleQuoteMark,\n  quoteRegex: () => quoteRegex,\n  encodeCells: () => encodeCells\n});\nlet archiver;\nmodule.link(\"archiver\", {\n  default(v) {\n    archiver = v;\n  }\n\n}, 0);\nlet contentDisposition;\nmodule.link(\"content-disposition\", {\n  default(v) {\n    contentDisposition = v;\n  }\n\n}, 1);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 2);\nlet streams;\nmodule.link(\"stream-buffers\", {\n  default(v) {\n    streams = v;\n  }\n\n}, 3);\nlet Batches;\nmodule.link(\"../../api/batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 4);\nlet FactorTypes;\nmodule.link(\"../../api/factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 5);\nlet Factors;\nmodule.link(\"../../api/factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 6);\nlet GameLobbies;\nmodule.link(\"../../api/game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 7);\nlet Games;\nmodule.link(\"../../api/games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 8);\nlet LobbyConfigs;\nmodule.link(\"../../api/lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 9);\nlet PlayerInputs;\nmodule.link(\"../../api/player-inputs/player-inputs.js\", {\n  PlayerInputs(v) {\n    PlayerInputs = v;\n  }\n\n}, 10);\nlet PlayerLogs;\nmodule.link(\"../../api/player-logs/player-logs.js\", {\n  PlayerLogs(v) {\n    PlayerLogs = v;\n  }\n\n}, 11);\nlet PlayerRounds;\nmodule.link(\"../../api/player-rounds/player-rounds.js\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 12);\nlet PlayerStages;\nmodule.link(\"../../api/player-stages/player-stages.js\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 13);\nlet Players;\nmodule.link(\"../../api/players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 14);\nlet Rounds;\nmodule.link(\"../../api/rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 15);\nlet Stages;\nmodule.link(\"../../api/stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 16);\nlet Treatments;\nmodule.link(\"../../api/treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 17);\nlet log;\nmodule.link(\"../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 18);\nconst BOM = \"\\uFEFF\";\n\n// Get all possible keys in the data field of collections that have a data field\n// such as Players, PlayerStages and PlayerRounds.\nconst getDataKeys = coll => {\n  const map = {};\n  coll.find({}, {\n    fields: {\n      data: 1\n    }\n  }).forEach(record => {\n    _.keys(record.data).forEach(key => map[key] = true);\n  });\n  return _.keys(map);\n};\n\nconst cast = out => {\n  if (_.isArray(out)) {\n    // The cast here will flatten arrays but will still catch dates correctly\n    return out.map(a => cast(a)).join(\",\");\n  }\n\n  if (_.isDate(out)) {\n    return moment(out).utc().format();\n  }\n\n  if (_.isObject(out)) {\n    return JSON.stringify(out);\n  }\n\n  if (_.isString(out)) {\n    return out.replace(/\\n/g, \"\\\\n\");\n  }\n\n  if (out === false || out === 0) {\n    return out.toString();\n  }\n\n  return (out || \"\").toString();\n};\n\nconst quoteMark = '\"';\nconst doubleQuoteMark = '\"\"';\nconst quoteRegex = /\"/g;\n\nconst encodeCells = line => {\n  const row = line.slice(0);\n\n  for (var i = 0, len = row.length; i < len; i++) {\n    row[i] = cast(row[i]);\n\n    if (row[i].indexOf(quoteMark) !== -1) {\n      row[i] = quoteMark + row[i].replace(quoteRegex, doubleQuoteMark) + quoteMark;\n    } else if (row[i].indexOf(\",\") !== -1 || row[i].indexOf(\"\\\\n\") !== -1) {\n      row[i] = quoteMark + row[i] + quoteMark;\n    }\n  }\n\n  return row.join(\",\") + \"\\n\";\n};\n\nconst batch = function (coll) {\n  let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let sort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n  return iterator => {\n    let skip = 0,\n        records;\n\n    while (!records || records.length > 0) {\n      records = coll.find(query, {\n        sort,\n        limit,\n        skip\n      }).fetch();\n      records.forEach(iterator);\n      skip += limit;\n    }\n  };\n};\n\nWebApp.connectHandlers.use(\"/admin/export\", (req, res, next) => {\n  //\n  // Authentication\n  //\n  const loginToken = req.cookies && req.cookies.meteor_login_token;\n  let user;\n\n  if (loginToken) {\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    const query = {\n      \"services.resume.loginTokens.hashedToken\": hashedToken\n    };\n    const options = {\n      fields: {\n        _id: 1\n      }\n    };\n    user = Meteor.users.findOne(query, options);\n  }\n\n  if (!user) {\n    res.writeHead(403);\n    res.end();\n    return;\n  } //\n  // Format\n  //\n\n\n  let format;\n\n  switch (true) {\n    case req.url === \"/\":\n      next();\n      return;\n\n    case req.url.includes(\"/.json\"):\n      format = \"json\";\n      break;\n\n    case req.url.includes(\"/.jsonl\"):\n      format = \"jsonl\";\n      break;\n\n    case req.url.includes(\"/.csv\"):\n      format = \"csv\";\n      break;\n\n    default:\n      res.writeHead(404);\n      res.end();\n      return;\n  } //\n  // Connection bookkeeping\n  //\n\n\n  let cancelRequest = false,\n      requestFinished = false;\n  req.on(\"close\", function (err) {\n    if (!requestFinished) {\n      log.info(\"Export request was cancelled\");\n      cancelRequest = true;\n    }\n  }); //\n  // Headers\n  //\n\n  const ts = moment().format(\"YYYY-MM-DD HH-mm-ss\");\n  const filename = \"Empirica Data - \".concat(ts);\n  res.setHeader(\"Content-Disposition\", contentDisposition(filename + \".zip\"));\n  res.setHeader(\"Content-Type\", \"application/zip\");\n  res.writeHead(200); //\n  // Create archive\n  //\n\n  var archive = archiver(\"zip\"); // good practice to catch warnings (ie stat failures and other non-blocking errors)\n\n  archive.on(\"warning\", function (err) {\n    if (err.code === \"ENOENT\") {\n      log.warn(\"archive warning\", err);\n    } else {\n      log.err(\"archive error\"); // throw error\n\n      throw err;\n    }\n  }); // good practice to catch this error explicitly\n\n  archive.on(\"error\", function (err) {\n    log.err(\"archive error\");\n    throw err;\n  }); // pipe archive data to the file\n\n  archive.pipe(res); //\n  // File creation helper\n  //\n\n  const existingFile = {};\n\n  const saveFile = function (name, keys, func) {\n    let dataKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    if (existingFile[name]) {\n      throw \"export filename already exists: \".concat(name);\n    }\n\n    existingFile[name] = true;\n    const file = new streams.ReadableStreamBuffer();\n    archive.append(file, {\n      name: \"\".concat(filename, \"/\").concat(name, \".\").concat(format)\n    });\n\n    if (format === \"csv\") {\n      file.put(BOM);\n      file.put(encodeCells(keys.concat(dataKeys.map(k => \"data.\".concat(k)))));\n    }\n\n    format === \"json\" && file.put(\"[\");\n    let isFirstLine = true;\n    func(function (data) {\n      let userData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      switch (format) {\n        case \"csv\":\n          const out = [];\n          keys.forEach(k => {\n            out.push(data[k]);\n          });\n          dataKeys.forEach(k => {\n            out.push(userData[k]);\n          });\n          file.put(encodeCells(out));\n          break;\n\n        case \"jsonl\":\n          _.each(userData, (v, k) => data[\"data.\".concat(k)] = v);\n\n          file.put(JSON.stringify(data) + \"\\n\");\n          break;\n\n        case \"json\":\n          _.each(userData, (v, k) => data[\"data.\".concat(k)] = v);\n\n          if (isFirstLine) {\n            isFirstLine = false;\n            file.put(\"\\t\" + JSON.stringify(data));\n          } else {\n            file.put(\",\\t\" + JSON.stringify(data));\n          }\n\n          break;\n\n        default:\n          throw \"unknown format: \".concat(format);\n      }\n    });\n    format === \"json\" && file.put(\"\\n]\");\n    file.stop();\n  }; //\n  // Exports\n  //\n\n\n  const factorTypeFields = [\"_id\", \"name\", \"required\", \"description\", \"type\", \"min\", \"max\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"factor-types\", factorTypeFields, puts => {\n    FactorTypes.find().forEach(ft => puts(_.pick(ft, factorTypeFields)));\n  });\n  const factorFields = [\"_id\", \"name\", \"value\", \"factorTypeId\", \"createdAt\"];\n  saveFile(\"factors\", factorFields, puts => {\n    batch(Factors)(f => puts(_.pick(f, factorFields)));\n  });\n  const treatmentFields = [\"_id\", \"name\", \"factorIds\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"treatments\", treatmentFields, puts => {\n    batch(Treatments)(f => puts(_.pick(f, treatmentFields)));\n  });\n  const lobbyConfigFields = [\"_id\", \"name\", \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"extendCount\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"lobby-configs\", lobbyConfigFields, puts => {\n    batch(LobbyConfigs)(f => puts(_.pick(f, lobbyConfigFields)));\n  });\n  const batchFields = [\"_id\", \"index\", \"assignment\", \"full\", \"runningAt\", \"finishedAt\", \"status\", \"gameIds\", \"gameLobbyIds\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"batches\", batchFields, puts => {\n    batch(Batches)(f => puts(_.pick(f, batchFields)));\n  });\n  const gameLobbyFields = [\"_id\", \"index\", \"availableCount\", \"timeoutStartedAt\", \"timedOutAt\", \"queuedPlayerIds\", \"playerIds\", \"gameId\", \"treatmentId\", \"batchId\", \"lobbyConfigId\", \"createdAt\"];\n  saveFile(\"game-lobbies\", gameLobbyFields, puts => {\n    batch(GameLobbies)(f => puts(_.pick(f, gameLobbyFields)));\n  });\n  const gameFields = [\"_id\", \"finishedAt\", \"gameLobbyId\", \"treatmentId\", \"roundIds\", \"playerIds\", \"batchId\", \"createdAt\"];\n  const gameDataFields = getDataKeys(Games);\n  saveFile(\"games\", gameFields, puts => {\n    batch(Games)(f => puts(_.pick(f, gameFields), _.pick(f.data, gameDataFields)));\n  }, gameDataFields);\n  const playerFields = [\"_id\", \"bot\", \"readyAt\", \"timeoutStartedAt\", \"timeoutWaitCount\", \"exitStepsDone\", \"exitAt\", \"exitStatus\", \"exitReason\", \"retiredAt\", \"retiredReason\", \"createdAt\"];\n\n  if (req.query.include_pii === \"true\") {\n    playerFields.splice(1, 0, \"id\", \"urlParams\");\n    playerFields.splice(playerFields.length, 0, \"lastLogin\");\n  }\n\n  const playerDataFields = getDataKeys(Players);\n  saveFile(\"players\", playerFields, puts => {\n    batch(Players)(p => puts(_.pick(p, playerFields), _.pick(p.data, playerDataFields)));\n  }, playerDataFields);\n  const roundFields = [\"_id\", \"index\", \"stageIds\", \"gameId\", \"createdAt\"];\n  const roundDataFields = getDataKeys(Rounds);\n  saveFile(\"rounds\", roundFields, puts => {\n    batch(Rounds)(p => puts(_.pick(p, roundFields), _.pick(p.data, roundDataFields)));\n  }, roundDataFields);\n  const stageFields = [\"_id\", \"index\", \"name\", \"displayName\", \"startTimeAt\", \"durationInSeconds\", \"roundId\", \"gameId\", \"createdAt\"];\n  const stageDataFields = getDataKeys(Stages);\n  saveFile(\"stages\", stageFields, puts => {\n    batch(Stages)(p => puts(_.pick(p, stageFields), _.pick(p.data, stageDataFields)));\n  }, stageDataFields);\n  const playerRoundFields = [\"_id\", \"batchId\", \"playerId\", \"roundId\", \"gameId\", \"createdAt\"];\n  const playerRoundDataFields = getDataKeys(PlayerRounds);\n  saveFile(\"player-rounds\", playerRoundFields, puts => {\n    batch(PlayerRounds)(p => puts(_.pick(p, playerRoundFields), _.pick(p.data, playerRoundDataFields)));\n  }, playerRoundDataFields);\n  const playerStageFields = [\"_id\", \"batchId\", \"playerId\", \"stageId\", \"roundId\", \"gameId\", \"createdAt\", \"submittedAt\"];\n  const playerStageDataFields = getDataKeys(PlayerStages);\n  saveFile(\"player-stages\", playerStageFields, puts => {\n    batch(PlayerStages)(p => puts(_.pick(p, playerStageFields), _.pick(p.data, playerStageDataFields)));\n  }, playerStageDataFields);\n  const playerInputFields = [\"_id\", \"playerId\", \"gameId\", \"createdAt\"];\n  const playerInputDataFields = getDataKeys(PlayerInputs);\n  saveFile(\"player-inputs\", playerInputFields, puts => {\n    batch(PlayerInputs)(p => puts(_.pick(p, playerInputFields), _.pick(p.data, playerInputDataFields)));\n  }, playerInputDataFields);\n  const playerLogFields = [\"_id\", \"playerId\", \"gameId\", \"roundId\", \"stageId\", \"name\", \"jsonData\", \"createdAt\"];\n  saveFile(\"player-logs\", playerLogFields, puts => {\n    batch(PlayerLogs)(p => puts(_.pick(p, playerLogFields)));\n  });\n  archive.finalize();\n  requestFinished = true;\n});","map":{"version":3,"sources":["packages/empirica:core/startup/server/export.js"],"names":["module","export","BOM","cast","quoteMark","doubleQuoteMark","quoteRegex","encodeCells","archiver","link","default","v","contentDisposition","moment","streams","Batches","FactorTypes","Factors","GameLobbies","Games","LobbyConfigs","PlayerInputs","PlayerLogs","PlayerRounds","PlayerStages","Players","Rounds","Stages","Treatments","log","getDataKeys","coll","map","find","fields","data","forEach","record","_","keys","key","out","isArray","a","join","isDate","utc","format","isObject","JSON","stringify","isString","replace","toString","line","row","slice","i","len","length","indexOf","batch","query","sort","limit","iterator","skip","records","fetch","WebApp","connectHandlers","use","req","res","next","loginToken","cookies","meteor_login_token","user","hashedToken","Accounts","_hashLoginToken","options","_id","Meteor","users","findOne","writeHead","end","url","includes","cancelRequest","requestFinished","on","err","info","ts","filename","setHeader","archive","code","warn","pipe","existingFile","saveFile","name","func","dataKeys","file","ReadableStreamBuffer","append","put","concat","k","isFirstLine","userData","push","each","stop","factorTypeFields","puts","ft","pick","factorFields","f","treatmentFields","lobbyConfigFields","batchFields","gameLobbyFields","gameFields","gameDataFields","playerFields","include_pii","splice","playerDataFields","p","roundFields","roundDataFields","stageFields","stageDataFields","playerRoundFields","playerRoundDataFields","playerStageFields","playerStageDataFields","playerInputFields","playerInputDataFields","playerLogFields","finalize"],"mappings":"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","sourcesContent":["import archiver from \"archiver\";\nimport contentDisposition from \"content-disposition\";\nimport moment from \"moment\";\nimport streams from \"stream-buffers\";\nimport { Batches } from \"../../api/batches/batches.js\";\nimport { FactorTypes } from \"../../api/factor-types/factor-types.js\";\nimport { Factors } from \"../../api/factors/factors.js\";\nimport { GameLobbies } from \"../../api/game-lobbies/game-lobbies.js\";\nimport { Games } from \"../../api/games/games.js\";\nimport { LobbyConfigs } from \"../../api/lobby-configs/lobby-configs.js\";\nimport { PlayerInputs } from \"../../api/player-inputs/player-inputs.js\";\nimport { PlayerLogs } from \"../../api/player-logs/player-logs.js\";\nimport { PlayerRounds } from \"../../api/player-rounds/player-rounds.js\";\nimport { PlayerStages } from \"../../api/player-stages/player-stages.js\";\nimport { Players } from \"../../api/players/players.js\";\nimport { Rounds } from \"../../api/rounds/rounds.js\";\nimport { Stages } from \"../../api/stages/stages.js\";\nimport { Treatments } from \"../../api/treatments/treatments.js\";\nimport log from \"../../lib/log.js\";\n\nexport const BOM = \"\\uFEFF\";\n\n// Get all possible keys in the data field of collections that have a data field\n// such as Players, PlayerStages and PlayerRounds.\nconst getDataKeys = coll => {\n  const map = {};\n  coll.find({}, { fields: { data: 1 } }).forEach(record => {\n    _.keys(record.data).forEach(key => (map[key] = true));\n  });\n  return _.keys(map);\n};\n\nexport const cast = out => {\n  if (_.isArray(out)) {\n    // The cast here will flatten arrays but will still catch dates correctly\n    return out.map(a => cast(a)).join(\",\");\n  }\n  if (_.isDate(out)) {\n    return moment(out)\n      .utc()\n      .format();\n  }\n  if (_.isObject(out)) {\n    return JSON.stringify(out);\n  }\n  if (_.isString(out)) {\n    return out.replace(/\\n/g, \"\\\\n\");\n  }\n\n  if (out === false || out === 0) {\n    return out.toString();\n  }\n  return (out || \"\").toString();\n};\n\nexport const quoteMark = '\"';\nexport const doubleQuoteMark = '\"\"';\nexport const quoteRegex = /\"/g;\n\nexport const encodeCells = line => {\n  const row = line.slice(0);\n  for (var i = 0, len = row.length; i < len; i++) {\n    row[i] = cast(row[i]);\n    if (row[i].indexOf(quoteMark) !== -1) {\n      row[i] =\n        quoteMark + row[i].replace(quoteRegex, doubleQuoteMark) + quoteMark;\n    } else if (row[i].indexOf(\",\") !== -1 || row[i].indexOf(\"\\\\n\") !== -1) {\n      row[i] = quoteMark + row[i] + quoteMark;\n    }\n  }\n  return row.join(\",\") + \"\\n\";\n};\n\nconst batch = (coll, query = {}, sort = {}, limit = 1000) => iterator => {\n  let skip = 0,\n    records;\n  while (!records || records.length > 0) {\n    records = coll.find(query, { sort, limit, skip }).fetch();\n    records.forEach(iterator);\n    skip += limit;\n  }\n};\n\nWebApp.connectHandlers.use(\"/admin/export\", (req, res, next) => {\n  //\n  // Authentication\n  //\n\n  const loginToken = req.cookies && req.cookies.meteor_login_token;\n  let user;\n  if (loginToken) {\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n    const query = { \"services.resume.loginTokens.hashedToken\": hashedToken };\n    const options = { fields: { _id: 1 } };\n    user = Meteor.users.findOne(query, options);\n  }\n\n  if (!user) {\n    res.writeHead(403);\n    res.end();\n    return;\n  }\n\n  //\n  // Format\n  //\n\n  let format;\n  switch (true) {\n    case req.url === \"/\":\n      next();\n      return;\n    case req.url.includes(\"/.json\"):\n      format = \"json\";\n      break;\n    case req.url.includes(\"/.jsonl\"):\n      format = \"jsonl\";\n      break;\n    case req.url.includes(\"/.csv\"):\n      format = \"csv\";\n      break;\n    default:\n      res.writeHead(404);\n      res.end();\n      return;\n  }\n\n  //\n  // Connection bookkeeping\n  //\n\n  let cancelRequest = false,\n    requestFinished = false;\n\n  req.on(\"close\", function(err) {\n    if (!requestFinished) {\n      log.info(\"Export request was cancelled\");\n      cancelRequest = true;\n    }\n  });\n\n  //\n  // Headers\n  //\n\n  const ts = moment().format(\"YYYY-MM-DD HH-mm-ss\");\n  const filename = `Empirica Data - ${ts}`;\n  res.setHeader(\"Content-Disposition\", contentDisposition(filename + \".zip\"));\n  res.setHeader(\"Content-Type\", \"application/zip\");\n  res.writeHead(200);\n\n  //\n  // Create archive\n  //\n\n  var archive = archiver(\"zip\");\n\n  // good practice to catch warnings (ie stat failures and other non-blocking errors)\n  archive.on(\"warning\", function(err) {\n    if (err.code === \"ENOENT\") {\n      log.warn(\"archive warning\", err);\n    } else {\n      log.err(\"archive error\");\n      // throw error\n      throw err;\n    }\n  });\n\n  // good practice to catch this error explicitly\n  archive.on(\"error\", function(err) {\n    log.err(\"archive error\");\n    throw err;\n  });\n\n  // pipe archive data to the file\n  archive.pipe(res);\n\n  //\n  // File creation helper\n  //\n\n  const existingFile = {};\n  const saveFile = (name, keys, func, dataKeys = []) => {\n    if (existingFile[name]) {\n      throw `export filename already exists: ${name}`;\n    }\n    existingFile[name] = true;\n\n    const file = new streams.ReadableStreamBuffer();\n    archive.append(file, { name: `${filename}/${name}.${format}` });\n    if (format === \"csv\") {\n      file.put(BOM);\n      file.put(encodeCells(keys.concat(dataKeys.map(k => `data.${k}`))));\n    }\n\n    format === \"json\" && file.put(\"[\");\n\n    let isFirstLine = true;\n\n    func((data, userData = {}) => {\n      switch (format) {\n        case \"csv\":\n          const out = [];\n          keys.forEach(k => {\n            out.push(data[k]);\n          });\n          dataKeys.forEach(k => {\n            out.push(userData[k]);\n          });\n          file.put(encodeCells(out));\n          break;\n        case \"jsonl\":\n          _.each(userData, (v, k) => (data[`data.${k}`] = v));\n          file.put(JSON.stringify(data) + \"\\n\");\n          break;\n        case \"json\":\n          _.each(userData, (v, k) => (data[`data.${k}`] = v));\n          if (isFirstLine) {\n            isFirstLine = false;\n            file.put(\"\\t\" + JSON.stringify(data));\n          } else {\n            file.put(\",\\t\" + JSON.stringify(data));\n          }\n          break;\n        default:\n          throw `unknown format: ${format}`;\n      }\n    });\n\n    format === \"json\" && file.put(\"\\n]\");\n\n    file.stop();\n  };\n\n  //\n  // Exports\n  //\n\n  const factorTypeFields = [\n    \"_id\",\n    \"name\",\n    \"required\",\n    \"description\",\n    \"type\",\n    \"min\",\n    \"max\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"factor-types\", factorTypeFields, puts => {\n    FactorTypes.find().forEach(ft => puts(_.pick(ft, factorTypeFields)));\n  });\n\n  const factorFields = [\"_id\", \"name\", \"value\", \"factorTypeId\", \"createdAt\"];\n  saveFile(\"factors\", factorFields, puts => {\n    batch(Factors)(f => puts(_.pick(f, factorFields)));\n  });\n\n  const treatmentFields = [\n    \"_id\",\n    \"name\",\n    \"factorIds\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"treatments\", treatmentFields, puts => {\n    batch(Treatments)(f => puts(_.pick(f, treatmentFields)));\n  });\n\n  const lobbyConfigFields = [\n    \"_id\",\n    \"name\",\n    \"timeoutType\",\n    \"timeoutInSeconds\",\n    \"timeoutStrategy\",\n    \"timeoutBots\",\n    \"extendCount\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"lobby-configs\", lobbyConfigFields, puts => {\n    batch(LobbyConfigs)(f => puts(_.pick(f, lobbyConfigFields)));\n  });\n\n  const batchFields = [\n    \"_id\",\n    \"index\",\n    \"assignment\",\n    \"full\",\n    \"runningAt\",\n    \"finishedAt\",\n    \"status\",\n    \"gameIds\",\n    \"gameLobbyIds\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"batches\", batchFields, puts => {\n    batch(Batches)(f => puts(_.pick(f, batchFields)));\n  });\n\n  const gameLobbyFields = [\n    \"_id\",\n    \"index\",\n    \"availableCount\",\n    \"timeoutStartedAt\",\n    \"timedOutAt\",\n    \"queuedPlayerIds\",\n    \"playerIds\",\n    \"gameId\",\n    \"treatmentId\",\n    \"batchId\",\n    \"lobbyConfigId\",\n    \"createdAt\"\n  ];\n  saveFile(\"game-lobbies\", gameLobbyFields, puts => {\n    batch(GameLobbies)(f => puts(_.pick(f, gameLobbyFields)));\n  });\n\n  const gameFields = [\n    \"_id\",\n    \"finishedAt\",\n    \"gameLobbyId\",\n    \"treatmentId\",\n    \"roundIds\",\n    \"playerIds\",\n    \"batchId\",\n    \"createdAt\"\n  ];\n  const gameDataFields = getDataKeys(Games);\n  saveFile(\n    \"games\",\n    gameFields,\n    puts => {\n      batch(Games)(f =>\n        puts(_.pick(f, gameFields), _.pick(f.data, gameDataFields))\n      );\n    },\n    gameDataFields\n  );\n\n  const playerFields = [\n    \"_id\",\n    \"bot\",\n    \"readyAt\",\n    \"timeoutStartedAt\",\n    \"timeoutWaitCount\",\n    \"exitStepsDone\",\n    \"exitAt\",\n    \"exitStatus\",\n    \"exitReason\",\n    \"retiredAt\",\n    \"retiredReason\",\n    \"createdAt\"\n  ];\n  if (req.query.include_pii === \"true\") {\n    playerFields.splice(1, 0, \"id\", \"urlParams\");\n    playerFields.splice(playerFields.length, 0, \"lastLogin\");\n  }\n\n  const playerDataFields = getDataKeys(Players);\n  saveFile(\n    \"players\",\n    playerFields,\n    puts => {\n      batch(Players)(p =>\n        puts(_.pick(p, playerFields), _.pick(p.data, playerDataFields))\n      );\n    },\n    playerDataFields\n  );\n\n  const roundFields = [\"_id\", \"index\", \"stageIds\", \"gameId\", \"createdAt\"];\n  const roundDataFields = getDataKeys(Rounds);\n  saveFile(\n    \"rounds\",\n    roundFields,\n    puts => {\n      batch(Rounds)(p =>\n        puts(_.pick(p, roundFields), _.pick(p.data, roundDataFields))\n      );\n    },\n    roundDataFields\n  );\n\n  const stageFields = [\n    \"_id\",\n    \"index\",\n    \"name\",\n    \"displayName\",\n    \"startTimeAt\",\n    \"durationInSeconds\",\n    \"roundId\",\n    \"gameId\",\n    \"createdAt\"\n  ];\n  const stageDataFields = getDataKeys(Stages);\n  saveFile(\n    \"stages\",\n    stageFields,\n    puts => {\n      batch(Stages)(p =>\n        puts(_.pick(p, stageFields), _.pick(p.data, stageDataFields))\n      );\n    },\n    stageDataFields\n  );\n\n  const playerRoundFields = [\n    \"_id\",\n    \"batchId\",\n    \"playerId\",\n    \"roundId\",\n    \"gameId\",\n    \"createdAt\"\n  ];\n  const playerRoundDataFields = getDataKeys(PlayerRounds);\n  saveFile(\n    \"player-rounds\",\n    playerRoundFields,\n    puts => {\n      batch(PlayerRounds)(p =>\n        puts(\n          _.pick(p, playerRoundFields),\n          _.pick(p.data, playerRoundDataFields)\n        )\n      );\n    },\n    playerRoundDataFields\n  );\n\n  const playerStageFields = [\n    \"_id\",\n    \"batchId\",\n    \"playerId\",\n    \"stageId\",\n    \"roundId\",\n    \"gameId\",\n    \"createdAt\",\n    \"submittedAt\"\n  ];\n  const playerStageDataFields = getDataKeys(PlayerStages);\n  saveFile(\n    \"player-stages\",\n    playerStageFields,\n    puts => {\n      batch(PlayerStages)(p =>\n        puts(\n          _.pick(p, playerStageFields),\n          _.pick(p.data, playerStageDataFields)\n        )\n      );\n    },\n    playerStageDataFields\n  );\n\n  const playerInputFields = [\"_id\", \"playerId\", \"gameId\", \"createdAt\"];\n  const playerInputDataFields = getDataKeys(PlayerInputs);\n  saveFile(\n    \"player-inputs\",\n    playerInputFields,\n    puts => {\n      batch(PlayerInputs)(p =>\n        puts(\n          _.pick(p, playerInputFields),\n          _.pick(p.data, playerInputDataFields)\n        )\n      );\n    },\n    playerInputDataFields\n  );\n\n  const playerLogFields = [\n    \"_id\",\n    \"playerId\",\n    \"gameId\",\n    \"roundId\",\n    \"stageId\",\n    \"name\",\n    \"jsonData\",\n    \"createdAt\"\n  ];\n  saveFile(\"player-logs\", playerLogFields, puts => {\n    batch(PlayerLogs)(p => puts(_.pick(p, playerLogFields)));\n  });\n\n  archive.finalize();\n  requestFinished = true;\n});\n"]},"sourceType":"module","hash":"5da442f1b0b75ae2241480862320efd18b1f2201"}
