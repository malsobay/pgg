{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewFactorType.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewFactorType.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewFactorType.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewFactorType.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewFactorType.jsx"}},"code":"module.export({\n  default: () => AdminNewFactorType\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Classes, Button, Dialog, FormGroup, HTMLSelect, Intent, NumericInput, Switch, TagInput, TextArea;\nmodule.link(\"@blueprintjs/core\", {\n  Classes(v) {\n    Classes = v;\n  },\n\n  Button(v) {\n    Button = v;\n  },\n\n  Dialog(v) {\n    Dialog = v;\n  },\n\n  FormGroup(v) {\n    FormGroup = v;\n  },\n\n  HTMLSelect(v) {\n    HTMLSelect = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  },\n\n  NumericInput(v) {\n    NumericInput = v;\n  },\n\n  Switch(v) {\n    Switch = v;\n  },\n\n  TagInput(v) {\n    TagInput = v;\n  },\n\n  TextArea(v) {\n    TextArea = v;\n  }\n\n}, 1);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"../../../api/factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet createFactorType;\nmodule.link(\"../../../api/factor-types/methods.js\", {\n  createFactorType(v) {\n    createFactorType = v;\n  }\n\n}, 4);\nlet AlertToaster;\nmodule.link(\"../Toasters.jsx\", {\n  AlertToaster(v) {\n    AlertToaster = v;\n  }\n\n}, 5);\nlet HelpTooltip;\nmodule.link(\"../HelpTooltip.jsx\", {\n  default(v) {\n    HelpTooltip = v;\n  }\n\n}, 6);\n\nclass AdminNewFactorType extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: \"String\",\n      name: \"\",\n      initialValues: [],\n      required: false\n    };\n\n    this.handleNumberUpdate = (name, value, valueAsString) => {\n      this.setState({\n        [name]: valueAsString\n      });\n    };\n\n    this.handleChange = event => {\n      const {\n        name,\n        value\n      } = event.currentTarget;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleChangeCheckbox = event => {\n      const {\n        name,\n        checked\n      } = event.currentTarget;\n      this.setState({\n        [name]: checked\n      });\n    };\n\n    this.handleNewFactorType = event => {\n      event.preventDefault();\n\n      if (this.stopsubmit) {\n        return;\n      }\n\n      let {\n        name,\n        description,\n        type,\n        min,\n        max,\n        initialValues,\n        required\n      } = this.state;\n      const {\n        onClose\n      } = this.props;\n      const params = {\n        name,\n        description,\n        type,\n        min,\n        max,\n        required\n      };\n      params.initialValues = initialValues.filter(v => !Factors.valueValidation(params, v));\n\n      if (params.min !== undefined) {\n        params.min = parseFloat(params.min);\n      }\n\n      if (params.max !== undefined) {\n        params.max = parseFloat(params.max);\n      }\n\n      createFactorType.call(params, err => {\n        if (err) {\n          AlertToaster.show({\n            message: err.reason || err.message || err.toString()\n          });\n          return;\n        }\n\n        onClose();\n        this.setState({\n          name: \"\",\n          description: \"\",\n          type: \"String\",\n          min: undefined,\n          max: undefined,\n          initialValues: [],\n          required: false\n        });\n      });\n    };\n\n    this.firstInputRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProp) {\n    if (this.props.isOpen && !prevProp.isOpen) {\n      setTimeout(() => {\n        const node = this.firstInputRef.current;\n\n        if (node) {\n          node.focus();\n        }\n      }, 100);\n    }\n  }\n\n  render() {\n    const {\n      isOpen,\n      onClose\n    } = this.props;\n    const {\n      name,\n      description,\n      type,\n      min,\n      max,\n      initialValues,\n      required\n    } = this.state;\n    const extraInputs = [];\n\n    switch (type) {\n      case \"Number\":\n      case \"Integer\":\n        extraInputs.push( /*#__PURE__*/React.createElement(FormGroup, {\n          key: \"min\",\n          label: \"Min\",\n          labelFor: \"min\",\n          helperText: \"Minimum accepted value\"\n        }, /*#__PURE__*/React.createElement(NumericInput, {\n          value: min,\n          onValueChange: this.handleNumberUpdate.bind(this, \"min\")\n        })));\n        extraInputs.push( /*#__PURE__*/React.createElement(FormGroup, {\n          key: \"max\",\n          label: \"Max\",\n          labelFor: \"max\",\n          helperText: \"Maximum accepted value.\"\n        }, /*#__PURE__*/React.createElement(NumericInput, {\n          value: max,\n          onValueChange: this.handleNumberUpdate.bind(this, \"max\")\n        })));\n        break;\n\n      case \"String\":\n        extraInputs.push( /*#__PURE__*/React.createElement(FormGroup, {\n          key: \"min\",\n          label: \"Min\",\n          labelFor: \"min\",\n          helperText: \"Minimum number of characters.\"\n        }, /*#__PURE__*/React.createElement(NumericInput, {\n          min: 1,\n          max: 1000000000000,\n          value: min,\n          onValueChange: this.handleNumberUpdate.bind(this, \"min\")\n        })));\n        extraInputs.push( /*#__PURE__*/React.createElement(FormGroup, {\n          key: \"max\",\n          label: \"Max\",\n          labelFor: \"max\",\n          helperText: \"Maximum number of characters.\"\n        }, /*#__PURE__*/React.createElement(NumericInput, {\n          min: 1,\n          max: 1000000000000,\n          value: max,\n          onValueChange: this.handleNumberUpdate.bind(this, \"max\")\n        })));\n        break;\n\n      case \"Boolean\":\n        break;\n\n      default:\n        console.error(\"New factor unsupported type:\", type.stringType);\n        break;\n    }\n\n    return /*#__PURE__*/React.createElement(Dialog, {\n      icon: IconNames.PROPERTY,\n      isOpen: isOpen,\n      onClose: onClose,\n      title: \"New Factor\"\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"new-factor-type\" //\n      ,\n      onSubmit: this.handleNewFactorType\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Type\",\n      labelFor: \"type\",\n      labelInfo: /*#__PURE__*/React.createElement(HelpTooltip, {\n        content: /*#__PURE__*/React.createElement(\"div\", null, \"There are 4 types:\", /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"String:\"), \" either any string value, with. the possibility to set a min and max number of characters, or a fixed set of values (allowed values).\"), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Integer:\"), \" An integer value, with optional min and/or max values.\"), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Number:\"), \" A Number works like Integer and adds support for decimal numbers.\"), /*#__PURE__*/React.createElement(\"li\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Boolean:\"), \" A Boolean will support only true or false values.\")))\n      })\n    }, /*#__PURE__*/React.createElement(HTMLSelect, {\n      name: \"type\",\n      id: \"type\",\n      onChange: this.handleChange,\n      value: type,\n      options: FactorTypes.types\n    })), /*#__PURE__*/React.createElement(Switch, {\n      label: \"Required\",\n      name: \"required\",\n      checked: required,\n      onChange: this.handleChangeCheckbox\n    }), /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Name\",\n      labelFor: \"name\",\n      helperText: /*#__PURE__*/React.createElement(React.Fragment, null, \"Format: \", /*#__PURE__*/React.createElement(\"code\", null, \"camelCase\"), \". Only letters and numbers, with leading lowercase letters.\"),\n      labelInfo: \"(required)\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: Classes.INPUT,\n      dir: \"auto\",\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      autoComplete: \"off\",\n      value: name,\n      pattern: /^[a-zA-Z0-9_]+$/.source,\n      onChange: this.handleChange,\n      required: true,\n      ref: this.firstInputRef\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Description\",\n      labelFor: \"description\",\n      labelInfo: \"(required)\" // helperText={<>Format: <code>camelCase</code>. Only letters and numbers, with leading lowercase letters.<>}\n\n    }, /*#__PURE__*/React.createElement(TextArea, {\n      required: true,\n      fill: true,\n      id: \"description\",\n      name: \"description\",\n      onChange: this.handleChange,\n      value: description\n    })), extraInputs), /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER_ACTIONS\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      text: \"Create Factor\",\n      intent: Intent.PRIMARY // onClick={this.handleNewFactorType}\n\n    })))));\n  }\n\n}","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminNewFactorType.jsx"],"names":["module","export","default","AdminNewFactorType","React","link","v","Classes","Button","Dialog","FormGroup","HTMLSelect","Intent","NumericInput","Switch","TagInput","TextArea","IconNames","FactorTypes","createFactorType","AlertToaster","HelpTooltip","Component","constructor","props","state","type","name","initialValues","required","handleNumberUpdate","value","valueAsString","setState","handleChange","event","currentTarget","handleChangeCheckbox","checked","handleNewFactorType","preventDefault","stopsubmit","description","min","max","onClose","params","filter","Factors","valueValidation","undefined","parseFloat","call","err","show","message","reason","toString","firstInputRef","createRef","componentDidUpdate","prevProp","isOpen","setTimeout","node","current","focus","render","extraInputs","push","bind","console","error","stringType","PROPERTY","DIALOG_BODY","types","INPUT","source","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {\n  Classes,\n  Button,\n  Dialog,\n  FormGroup,\n  HTMLSelect,\n  Intent,\n  NumericInput,\n  Switch,\n  TagInput,\n  TextArea\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport { FactorTypes } from \"../../../api/factor-types/factor-types.js\";\nimport { createFactorType } from \"../../../api/factor-types/methods.js\";\nimport { AlertToaster } from \"../Toasters.jsx\";\nimport HelpTooltip from \"../HelpTooltip.jsx\";\n\nexport default class AdminNewFactorType extends React.Component {\n  state = { type: \"String\", name: \"\", initialValues: [], required: false };\n  constructor(props) {\n    super(props);\n    this.firstInputRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProp) {\n    if (this.props.isOpen && !prevProp.isOpen) {\n      setTimeout(() => {\n        const node = this.firstInputRef.current;\n        if (node) {\n          node.focus();\n        }\n      }, 100);\n    }\n  }\n\n  handleNumberUpdate = (name, value, valueAsString) => {\n    this.setState({ [name]: valueAsString });\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleChangeCheckbox = event => {\n    const { name, checked } = event.currentTarget;\n    this.setState({ [name]: checked });\n  };\n\n  handleNewFactorType = event => {\n    event.preventDefault();\n    if (this.stopsubmit) {\n      return;\n    }\n    let {\n      name,\n      description,\n      type,\n      min,\n      max,\n      initialValues,\n      required\n    } = this.state;\n    const { onClose } = this.props;\n\n    const params = {\n      name,\n      description,\n      type,\n      min,\n      max,\n      required\n    };\n\n    params.initialValues = initialValues.filter(\n      v => !Factors.valueValidation(params, v)\n    );\n\n    if (params.min !== undefined) {\n      params.min = parseFloat(params.min);\n    }\n\n    if (params.max !== undefined) {\n      params.max = parseFloat(params.max);\n    }\n\n    createFactorType.call(params, err => {\n      if (err) {\n        AlertToaster.show({\n          message: err.reason || err.message || err.toString()\n        });\n        return;\n      }\n      onClose();\n      this.setState({\n        name: \"\",\n        description: \"\",\n        type: \"String\",\n        min: undefined,\n        max: undefined,\n        initialValues: [],\n        required: false\n      });\n    });\n  };\n\n  render() {\n    const { isOpen, onClose } = this.props;\n    const {\n      name,\n      description,\n      type,\n      min,\n      max,\n      initialValues,\n      required\n    } = this.state;\n\n    const extraInputs = [];\n    switch (type) {\n      case \"Number\":\n      case \"Integer\":\n        extraInputs.push(\n          <FormGroup\n            key=\"min\"\n            label=\"Min\"\n            labelFor=\"min\"\n            helperText=\"Minimum accepted value\"\n          >\n            <NumericInput\n              value={min}\n              onValueChange={this.handleNumberUpdate.bind(this, \"min\")}\n            />\n          </FormGroup>\n        );\n\n        extraInputs.push(\n          <FormGroup\n            key=\"max\"\n            label=\"Max\"\n            labelFor=\"max\"\n            helperText=\"Maximum accepted value.\"\n          >\n            <NumericInput\n              value={max}\n              onValueChange={this.handleNumberUpdate.bind(this, \"max\")}\n            />\n          </FormGroup>\n        );\n        break;\n      case \"String\":\n        extraInputs.push(\n          <FormGroup\n            key=\"min\"\n            label=\"Min\"\n            labelFor=\"min\"\n            helperText=\"Minimum number of characters.\"\n          >\n            <NumericInput\n              min={1}\n              max={1000000000000}\n              value={min}\n              onValueChange={this.handleNumberUpdate.bind(this, \"min\")}\n            />\n          </FormGroup>\n        );\n\n        extraInputs.push(\n          <FormGroup\n            key=\"max\"\n            label=\"Max\"\n            labelFor=\"max\"\n            helperText=\"Maximum number of characters.\"\n          >\n            <NumericInput\n              min={1}\n              max={1000000000000}\n              value={max}\n              onValueChange={this.handleNumberUpdate.bind(this, \"max\")}\n            />\n          </FormGroup>\n        );\n\n        break;\n      case \"Boolean\":\n        break;\n      default:\n        console.error(\"New factor unsupported type:\", type.stringType);\n        break;\n    }\n\n    return (\n      <Dialog\n        icon={IconNames.PROPERTY}\n        isOpen={isOpen}\n        onClose={onClose}\n        title=\"New Factor\"\n      >\n        <form\n          className=\"new-factor-type\"\n          //\n          onSubmit={this.handleNewFactorType}\n        >\n          <div className={Classes.DIALOG_BODY}>\n            <FormGroup\n              label=\"Type\"\n              labelFor=\"type\"\n              labelInfo={\n                <HelpTooltip\n                  content={\n                    <div>\n                      There are 4 types:\n                      <ul>\n                        <li>\n                          <strong>String:</strong> either any string value,\n                          with. the possibility to set a min and max number of\n                          characters, or a fixed set of values (allowed values).\n                        </li>\n                        <li>\n                          <strong>Integer:</strong> An integer value, with\n                          optional min and/or max values.\n                        </li>\n                        <li>\n                          <strong>Number:</strong> A Number works like Integer\n                          and adds support for decimal numbers.\n                        </li>\n                        <li>\n                          <strong>Boolean:</strong> A Boolean will support only\n                          true or false values.\n                        </li>\n                      </ul>\n                    </div>\n                  }\n                />\n              }\n            >\n              <HTMLSelect\n                name=\"type\"\n                id=\"type\"\n                onChange={this.handleChange}\n                value={type}\n                options={FactorTypes.types}\n              />\n            </FormGroup>\n\n            <Switch\n              label=\"Required\"\n              name=\"required\"\n              checked={required}\n              onChange={this.handleChangeCheckbox}\n            />\n\n            <FormGroup\n              label=\"Name\"\n              labelFor=\"name\"\n              helperText={\n                <>\n                  Format: <code>camelCase</code>. Only letters and numbers, with\n                  leading lowercase letters.\n                </>\n              }\n              labelInfo=\"(required)\"\n            >\n              <input\n                className={Classes.INPUT}\n                dir=\"auto\"\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                autoComplete=\"off\"\n                value={name}\n                pattern={/^[a-zA-Z0-9_]+$/.source}\n                onChange={this.handleChange}\n                required\n                ref={this.firstInputRef}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label=\"Description\"\n              labelFor=\"description\"\n              labelInfo=\"(required)\"\n              // helperText={<>Format: <code>camelCase</code>. Only letters and numbers, with leading lowercase letters.<>}\n            >\n              <TextArea\n                required\n                fill\n                id=\"description\"\n                name=\"description\"\n                onChange={this.handleChange}\n                value={description}\n              />\n            </FormGroup>\n\n            {extraInputs}\n\n            {/* {type === \"Boolean\" ? null : (\n              <FormGroup\n                key=\"initialValues\"\n                label=\"Initial Values\"\n                labelFor=\"initialValues\"\n                helperText=\"List of initial values to create with the new Factor.\"\n              >\n                <TagInput\n                  inputProps={{\n                    onFocus: () => {\n                      this.stopsubmit = true;\n                    },\n                    onBlur: () => {\n                      this.stopsubmit = false;\n                    }\n                  }}\n                  addOnBlur\n                  onChange={value => this.setState({ initialValues: value })}\n                  values={initialValues}\n                />\n              </FormGroup>\n            )} */}\n          </div>\n          <div className={Classes.DIALOG_FOOTER}>\n            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n              <Button\n                type=\"submit\"\n                text=\"Create Factor\"\n                intent={Intent.PRIMARY}\n                // onClick={this.handleNewFactorType}\n              />\n            </div>\n          </div>\n        </form>\n      </Dialog>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"aa4e9d307e1715b10ac6249a60715461ab792211"}
