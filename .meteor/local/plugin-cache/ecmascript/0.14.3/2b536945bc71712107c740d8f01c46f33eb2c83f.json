{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/mizzao:timesync/timesync-client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/mizzao:timesync/timesync-client.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/mizzao:timesync/timesync-client.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/mizzao:timesync/timesync-client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mizzao:timesync/timesync-client.js"}},"code":"//IE8 doesn't have Date.now()\nDate.now = Date.now || function () {\n  return +new Date();\n};\n\nTimeSync = {\n  loggingEnabled: true\n};\n\nfunction log()\n/* arguments */\n{\n  if (TimeSync.loggingEnabled) {\n    Meteor._debug.apply(this, arguments);\n  }\n}\n\nvar defaultInterval = 1000; // Internal values, exported for testing\n\nSyncInternals = {\n  offset: undefined,\n  roundTripTime: undefined,\n  offsetDep: new Deps.Dependency(),\n  syncDep: new Deps.Dependency(),\n  isSynced: false,\n  timeTick: {},\n  getDiscrepancy: function (lastTime, currentTime, interval) {\n    return currentTime - (lastTime + interval);\n  }\n};\nSyncInternals.timeTick[defaultInterval] = new Deps.Dependency();\nvar maxAttempts = 5;\nvar attempts = 0;\n/*\n  This is an approximation of\n  http://en.wikipedia.org/wiki/Network_Time_Protocol\n\n  If this turns out to be more accurate under the connect handlers,\n  we should try taking multiple measurements.\n */\n\nvar syncUrl;\n\nif (Meteor.isCordova || Meteor.isDesktop) {\n  // Only use Meteor.absoluteUrl for Cordova and Desktop; see\n  // https://github.com/meteor/meteor/issues/4696\n  // https://github.com/mizzao/meteor-timesync/issues/30\n  // Cordova should never be running out of a subdirectory...\n  syncUrl = Meteor.absoluteUrl(\"_timesync\");\n} else {\n  // Support Meteor running in relative paths, based on computed root url prefix\n  // https://github.com/mizzao/meteor-timesync/pull/40\n  const basePath = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n  syncUrl = basePath + \"/_timesync\";\n}\n\nvar updateOffset = function () {\n  var t0 = Date.now();\n  HTTP.get(syncUrl, function (err, response) {\n    var t3 = Date.now(); // Grab this now\n\n    if (err) {\n      //  We'll still use our last computed offset if is defined\n      log(\"Error syncing to server time: \", err);\n      if (++attempts <= maxAttempts) Meteor.setTimeout(TimeSync.resync, 1000);else log(\"Max number of time sync attempts reached. Giving up.\");\n      return;\n    }\n\n    attempts = 0; // It worked\n\n    var ts = parseInt(response.content);\n    SyncInternals.isSynced = true;\n    SyncInternals.offset = Math.round((ts - t0 + (ts - t3)) / 2);\n    SyncInternals.roundTripTime = t3 - t0; // - (ts - ts) which is 0\n\n    SyncInternals.offsetDep.changed();\n  });\n}; // Reactive variable for server time that updates every second.\n\n\nTimeSync.serverTime = function (clientTime, interval) {\n  check(interval, Match.Optional(Match.Integer)); // If a client time is provided, we don't need to depend on the tick.\n\n  if (!clientTime) getTickDependency(interval || defaultInterval).depend();\n  SyncInternals.offsetDep.depend(); // depend on offset to enable reactivity\n  // Convert Date argument to epoch as necessary\n\n  return (+clientTime || Date.now()) + SyncInternals.offset;\n}; // Reactive variable for the difference between server and client time.\n\n\nTimeSync.serverOffset = function () {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.offset;\n};\n\nTimeSync.roundTripTime = function () {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.roundTripTime;\n};\n\nTimeSync.isSynced = function () {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.isSynced;\n};\n\nvar resyncIntervalId = null;\n\nTimeSync.resync = function () {\n  if (resyncIntervalId !== null) Meteor.clearInterval(resyncIntervalId);\n  updateOffset();\n  resyncIntervalId = Meteor.setInterval(updateOffset, 600000);\n}; // Run this as soon as we load, even before Meteor.startup()\n// Run again whenever we reconnect after losing connection\n\n\nvar wasConnected = false;\nDeps.autorun(function () {\n  var connected = Meteor.status().connected;\n  if (connected && !wasConnected) TimeSync.resync();\n  wasConnected = connected;\n}); // Resync if unexpected change by more than a few seconds. This needs to be\n// somewhat lenient, or a CPU-intensive operation can trigger a re-sync even\n// when the offset is still accurate. In any case, we're not going to be able to\n// catch very small system-initiated NTP adjustments with this, anyway.\n\nvar tickCheckTolerance = 5000;\nvar lastClientTime = Date.now(); // Set up a new interval for any amount of reactivity.\n\nfunction getTickDependency(interval) {\n  if (!SyncInternals.timeTick[interval]) {\n    var dep = new Deps.Dependency();\n    Meteor.setInterval(function () {\n      dep.changed();\n    }, interval);\n    SyncInternals.timeTick[interval] = dep;\n  }\n\n  return SyncInternals.timeTick[interval];\n} // Set up special interval for the default tick, which also watches for re-sync\n\n\nMeteor.setInterval(function () {\n  var currentClientTime = Date.now();\n  var discrepancy = SyncInternals.getDiscrepancy(lastClientTime, currentClientTime, defaultInterval);\n\n  if (Math.abs(discrepancy) < tickCheckTolerance) {\n    // No problem here, just keep ticking along\n    SyncInternals.timeTick[defaultInterval].changed();\n  } else {\n    // resync on major client clock changes\n    // based on http://stackoverflow.com/a/3367542/1656818\n    log(\"Clock discrepancy detected. Attempting re-sync.\"); // Refuse to compute server time and try to guess new server offset. Guessing only works if the server time hasn't changed.\n\n    SyncInternals.offset = SyncInternals.offset - discrepancy;\n    SyncInternals.isSynced = false;\n    SyncInternals.offsetDep.changed();\n    TimeSync.resync();\n  }\n\n  lastClientTime = currentClientTime;\n}, defaultInterval);","map":{"version":3,"sources":["packages/mizzao:timesync/timesync-client.js"],"names":["Date","now","TimeSync","loggingEnabled","log","Meteor","_debug","apply","arguments","defaultInterval","SyncInternals","offset","undefined","roundTripTime","offsetDep","Deps","Dependency","syncDep","isSynced","timeTick","getDiscrepancy","lastTime","currentTime","interval","maxAttempts","attempts","syncUrl","isCordova","isDesktop","absoluteUrl","basePath","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","updateOffset","t0","HTTP","get","err","response","t3","setTimeout","resync","ts","parseInt","content","Math","round","changed","serverTime","clientTime","check","Match","Optional","Integer","getTickDependency","depend","serverOffset","resyncIntervalId","clearInterval","setInterval","wasConnected","autorun","connected","status","tickCheckTolerance","lastClientTime","dep","currentClientTime","discrepancy","abs"],"mappings":"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","sourcesContent":["//IE8 doesn't have Date.now()\nDate.now = Date.now || function() { return +new Date; };\n\nTimeSync = {\n  loggingEnabled: true\n};\n\nfunction log(/* arguments */) {\n  if (TimeSync.loggingEnabled) {\n    Meteor._debug.apply(this, arguments);\n  }\n}\n\nvar defaultInterval = 1000;\n\n// Internal values, exported for testing\nSyncInternals = {\n  offset: undefined,\n  roundTripTime: undefined,\n  offsetDep: new Deps.Dependency(),\n  syncDep: new Deps.Dependency(),\n  isSynced: false,\n  timeTick: {},\n  getDiscrepancy: function (lastTime, currentTime, interval) {\n    return currentTime - (lastTime + interval)\n  }\n};\n\nSyncInternals.timeTick[defaultInterval] = new Deps.Dependency();\n\nvar maxAttempts = 5;\nvar attempts = 0;\n\n/*\n  This is an approximation of\n  http://en.wikipedia.org/wiki/Network_Time_Protocol\n\n  If this turns out to be more accurate under the connect handlers,\n  we should try taking multiple measurements.\n */\n\nvar syncUrl;\nif (Meteor.isCordova || Meteor.isDesktop) {\n  // Only use Meteor.absoluteUrl for Cordova and Desktop; see\n  // https://github.com/meteor/meteor/issues/4696\n  // https://github.com/mizzao/meteor-timesync/issues/30\n  // Cordova should never be running out of a subdirectory...\n  syncUrl = Meteor.absoluteUrl(\"_timesync\");\n}\nelse {\n  // Support Meteor running in relative paths, based on computed root url prefix\n  // https://github.com/mizzao/meteor-timesync/pull/40\n  const basePath = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n  syncUrl = basePath + \"/_timesync\";\n}\n\nvar updateOffset = function() {\n  var t0 = Date.now();\n\n  HTTP.get(syncUrl, function(err, response) {\n    var t3 = Date.now(); // Grab this now\n    if (err) {\n      //  We'll still use our last computed offset if is defined\n      log(\"Error syncing to server time: \", err);\n      if (++attempts <= maxAttempts)\n        Meteor.setTimeout(TimeSync.resync, 1000);\n      else\n        log(\"Max number of time sync attempts reached. Giving up.\");\n      return;\n    }\n\n    attempts = 0; // It worked\n\n    var ts = parseInt(response.content);\n    SyncInternals.isSynced = true;\n    SyncInternals.offset = Math.round(((ts - t0) + (ts - t3)) / 2);\n    SyncInternals.roundTripTime = t3 - t0; // - (ts - ts) which is 0\n    SyncInternals.offsetDep.changed();\n  });\n};\n\n// Reactive variable for server time that updates every second.\nTimeSync.serverTime = function(clientTime, interval) {\n  check(interval, Match.Optional(Match.Integer));\n  // If a client time is provided, we don't need to depend on the tick.\n  if ( !clientTime ) getTickDependency(interval || defaultInterval).depend();\n\n  SyncInternals.offsetDep.depend(); // depend on offset to enable reactivity\n  // Convert Date argument to epoch as necessary\n  return (+clientTime || Date.now()) + SyncInternals.offset;\n};\n\n// Reactive variable for the difference between server and client time.\nTimeSync.serverOffset = function() {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.offset;\n};\n\nTimeSync.roundTripTime = function() {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.roundTripTime;\n};\n\nTimeSync.isSynced = function() {\n  SyncInternals.offsetDep.depend();\n  return SyncInternals.isSynced;\n};\n\nvar resyncIntervalId = null;\n\nTimeSync.resync = function() {\n  if (resyncIntervalId !== null) Meteor.clearInterval(resyncIntervalId);\n  updateOffset();\n  resyncIntervalId = Meteor.setInterval(updateOffset, 600000);\n};\n\n// Run this as soon as we load, even before Meteor.startup()\n// Run again whenever we reconnect after losing connection\nvar wasConnected = false;\n\nDeps.autorun(function() {\n  var connected = Meteor.status().connected;\n  if ( connected && !wasConnected ) TimeSync.resync();\n  wasConnected = connected;\n});\n\n// Resync if unexpected change by more than a few seconds. This needs to be\n// somewhat lenient, or a CPU-intensive operation can trigger a re-sync even\n// when the offset is still accurate. In any case, we're not going to be able to\n// catch very small system-initiated NTP adjustments with this, anyway.\nvar tickCheckTolerance = 5000;\n\nvar lastClientTime = Date.now();\n\n// Set up a new interval for any amount of reactivity.\nfunction getTickDependency(interval) {\n\n  if ( !SyncInternals.timeTick[interval] ) {\n    var dep  = new Deps.Dependency();\n\n    Meteor.setInterval(function() {\n      dep.changed();\n    }, interval);\n\n    SyncInternals.timeTick[interval] = dep;\n  }\n\n  return SyncInternals.timeTick[interval];\n}\n\n// Set up special interval for the default tick, which also watches for re-sync\nMeteor.setInterval(function() {\n  var currentClientTime = Date.now();\n\n  var discrepancy = SyncInternals.getDiscrepancy(lastClientTime, currentClientTime, defaultInterval);\n  if (Math.abs(discrepancy) < tickCheckTolerance) {\n    // No problem here, just keep ticking along\n    SyncInternals.timeTick[defaultInterval].changed();\n  } else {\n    // resync on major client clock changes\n    // based on http://stackoverflow.com/a/3367542/1656818\n    log(\"Clock discrepancy detected. Attempting re-sync.\");\n    // Refuse to compute server time and try to guess new server offset. Guessing only works if the server time hasn't changed.\n    SyncInternals.offset = SyncInternals.offset - discrepancy;\n    SyncInternals.isSynced = false;\n    SyncInternals.offsetDep.changed();\n    TimeSync.resync();\n  }\n\n  lastClientTime = currentClientTime;\n}, defaultInterval);\n"]},"sourceType":"module","hash":"2b536945bc71712107c740d8f01c46f33eb2c83f"}
