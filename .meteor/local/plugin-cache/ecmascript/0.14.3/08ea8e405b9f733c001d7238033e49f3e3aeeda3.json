{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminNewBatch.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminNewBatch.jsx"}},"code":"module.export({\n  default: () => AdminNewBatch\n});\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 0);\nlet Link;\nmodule.link(\"react-router-dom\", {\n  Link(v) {\n    Link = v;\n  }\n\n}, 1);\nlet Button, Classes, Dialog, FormGroup, HTMLSelect, HTMLTable, Intent, NumericInput;\nmodule.link(\"@blueprintjs/core\", {\n  Button(v) {\n    Button = v;\n  },\n\n  Classes(v) {\n    Classes = v;\n  },\n\n  Dialog(v) {\n    Dialog = v;\n  },\n\n  FormGroup(v) {\n    FormGroup = v;\n  },\n\n  HTMLSelect(v) {\n    HTMLSelect = v;\n  },\n\n  HTMLTable(v) {\n    HTMLTable = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  },\n\n  NumericInput(v) {\n    NumericInput = v;\n  }\n\n}, 2);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 3);\nlet assignmentTypes, maxGamesCount;\nmodule.link(\"../../../api/batches/batches.js\", {\n  assignmentTypes(v) {\n    assignmentTypes = v;\n  },\n\n  maxGamesCount(v) {\n    maxGamesCount = v;\n  }\n\n}, 4);\nlet createBatch;\nmodule.link(\"../../../api/batches/methods.js\", {\n  createBatch(v) {\n    createBatch = v;\n  }\n\n}, 5);\nlet AlertToaster;\nmodule.link(\"../Toasters.jsx\", {\n  AlertToaster(v) {\n    AlertToaster = v;\n  }\n\n}, 6);\n\nclass AdminNewBatch extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      assignment: \"simple\",\n      simpleTreatments: [],\n      completeTreatments: [],\n      simpleGamesCount: 1,\n      gamesCount: 1\n    };\n\n    this.handleAssignmentChange = event => {\n      const {\n        completeTreatments,\n        simpleGamesCount\n      } = this.state;\n      const assignment = event.currentTarget.value;\n      this.setState({\n        assignment,\n        gamesCount: this.gamesCountCalc(assignment, completeTreatments, simpleGamesCount)\n      });\n    };\n\n    this.handleGamesCountChange = simpleGamesCount => {\n      this.setState({\n        simpleGamesCount,\n        gamesCount: simpleGamesCount\n      });\n    };\n\n    this.handleAddTreatment = event => {\n      event.preventDefault();\n      const lobbyConfigs = this.validLobbyConfigs();\n      const {\n        assignment,\n        simpleGamesCount\n      } = this.state;\n      const key = \"\".concat(assignment, \"Treatments\");\n      const _id = event.currentTarget.value;\n\n      if (!_id) {\n        return;\n      }\n\n      const params = {};\n      const existing = this.state[key].find(tt => tt._id === _id);\n      const treatment = existing || {\n        _id,\n        count: 1,\n        lobbyConfigId: !_.isEmpty(lobbyConfigs) && lobbyConfigs[0]._id\n      };\n\n      if (!existing) {\n        this.state[key].push(treatment);\n      } else {\n        existing.count++;\n      }\n\n      params[key] = this.state[key];\n\n      if (assignment === \"complete\") {\n        params.gamesCount = this.state.gamesCount + 1;\n      }\n\n      this.setState(params);\n    };\n\n    this.handleTreatmentCountChange = (id, count) => {\n      const {\n        assignment,\n        completeTreatments,\n        simpleGamesCount\n      } = this.state;\n      const key = \"\".concat(assignment, \"Treatments\");\n      const t = this.state[key].find(tt => tt._id === id);\n      t.count = count;\n      const params = {\n        [key]: this.state[key]\n      };\n\n      if (assignment === \"complete\") {\n        params.gamesCount = this.gamesCountCalc(assignment, this.state[key], simpleGamesCount);\n      }\n\n      this.setState(params);\n    };\n\n    this.handleLobbyConfigChange = (id, event) => {\n      const {\n        currentTarget: {\n          value: lobbyConfigId\n        }\n      } = event;\n      const {\n        assignment,\n        completeTreatments\n      } = this.state;\n      const key = \"\".concat(assignment, \"Treatments\");\n      const t = this.state[key].find(tt => tt._id === id);\n      t.lobbyConfigId = lobbyConfigId;\n      this.setState({\n        [key]: this.state[key]\n      });\n    };\n\n    this.handleRemoveTreatment = event => {\n      event.preventDefault();\n      const {\n        assignment,\n        simpleGamesCount,\n        gamesCount\n      } = this.state;\n      const key = \"\".concat(assignment, \"Treatments\");\n      const id = event.currentTarget.dataset.id;\n      const treatment = this.state[key].find(t => t._id === id);\n\n      const val = _.reject(this.state[key], t => t._id === id);\n\n      const params = {\n        [key]: val\n      };\n\n      if (assignment === \"complete\") {\n        params.gamesCount = gamesCount - treatment.count;\n      }\n\n      this.setState(params);\n    };\n\n    this.handleNewBatch = event => {\n      event.preventDefault();\n      const {\n        assignment,\n        simpleGamesCount,\n        simpleTreatments,\n        completeTreatments\n      } = this.state;\n      const params = {\n        assignment\n      };\n\n      switch (assignment) {\n        case \"simple\":\n          const treatments = simpleTreatments.map(t => _.pick(t, \"_id\", \"lobbyConfigId\"));\n          params.simpleConfig = {\n            treatments,\n            count: simpleGamesCount\n          };\n          break;\n\n        case \"complete\":\n          params.completeConfig = {\n            treatments: completeTreatments\n          };\n          break;\n\n        default:\n          AlertToaster.show({\n            message: \"unknown assignement type?!\"\n          });\n          return;\n      }\n\n      createBatch.call(params, err => {\n        if (err) {\n          console.error(JSON.stringify(err));\n          AlertToaster.show({\n            message: String(err)\n          });\n          return;\n        }\n\n        this.setState({\n          assignment: \"simple\",\n          simpleTreatments: [],\n          completeTreatments: [],\n          simpleGamesCount: 1,\n          gamesCount: 1\n        });\n        this.props.onClose();\n      });\n    };\n  }\n\n  gamesCountCalc(assignment, completeTreatments, simpleGamesCount) {\n    return assignment === \"complete\" ? _.inject(completeTreatments, (sum, t) => (t.count || 0) + sum, 0) : simpleGamesCount;\n  }\n\n  validTreatments() {\n    const {\n      treatments\n    } = this.props;\n    return treatments.filter(t => !t.archivedAt);\n  }\n\n  validLobbyConfigs() {\n    const {\n      lobbyConfigs\n    } = this.props;\n    return lobbyConfigs.filter(l => !l.archivedAt);\n  }\n\n  renderRequired() {\n    const issues = [];\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    if (_.isEmpty(treatments)) {\n      issues.push( /*#__PURE__*/React.createElement(Link, {\n        to: \"/admin/treatments\"\n      }, \"Create a Treatment\"));\n    }\n\n    if (_.isEmpty(lobbyConfigs)) {\n      issues.push( /*#__PURE__*/React.createElement(Link, {\n        to: \"/admin/lobby-configurations\"\n      }, \"Create a Lobby Configuration\"));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, \"You must first:\", /*#__PURE__*/React.createElement(\"ul\", null, issues.map((issue, i) => /*#__PURE__*/React.createElement(\"li\", {\n      key: i\n    }, issue))));\n  }\n\n  renderContent() {\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n    const {\n      gamesCount,\n      assignment,\n      simpleTreatments,\n      completeTreatments\n    } = this.state;\n    const isComplete = assignment === \"complete\";\n    const currentTreatments = isComplete ? completeTreatments : simpleTreatments;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      className: \"new-batch\",\n      onSubmit: this.handleNewBatch\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_BODY\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Assignment Method\",\n      labelFor: \"assignment\"\n    }, /*#__PURE__*/React.createElement(HTMLSelect, {\n      name: \"assignment\",\n      id: \"assignment\",\n      onChange: this.handleAssignmentChange,\n      value: assignment\n    }, _.map(assignmentTypes, (name, key) => /*#__PURE__*/React.createElement(\"option\", {\n      key: key,\n      value: key\n    }, name)))), /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Treatments\",\n      labelFor: \"treatment\"\n    }, currentTreatments.length > 0 ? /*#__PURE__*/React.createElement(HTMLTable, {\n      striped: true,\n      bordered: true\n    }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"Treatment\"), /*#__PURE__*/React.createElement(\"th\", null, \"Lobby Configuration\"))), /*#__PURE__*/React.createElement(\"tbody\", null, _.map(currentTreatments, t => {\n      const id = \"gamesCount\".concat(t._id);\n      const treatment = treatments.find(tt => tt._id === t._id);\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: id\n      }, /*#__PURE__*/React.createElement(\"td\", null, treatment.displayName(), \" \"), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(HTMLSelect, {\n        name: \"lobbyConfigId\",\n        id: \"lobbyConfigId\",\n        onChange: this.handleLobbyConfigChange.bind(this, t._id),\n        value: t.lobbyConfigId,\n        style: {\n          width: 250\n        }\n      }, _.map(lobbyConfigs, l => /*#__PURE__*/React.createElement(\"option\", {\n        key: l._id,\n        value: l._id\n      }, l.displayName())))), isComplete ? /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(NumericInput, {\n        name: id,\n        id: id,\n        min: \"1\",\n        max: maxGamesCount,\n        stepSize: \"1\",\n        onValueChange: this.handleTreatmentCountChange.bind(this, t._id),\n        value: t.count,\n        style: {\n          width: 100\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(Button, {\n        text: \"Remove\",\n        intent: Intent.DANGER,\n        onClick: this.handleRemoveTreatment,\n        \"data-id\": t._id\n      })));\n    }))) : \"\", currentTreatments.length === 0 ? /*#__PURE__*/React.createElement(\"p\", {\n      className: \"bp3-text-muted\"\n    }, \"No treatments yet, add one:\") : \"\", /*#__PURE__*/React.createElement(\"br\", null), /*#__PURE__*/React.createElement(HTMLSelect, {\n      name: \"treatment\",\n      id: \"treatment\",\n      onChange: this.handleAddTreatment,\n      value: \"\",\n      style: {\n        width: 250\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\"\n    }, \"Add a new treatment...\"), _.map(treatments, tr => /*#__PURE__*/React.createElement(\"option\", {\n      key: tr._id,\n      value: tr._id\n    }, tr.displayName())))), /*#__PURE__*/React.createElement(FormGroup, {\n      label: \"Game Count\",\n      labelFor: \"gamesCount\",\n      helperText: isComplete ? null : \"The total number of games to run\"\n    }, isComplete ? gamesCount : /*#__PURE__*/React.createElement(NumericInput, {\n      name: \"gamesCount\",\n      id: \"gamesCount\",\n      min: \"1\",\n      max: maxGamesCount,\n      stepSize: \"1\",\n      onValueChange: this.handleGamesCountChange,\n      value: gamesCount\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: Classes.DIALOG_FOOTER_ACTIONS\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      text: \"Create Batch\",\n      intent: Intent.PRIMARY\n    }))));\n  }\n\n  render() {\n    const {\n      isOpen,\n      onClose\n    } = this.props;\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n    const content = _.isEmpty(treatments) || _.isEmpty(lobbyConfigs) ? this.renderRequired() : this.renderContent();\n    return /*#__PURE__*/React.createElement(Dialog, {\n      icon: IconNames.LAYERS,\n      isOpen: isOpen,\n      onClose: onClose,\n      title: \"New Batch\",\n      style: {\n        width: 700\n      }\n    }, content);\n  }\n\n}","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminNewBatch.jsx"],"names":["module","export","default","AdminNewBatch","React","link","v","Link","Button","Classes","Dialog","FormGroup","HTMLSelect","HTMLTable","Intent","NumericInput","IconNames","assignmentTypes","maxGamesCount","createBatch","AlertToaster","Component","state","assignment","simpleTreatments","completeTreatments","simpleGamesCount","gamesCount","handleAssignmentChange","event","currentTarget","value","setState","gamesCountCalc","handleGamesCountChange","handleAddTreatment","preventDefault","lobbyConfigs","validLobbyConfigs","key","_id","params","existing","find","tt","treatment","count","lobbyConfigId","_","isEmpty","push","handleTreatmentCountChange","id","t","handleLobbyConfigChange","handleRemoveTreatment","dataset","val","reject","handleNewBatch","treatments","map","pick","simpleConfig","completeConfig","show","message","call","err","console","error","JSON","stringify","String","props","onClose","inject","sum","validTreatments","filter","archivedAt","l","renderRequired","issues","DIALOG_BODY","issue","i","renderContent","isComplete","currentTreatments","name","length","displayName","bind","width","DANGER","tr","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY","render","isOpen","content","LAYERS"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Button,\n  Classes,\n  Dialog,\n  FormGroup,\n  HTMLSelect,\n  HTMLTable,\n  Intent,\n  NumericInput\n} from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\n\nimport {\n  assignmentTypes,\n  maxGamesCount\n} from \"../../../api/batches/batches.js\";\nimport { createBatch } from \"../../../api/batches/methods.js\";\n\nimport { AlertToaster } from \"../Toasters.jsx\";\n\nexport default class AdminNewBatch extends React.Component {\n  state = {\n    assignment: \"simple\",\n    simpleTreatments: [],\n    completeTreatments: [],\n    simpleGamesCount: 1,\n    gamesCount: 1\n  };\n\n  gamesCountCalc(assignment, completeTreatments, simpleGamesCount) {\n    return assignment === \"complete\"\n      ? _.inject(completeTreatments, (sum, t) => (t.count || 0) + sum, 0)\n      : simpleGamesCount;\n  }\n\n  handleAssignmentChange = event => {\n    const { completeTreatments, simpleGamesCount } = this.state;\n    const assignment = event.currentTarget.value;\n    this.setState({\n      assignment,\n      gamesCount: this.gamesCountCalc(\n        assignment,\n        completeTreatments,\n        simpleGamesCount\n      )\n    });\n  };\n\n  handleGamesCountChange = simpleGamesCount => {\n    this.setState({\n      simpleGamesCount,\n      gamesCount: simpleGamesCount\n    });\n  };\n\n  handleAddTreatment = event => {\n    event.preventDefault();\n\n    const lobbyConfigs = this.validLobbyConfigs();\n    const { assignment, simpleGamesCount } = this.state;\n\n    const key = `${assignment}Treatments`;\n    const _id = event.currentTarget.value;\n\n    if (!_id) {\n      return;\n    }\n\n    const params = {};\n    const existing = this.state[key].find(tt => tt._id === _id);\n    const treatment = existing || {\n      _id,\n      count: 1,\n      lobbyConfigId: !_.isEmpty(lobbyConfigs) && lobbyConfigs[0]._id\n    };\n\n    if (!existing) {\n      this.state[key].push(treatment);\n    } else {\n      existing.count++;\n    }\n    params[key] = this.state[key];\n    if (assignment === \"complete\") {\n      params.gamesCount = this.state.gamesCount + 1;\n    }\n    this.setState(params);\n  };\n\n  handleTreatmentCountChange = (id, count) => {\n    const { assignment, completeTreatments, simpleGamesCount } = this.state;\n\n    const key = `${assignment}Treatments`;\n    const t = this.state[key].find(tt => tt._id === id);\n    t.count = count;\n\n    const params = { [key]: this.state[key] };\n    if (assignment === \"complete\") {\n      params.gamesCount = this.gamesCountCalc(\n        assignment,\n        this.state[key],\n        simpleGamesCount\n      );\n    }\n\n    this.setState(params);\n  };\n\n  handleLobbyConfigChange = (id, event) => {\n    const {\n      currentTarget: { value: lobbyConfigId }\n    } = event;\n    const { assignment, completeTreatments } = this.state;\n\n    const key = `${assignment}Treatments`;\n    const t = this.state[key].find(tt => tt._id === id);\n    t.lobbyConfigId = lobbyConfigId;\n\n    this.setState({ [key]: this.state[key] });\n  };\n\n  handleRemoveTreatment = event => {\n    event.preventDefault();\n\n    const { assignment, simpleGamesCount, gamesCount } = this.state;\n    const key = `${assignment}Treatments`;\n\n    const id = event.currentTarget.dataset.id;\n    const treatment = this.state[key].find(t => t._id === id);\n    const val = _.reject(this.state[key], t => t._id === id);\n    const params = { [key]: val };\n\n    if (assignment === \"complete\") {\n      params.gamesCount = gamesCount - treatment.count;\n    }\n\n    this.setState(params);\n  };\n\n  handleNewBatch = event => {\n    event.preventDefault();\n    const {\n      assignment,\n      simpleGamesCount,\n      simpleTreatments,\n      completeTreatments\n    } = this.state;\n    const params = { assignment };\n\n    switch (assignment) {\n      case \"simple\":\n        const treatments = simpleTreatments.map(t =>\n          _.pick(t, \"_id\", \"lobbyConfigId\")\n        );\n        params.simpleConfig = {\n          treatments,\n          count: simpleGamesCount\n        };\n        break;\n      case \"complete\":\n        params.completeConfig = {\n          treatments: completeTreatments\n        };\n        break;\n      default:\n        AlertToaster.show({ message: \"unknown assignement type?!\" });\n        return;\n    }\n\n    createBatch.call(params, err => {\n      if (err) {\n        console.error(JSON.stringify(err));\n        AlertToaster.show({ message: String(err) });\n        return;\n      }\n\n      this.setState({\n        assignment: \"simple\",\n        simpleTreatments: [],\n        completeTreatments: [],\n        simpleGamesCount: 1,\n        gamesCount: 1\n      });\n      this.props.onClose();\n    });\n  };\n\n  validTreatments() {\n    const { treatments } = this.props;\n\n    return treatments.filter(t => !t.archivedAt);\n  }\n\n  validLobbyConfigs() {\n    const { lobbyConfigs } = this.props;\n\n    return lobbyConfigs.filter(l => !l.archivedAt);\n  }\n\n  renderRequired() {\n    const issues = [];\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    if (_.isEmpty(treatments)) {\n      issues.push(<Link to=\"/admin/treatments\">Create a Treatment</Link>);\n    }\n\n    if (_.isEmpty(lobbyConfigs)) {\n      issues.push(\n        <Link to=\"/admin/lobby-configurations\">\n          Create a Lobby Configuration\n        </Link>\n      );\n    }\n\n    return (\n      <div className={Classes.DIALOG_BODY}>\n        You must first:\n        <ul>\n          {issues.map((issue, i) => (\n            <li key={i}>{issue}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n\n  renderContent() {\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    const {\n      gamesCount,\n      assignment,\n      simpleTreatments,\n      completeTreatments\n    } = this.state;\n\n    const isComplete = assignment === \"complete\";\n    const currentTreatments = isComplete\n      ? completeTreatments\n      : simpleTreatments;\n\n    return (\n      <form className=\"new-batch\" onSubmit={this.handleNewBatch}>\n        <div className={Classes.DIALOG_BODY}>\n          <FormGroup label=\"Assignment Method\" labelFor=\"assignment\">\n            <HTMLSelect\n              name=\"assignment\"\n              id=\"assignment\"\n              onChange={this.handleAssignmentChange}\n              value={assignment}\n            >\n              {_.map(assignmentTypes, (name, key) => (\n                <option key={key} value={key}>\n                  {name}\n                </option>\n              ))}\n            </HTMLSelect>\n          </FormGroup>\n\n          <FormGroup label=\"Treatments\" labelFor=\"treatment\">\n            {currentTreatments.length > 0 ? (\n              <HTMLTable striped bordered>\n                <thead>\n                  <tr>\n                    <th>Treatment</th>\n                    <th>Lobby Configuration</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {_.map(currentTreatments, t => {\n                    const id = `gamesCount${t._id}`;\n                    const treatment = treatments.find(tt => tt._id === t._id);\n                    return (\n                      <tr key={id}>\n                        <td>{treatment.displayName()} </td>\n\n                        <td>\n                          <HTMLSelect\n                            name=\"lobbyConfigId\"\n                            id=\"lobbyConfigId\"\n                            onChange={this.handleLobbyConfigChange.bind(\n                              this,\n                              t._id\n                            )}\n                            value={t.lobbyConfigId}\n                            style={{ width: 250 }}\n                          >\n                            {_.map(lobbyConfigs, l => (\n                              <option key={l._id} value={l._id}>\n                                {l.displayName()}\n                              </option>\n                            ))}\n                          </HTMLSelect>\n                        </td>\n\n                        {isComplete ? (\n                          <td>\n                            <NumericInput\n                              name={id}\n                              id={id}\n                              min=\"1\"\n                              max={maxGamesCount}\n                              stepSize=\"1\"\n                              onValueChange={this.handleTreatmentCountChange.bind(\n                                this,\n                                t._id\n                              )}\n                              value={t.count}\n                              style={{ width: 100 }}\n                            />\n                          </td>\n                        ) : null}\n                        <td>\n                          <Button\n                            text=\"Remove\"\n                            intent={Intent.DANGER}\n                            onClick={this.handleRemoveTreatment}\n                            data-id={t._id}\n                          />\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </HTMLTable>\n            ) : (\n              \"\"\n            )}\n\n            {currentTreatments.length === 0 ? (\n              <p className=\"bp3-text-muted\">No treatments yet, add one:</p>\n            ) : (\n              \"\"\n            )}\n\n            <br />\n\n            <HTMLSelect\n              name=\"treatment\"\n              id=\"treatment\"\n              onChange={this.handleAddTreatment}\n              value={\"\"}\n              style={{ width: 250 }}\n            >\n              <option value=\"\">Add a new treatment...</option>\n              {_.map(treatments, tr => (\n                <option key={tr._id} value={tr._id}>\n                  {tr.displayName()}\n                </option>\n              ))}\n            </HTMLSelect>\n          </FormGroup>\n\n          <FormGroup\n            label=\"Game Count\"\n            labelFor=\"gamesCount\"\n            helperText={isComplete ? null : \"The total number of games to run\"}\n          >\n            {isComplete ? (\n              gamesCount\n            ) : (\n              <NumericInput\n                name=\"gamesCount\"\n                id=\"gamesCount\"\n                min=\"1\"\n                max={maxGamesCount}\n                stepSize=\"1\"\n                onValueChange={this.handleGamesCountChange}\n                value={gamesCount}\n              />\n            )}\n          </FormGroup>\n        </div>\n        <div className={Classes.DIALOG_FOOTER}>\n          <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n            <Button type=\"submit\" text=\"Create Batch\" intent={Intent.PRIMARY} />\n          </div>\n        </div>\n      </form>\n    );\n  }\n\n  render() {\n    const { isOpen, onClose } = this.props;\n    const treatments = this.validTreatments();\n    const lobbyConfigs = this.validLobbyConfigs();\n\n    const content =\n      _.isEmpty(treatments) || _.isEmpty(lobbyConfigs)\n        ? this.renderRequired()\n        : this.renderContent();\n\n    return (\n      <Dialog\n        icon={IconNames.LAYERS}\n        isOpen={isOpen}\n        onClose={onClose}\n        title=\"New Batch\"\n        style={{ width: 700 }}\n      >\n        {content}\n      </Dialog>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"08ea8e405b9f733c001d7238033e49f3e3aeeda3"}
