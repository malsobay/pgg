{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/games/server/cron.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/empirica:core/api/games/server/cron.js","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/games/server/cron.js","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/api/games/server/cron.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/api/games/server/cron.js"}},"code":"let moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet Rounds;\nmodule.link(\"../../rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 3);\nlet Stages;\nmodule.link(\"../../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../../treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet augmentPlayerStageRound, augmentGameStageRound;\nmodule.link(\"../../player-stages/augment.js\", {\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  },\n\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  }\n\n}, 6);\nlet augmentGameObject;\nmodule.link(\"../../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 7);\nlet config;\nmodule.link(\"../../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 8);\nlet endOfStage;\nmodule.link(\"../../stages/finish.js\", {\n  endOfStage(v) {\n    endOfStage = v;\n  }\n\n}, 9);\nlet Cron;\nmodule.link(\"../../../startup/server/cron.js\", {\n  default(v) {\n    Cron = v;\n  }\n\n}, 10);\nCron.add({\n  name: \"Trigger stage timeout or Run bots\",\n  interval: 1000,\n  task: function (log) {\n    const query = {\n      status: \"running\",\n      estFinishedTime: {\n        $gte: new Date()\n      },\n      finishedAt: {\n        $exists: false\n      }\n    };\n    Games.find(query).forEach(game => {\n      const stage = Stages.findOne(game.currentStageId);\n      const now = moment();\n      const startTimeAt = moment(stage.startTimeAt);\n      const endTimeAt = startTimeAt.add(stage.durationInSeconds, \"seconds\");\n      const ended = now.isSameOrAfter(endTimeAt);\n\n      if (ended) {\n        endOfStage(stage._id);\n      } else {\n        const {\n          gameId\n        } = stage; // make bots play\n\n        const query = {\n          gameId,\n          bot: {\n            $exists: true\n          }\n        };\n\n        if (Players.find(query).count() === 0) {\n          return;\n        }\n\n        const botPlayers = Players.find(query);\n        const treatment = Treatments.findOne(game.treatmentId);\n        const round = Rounds.findOne(stage.roundId);\n        augmentGameObject({\n          game,\n          treatment,\n          round,\n          stage\n        });\n        botPlayers.forEach(botPlayer => {\n          const bot = config.bots[botPlayer.bot];\n\n          if (!bot) {\n            log.error(\"Definition for bot \\\"\".concat(botPlayer.bot, \"\\\" was not found in the server config!\"));\n            return;\n          }\n\n          if (!bot.onStageTick) {\n            return;\n          }\n\n          augmentGameStageRound(game, stage, round);\n          botPlayer.stage = _.extend({}, stage);\n          botPlayer.round = _.extend({}, round);\n          augmentPlayerStageRound(botPlayer, botPlayer.stage, botPlayer.round, game);\n          const tick = endTimeAt.diff(now, \"seconds\");\n          game.rounds.forEach(round => {\n            round.stages = game.stages.filter(s => s.roundId === round._id);\n          });\n          bot.onStageTick(botPlayer, game, round, stage, tick);\n        });\n      }\n    });\n  }\n});","map":{"version":3,"sources":["packages/empirica:core/api/games/server/cron.js"],"names":["moment","module","link","default","v","Games","Players","Rounds","Stages","Treatments","augmentPlayerStageRound","augmentGameStageRound","augmentGameObject","config","endOfStage","Cron","add","name","interval","task","log","query","status","estFinishedTime","$gte","Date","finishedAt","$exists","find","forEach","game","stage","findOne","currentStageId","now","startTimeAt","endTimeAt","durationInSeconds","ended","isSameOrAfter","_id","gameId","bot","count","botPlayers","treatment","treatmentId","round","roundId","botPlayer","bots","error","onStageTick","_","extend","tick","diff","rounds","stages","filter","s"],"mappings":"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","sourcesContent":["import moment from \"moment\";\n\nimport { Games } from \"../games.js\";\nimport { Players } from \"../../players/players.js\";\nimport { Rounds } from \"../../rounds/rounds.js\";\nimport { Stages } from \"../../stages/stages.js\";\nimport { Treatments } from \"../../treatments/treatments.js\";\nimport {\n  augmentPlayerStageRound,\n  augmentGameStageRound\n} from \"../../player-stages/augment.js\";\nimport { augmentGameObject } from \"../../games/augment.js\";\nimport { config } from \"../../../server\";\nimport { endOfStage } from \"../../stages/finish.js\";\nimport Cron from \"../../../startup/server/cron.js\";\n\nCron.add({\n  name: \"Trigger stage timeout or Run bots\",\n  interval: 1000,\n  task: function(log) {\n    const query = {\n      status: \"running\",\n      estFinishedTime: { $gte: new Date() },\n      finishedAt: { $exists: false }\n    };\n    Games.find(query).forEach(game => {\n      const stage = Stages.findOne(game.currentStageId);\n\n      const now = moment();\n      const startTimeAt = moment(stage.startTimeAt);\n      const endTimeAt = startTimeAt.add(stage.durationInSeconds, \"seconds\");\n      const ended = now.isSameOrAfter(endTimeAt);\n      if (ended) {\n        endOfStage(stage._id);\n      } else {\n        const { gameId } = stage;\n        // make bots play\n        const query = { gameId, bot: { $exists: true } };\n        if (Players.find(query).count() === 0) {\n          return;\n        }\n        const botPlayers = Players.find(query);\n        const treatment = Treatments.findOne(game.treatmentId);\n        const round = Rounds.findOne(stage.roundId);\n\n        augmentGameObject({ game, treatment, round, stage });\n\n        botPlayers.forEach(botPlayer => {\n          const bot = config.bots[botPlayer.bot];\n          if (!bot) {\n            log.error(\n              `Definition for bot \"${\n                botPlayer.bot\n              }\" was not found in the server config!`\n            );\n            return;\n          }\n\n          if (!bot.onStageTick) {\n            return;\n          }\n\n          augmentGameStageRound(game, stage, round);\n\n          botPlayer.stage = _.extend({}, stage);\n          botPlayer.round = _.extend({}, round);\n          augmentPlayerStageRound(\n            botPlayer,\n            botPlayer.stage,\n            botPlayer.round,\n            game\n          );\n\n          const tick = endTimeAt.diff(now, \"seconds\");\n\n          game.rounds.forEach(round => {\n            round.stages = game.stages.filter(s => s.roundId === round._id);\n          });\n\n          bot.onStageTick(botPlayer, game, round, stage, tick);\n        });\n      }\n    });\n  }\n});\n"]},"sourceType":"module","hash":"bca336582a15f076dfe3cb7c2b08f4c578caf484"}
