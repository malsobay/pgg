{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminBatch.jsx","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/empirica:core/ui/components/admin/AdminBatch.jsx","filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminBatch.jsx","passPerPreset":false,"envName":"development","cwd":"/Users/tilenbabnik/Desktop/pgg","root":"/Users/tilenbabnik/Desktop/pgg","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/tilenbabnik/Desktop/pgg/packages/empirica:core/ui/components/admin/AdminBatch.jsx","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/empirica:core/ui/components/admin/AdminBatch.jsx"}},"code":"module.export({\n  default: () => AdminBatch\n});\nlet Button, ButtonGroup, Classes, Intent, Tag;\nmodule.link(\"@blueprintjs/core\", {\n  Button(v) {\n    Button = v;\n  },\n\n  ButtonGroup(v) {\n    ButtonGroup = v;\n  },\n\n  Classes(v) {\n    Classes = v;\n  },\n\n  Intent(v) {\n    Intent = v;\n  },\n\n  Tag(v) {\n    Tag = v;\n  }\n\n}, 0);\nlet IconNames;\nmodule.link(\"@blueprintjs/icons\", {\n  IconNames(v) {\n    IconNames = v;\n  }\n\n}, 1);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 2);\nlet React;\nmodule.link(\"react\", {\n  default(v) {\n    React = v;\n  }\n\n}, 3);\nlet assignmentTypes;\nmodule.link(\"../../../api/batches/batches\", {\n  assignmentTypes(v) {\n    assignmentTypes = v;\n  }\n\n}, 4);\nlet duplicateBatch, setBatchInDebugMode, updateBatch, updateBatchStatus;\nmodule.link(\"../../../api/batches/methods\", {\n  duplicateBatch(v) {\n    duplicateBatch = v;\n  },\n\n  setBatchInDebugMode(v) {\n    setBatchInDebugMode = v;\n  },\n\n  updateBatch(v) {\n    updateBatch = v;\n  },\n\n  updateBatchStatus(v) {\n    updateBatchStatus = v;\n  }\n\n}, 5);\nlet AdminBatchGamesContainer;\nmodule.link(\"../../containers/admin/AdminBatchGamesContainer\", {\n  default(v) {\n    AdminBatchGamesContainer = v;\n  }\n\n}, 6);\nlet LoadingInline;\nmodule.link(\"../LoadingInline.jsx\", {\n  default(v) {\n    LoadingInline = v;\n  }\n\n}, 7);\nlet AlertToaster, SuccessToaster;\nmodule.link(\"../Toasters.jsx\", {\n  AlertToaster(v) {\n    AlertToaster = v;\n  },\n\n  SuccessToaster(v) {\n    SuccessToaster = v;\n  }\n\n}, 8);\n\nclass AdminBatch extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      newIsOpen: false,\n      detailsVisible: false\n    };\n\n    this.toggleDetails = () => {\n      this.setState({\n        detailsVisible: !this.state.detailsVisible\n      });\n    };\n\n    this.handleArchive = () => {\n      const {\n        archived,\n        batch: {\n          _id\n        }\n      } = this.props;\n      updateBatch.call({\n        _id,\n        archived: !archived\n      });\n    };\n\n    this.handleStatusChange = (status, debugMode, event) => {\n      const {\n        batch: {\n          _id\n        }\n      } = this.props;\n      event.preventDefault();\n\n      if ((Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) && status === \"running\" && ( // mac: metaKey (command), window: ctrlKey (Ctrl)\n      event.ctrlKey || event.metaKey || debugMode)) {\n        setBatchInDebugMode.call({\n          _id\n        });\n      }\n\n      updateBatchStatus.call({\n        _id,\n        status\n      });\n    };\n\n    this.handleDuplicate = event => {\n      const {\n        archived,\n        batch: {\n          _id\n        }\n      } = this.props;\n      event.preventDefault();\n      duplicateBatch.call({\n        _id\n      }, err => {\n        if (err) {\n          AlertToaster.show({\n            message: \"Failed duplicating Batch: \".concat(err)\n          });\n        } else {\n          let message = \"Successfully duplicated Batch.\";\n\n          if (archived) {\n            message += \" See Active Batches!\";\n          }\n\n          SuccessToaster.show({\n            message\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      loading,\n      batch,\n      treatments,\n      archived\n    } = this.props;\n    const {\n      detailsVisible\n    } = this.state;\n\n    if (loading) {\n      return /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", {\n        colSpan: 7,\n        style: {\n          textAlign: \"center\"\n        }\n      }, /*#__PURE__*/React.createElement(LoadingInline, null)));\n    }\n\n    const actions = [];\n\n    if (batch.status === \"init\") {\n      actions.push( /*#__PURE__*/React.createElement(Button, {\n        text: \"Start\",\n        intent: Intent.SUCCESS,\n        icon: IconNames.PLAY,\n        key: \"start\",\n        onClick: this.handleStatusChange.bind(this, \"running\", false)\n      }));\n    }\n\n    if (batch.status === \"init\" || batch.status === \"running\") {\n      actions.push( /*#__PURE__*/React.createElement(Button, {\n        text: \"Cancel\",\n        icon: IconNames.STOP,\n        key: \"cancel\",\n        onClick: this.handleStatusChange.bind(this, \"cancelled\", false)\n      }));\n    }\n\n    if (batch.status === \"finished\" || batch.status === \"cancelled\" || batch.status === \"failed\") {\n      actions.push( /*#__PURE__*/React.createElement(Button, {\n        text: archived ? \"Unarchive\" : \"Archive\",\n        intent: archived ? Intent.SUCCESS : Intent.DANGER,\n        minimal: true,\n        icon: IconNames.BOX,\n        key: \"archive\",\n        className: Classes.SMALL,\n        onClick: this.handleArchive\n      }));\n    }\n\n    actions.push( /*#__PURE__*/React.createElement(Button, {\n      text: \"Duplicate\",\n      icon: IconNames.DUPLICATE,\n      key: \"duplicate\",\n      onClick: this.handleDuplicate\n    }));\n    let config;\n\n    switch (batch.assignment) {\n      case \"simple\":\n        config = batch.simpleConfig.treatments.map(tt => {\n          const t = treatments.find(t => t._id === tt._id);\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: tt._id\n          }, t ? t.displayName() : \"Unknown treatment\");\n        });\n        break;\n\n      case \"complete\":\n        config = batch.completeConfig.treatments.map(tt => {\n          const t = treatments.find(t => t._id === tt._id);\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: tt._id\n          }, t ? t.displayName() : \"Unknown treatment\", \" x \", tt.count);\n        });\n        break;\n\n      default:\n        console.error(\"unknown assignment: \".concat(batch.assignment));\n        break;\n    }\n\n    let statusIntent;\n    let statusMinimal = false;\n\n    switch (batch.status) {\n      case \"init\":\n        statusIntent = Intent.WARNING; // Default style\n\n        break;\n\n      case \"running\":\n        statusIntent = Intent.SUCCESS;\n        break;\n\n      case \"finished\":\n        statusIntent = Intent.SUCCESS;\n        statusMinimal = true;\n        break;\n\n      case \"stopped\":\n      case \"failed\":\n      case \"cancelled\":\n        statusIntent = Intent.DANGER;\n        statusMinimal = true;\n        break;\n\n      default:\n        statusMinimal = true;\n        break;\n    }\n\n    const detailsVisibleClass = detailsVisible ? \"detailsVisible\" : \"\";\n    const detailsClass = \"detailsButton \".concat(detailsVisibleClass);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"showDetailsButton\"\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      viewBox: \"0 0 125.304 125.304\",\n      onClick: this.toggleDetails,\n      className: detailsClass\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      fill: \"#010002\",\n      d: \"M62.652 103.895L0 21.409h125.304z\"\n    }))), /*#__PURE__*/React.createElement(\"td\", null, batch.index), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(Tag, {\n      intent: statusIntent,\n      minimal: statusMinimal\n    }, batch.status)), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"numeric\"\n    }, batch.gameCount()), /*#__PURE__*/React.createElement(\"td\", {\n      title: moment(batch.runningAt).format()\n    }, batch.runningAt ? moment(batch.runningAt).fromNow() : \"\"), /*#__PURE__*/React.createElement(\"td\", null, assignmentTypes[batch.assignment]), /*#__PURE__*/React.createElement(\"td\", null, config), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(ButtonGroup, {\n      minimal: true,\n      className: Classes.SMALL\n    }, actions))), detailsVisible ? /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(AdminBatchGamesContainer, {\n      batchId: batch._id,\n      batch: batch,\n      treatments: treatments\n    })) : /*#__PURE__*/React.createElement(\"tr\", null));\n  }\n\n}","map":{"version":3,"sources":["packages/empirica:core/ui/components/admin/AdminBatch.jsx"],"names":["module","export","default","AdminBatch","Button","ButtonGroup","Classes","Intent","Tag","link","v","IconNames","moment","React","assignmentTypes","duplicateBatch","setBatchInDebugMode","updateBatch","updateBatchStatus","AdminBatchGamesContainer","LoadingInline","AlertToaster","SuccessToaster","Component","state","newIsOpen","detailsVisible","toggleDetails","setState","handleArchive","archived","batch","_id","props","call","handleStatusChange","status","debugMode","event","preventDefault","Meteor","isDevelopment","settings","public","debug_gameDebugMode","ctrlKey","metaKey","handleDuplicate","err","show","message","render","loading","treatments","textAlign","actions","push","SUCCESS","PLAY","bind","STOP","DANGER","BOX","SMALL","DUPLICATE","config","assignment","simpleConfig","map","tt","t","find","displayName","completeConfig","count","console","error","statusIntent","statusMinimal","WARNING","detailsVisibleClass","detailsClass","index","gameCount","runningAt","format","fromNow"],"mappings":"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","sourcesContent":["import { Button, ButtonGroup, Classes, Intent, Tag } from \"@blueprintjs/core\";\nimport { IconNames } from \"@blueprintjs/icons\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { assignmentTypes } from \"../../../api/batches/batches\";\nimport {\n  duplicateBatch,\n  setBatchInDebugMode,\n  updateBatch,\n  updateBatchStatus\n} from \"../../../api/batches/methods\";\nimport AdminBatchGamesContainer from \"../../containers/admin/AdminBatchGamesContainer\";\nimport LoadingInline from \"../LoadingInline.jsx\";\nimport { AlertToaster, SuccessToaster } from \"../Toasters.jsx\";\n\nexport default class AdminBatch extends React.Component {\n  state = {\n    newIsOpen: false,\n    detailsVisible: false\n  };\n\n  toggleDetails = () => {\n    this.setState({ detailsVisible: !this.state.detailsVisible });\n  };\n\n  handleArchive = () => {\n    const {\n      archived,\n      batch: { _id }\n    } = this.props;\n    updateBatch.call({ _id, archived: !archived });\n  };\n\n  handleStatusChange = (status, debugMode, event) => {\n    const {\n      batch: { _id }\n    } = this.props;\n    event.preventDefault();\n    if (\n      (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) &&\n      status === \"running\" &&\n      // mac: metaKey (command), window: ctrlKey (Ctrl)\n      (event.ctrlKey || event.metaKey || debugMode)\n    ) {\n      setBatchInDebugMode.call({ _id });\n    }\n    updateBatchStatus.call({ _id, status });\n  };\n\n  handleDuplicate = event => {\n    const {\n      archived,\n      batch: { _id }\n    } = this.props;\n    event.preventDefault();\n    duplicateBatch.call({ _id }, err => {\n      if (err) {\n        AlertToaster.show({ message: `Failed duplicating Batch: ${err}` });\n      } else {\n        let message = \"Successfully duplicated Batch.\";\n        if (archived) {\n          message += \" See Active Batches!\";\n        }\n        SuccessToaster.show({ message });\n      }\n    });\n  };\n\n  render() {\n    const { loading, batch, treatments, archived } = this.props;\n    const { detailsVisible } = this.state;\n\n    if (loading) {\n      return (\n        <tr>\n          <td colSpan={7} style={{ textAlign: \"center\" }}>\n            <LoadingInline />\n          </td>\n        </tr>\n      );\n    }\n\n    const actions = [];\n\n    if (batch.status === \"init\") {\n      actions.push(\n        <Button\n          text=\"Start\"\n          intent={Intent.SUCCESS}\n          icon={IconNames.PLAY}\n          key=\"start\"\n          onClick={this.handleStatusChange.bind(this, \"running\", false)}\n        />\n      );\n    }\n\n    if (batch.status === \"init\" || batch.status === \"running\") {\n      actions.push(\n        <Button\n          text=\"Cancel\"\n          icon={IconNames.STOP}\n          key=\"cancel\"\n          onClick={this.handleStatusChange.bind(this, \"cancelled\", false)}\n        />\n      );\n    }\n\n    if (\n      batch.status === \"finished\" ||\n      batch.status === \"cancelled\" ||\n      batch.status === \"failed\"\n    ) {\n      actions.push(\n        <Button\n          text={archived ? \"Unarchive\" : \"Archive\"}\n          intent={archived ? Intent.SUCCESS : Intent.DANGER}\n          minimal\n          icon={IconNames.BOX}\n          key=\"archive\"\n          className={Classes.SMALL}\n          onClick={this.handleArchive}\n        />\n      );\n    }\n\n    actions.push(\n      <Button\n        text=\"Duplicate\"\n        icon={IconNames.DUPLICATE}\n        key=\"duplicate\"\n        onClick={this.handleDuplicate}\n      />\n    );\n\n    let config;\n    switch (batch.assignment) {\n      case \"simple\":\n        config = batch.simpleConfig.treatments.map(tt => {\n          const t = treatments.find(t => t._id === tt._id);\n          return (\n            <div key={tt._id}>{t ? t.displayName() : \"Unknown treatment\"}</div>\n          );\n        });\n        break;\n      case \"complete\":\n        config = batch.completeConfig.treatments.map(tt => {\n          const t = treatments.find(t => t._id === tt._id);\n          return (\n            <div key={tt._id}>\n              {t ? t.displayName() : \"Unknown treatment\"}\n              {\" x \"}\n              {tt.count}\n            </div>\n          );\n        });\n        break;\n      default:\n        console.error(`unknown assignment: ${batch.assignment}`);\n        break;\n    }\n\n    let statusIntent;\n    let statusMinimal = false;\n    switch (batch.status) {\n      case \"init\":\n        statusIntent = Intent.WARNING;\n        // Default style\n        break;\n      case \"running\":\n        statusIntent = Intent.SUCCESS;\n        break;\n      case \"finished\":\n        statusIntent = Intent.SUCCESS;\n        statusMinimal = true;\n        break;\n      case \"stopped\":\n      case \"failed\":\n      case \"cancelled\":\n        statusIntent = Intent.DANGER;\n        statusMinimal = true;\n        break;\n      default:\n        statusMinimal = true;\n        break;\n    }\n\n    const detailsVisibleClass = detailsVisible ? \"detailsVisible\" : \"\";\n    const detailsClass = `detailsButton ${detailsVisibleClass}`;\n    return (\n      <>\n        <tr>\n          <td className=\"showDetailsButton\">\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 125.304 125.304\"\n              onClick={this.toggleDetails}\n              className={detailsClass}\n            >\n              <path fill=\"#010002\" d=\"M62.652 103.895L0 21.409h125.304z\" />\n            </svg>\n          </td>\n          <td>{batch.index}</td>\n          <td>\n            <Tag intent={statusIntent} minimal={statusMinimal}>\n              {batch.status}\n            </Tag>\n          </td>\n          <td className=\"numeric\">{batch.gameCount()}</td>\n          <td title={moment(batch.runningAt).format()}>\n            {batch.runningAt ? moment(batch.runningAt).fromNow() : \"\"}\n          </td>\n          <td>{assignmentTypes[batch.assignment]}</td>\n          <td>{config}</td>\n          <td>\n            <ButtonGroup minimal className={Classes.SMALL}>\n              {actions}\n            </ButtonGroup>\n          </td>\n        </tr>\n\n        {detailsVisible ? (\n          <tr>\n            <AdminBatchGamesContainer\n              batchId={batch._id}\n              batch={batch}\n              treatments={treatments}\n            />\n          </tr>\n        ) : (\n          <tr />\n        )}\n      </>\n    );\n  }\n}\n"]},"sourceType":"module","hash":"a8cbbb25714eb79a35a5500a3c6dc1e14ea154f1"}
