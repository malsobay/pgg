[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Mongo = Package.mongo.Mongo;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar EJSON = Package.ejson.EJSON;\nvar EventEmitter = Package['raix:eventemitter'].EventEmitter;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Collection2;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"aldeed:collection2\":{\"collection2.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_collection2/collection2.js                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet EventEmitter;\nmodule.link(\"meteor/raix:eventemitter\", {\n  EventEmitter(v) {\n    EventEmitter = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet checkNpmVersions;\nmodule.link(\"meteor/tmeasday:check-npm-versions\", {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 3);\nlet clone;\nmodule.link(\"clone\", {\n  default(v) {\n    clone = v;\n  }\n\n}, 4);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 5);\nlet isEmpty;\nmodule.link(\"lodash.isempty\", {\n  default(v) {\n    isEmpty = v;\n  }\n\n}, 6);\nlet isEqual;\nmodule.link(\"lodash.isequal\", {\n  default(v) {\n    isEqual = v;\n  }\n\n}, 7);\nlet isObject;\nmodule.link(\"lodash.isobject\", {\n  default(v) {\n    isObject = v;\n  }\n\n}, 8);\nlet flattenSelector;\nmodule.link(\"./lib\", {\n  flattenSelector(v) {\n    flattenSelector = v;\n  }\n\n}, 9);\ncheckNpmVersions({\n  'simpl-schema': '>=0.0.0'\n}, 'aldeed:collection2');\n\nconst SimpleSchema = require('simpl-schema').default; // Exported only for listening to events\n\n\nconst Collection2 = new EventEmitter();\nconst defaultCleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false\n};\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\n\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {}; // Allow passing just the schema object\n\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  this._c2 = this._c2 || {}; // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n\n  if (this._c2._simpleSchema && options.replace !== true) {\n    if (ss.version >= 2) {\n      var newSS = new SimpleSchema(this._c2._simpleSchema);\n      newSS.extend(ss);\n      ss = newSS;\n    } else {\n      ss = new SimpleSchema([this._c2._simpleSchema, ss]);\n    }\n  }\n\n  var selector = options.selector;\n\n  function attachTo(obj) {\n    if (typeof selector === \"object\") {\n      // Index of existing schema with identical selector\n      var schemaIndex = -1; // we need an array to hold multiple schemas\n\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || []; // Loop through existing schemas with selectors\n\n      obj._c2._simpleSchemas.forEach((schema, index) => {\n        // if we find a schema with an identical selector, save it's index\n        if (isEqual(schema.selector, selector)) {\n          schemaIndex = index;\n        }\n      });\n\n      if (schemaIndex === -1) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: SimpleSchema.isSimpleSchema(ss) ? ss : new SimpleSchema(ss),\n          selector: selector\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace !== true) {\n          // Merge with existing schema unless options.replace is `true`\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n          } else {\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }\n        } else {\n          // If options.replace is `true` replace existing schema with new schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        }\n      } // Remove existing schemas without selector\n\n\n      delete obj._c2._simpleSchema;\n    } else {\n      // Track the schema in the collection\n      obj._c2._simpleSchema = ss; // Remove existing schemas with selector\n\n      delete obj._c2._simpleSchemas;\n    }\n  }\n\n  attachTo(this); // Attach the schema to the underlying LocalCollection, too\n\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach(obj => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n    var schemas = this._c2._simpleSchemas;\n\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n      var schema, selector, target;\n\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0]; // We will set this to undefined because in theory you might want to select\n        // on a null value.\n\n        target = undefined; // here we are looking for selector in different places\n        // $set should have more priority here\n\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) {\n          // on upsert/update operations\n          target = query[selector];\n        } // we need to compare given selector with doc property or option to\n        // find right schema\n\n\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n}); // Wrap DB write operation methods\n\n['insert', 'update'].forEach(methodName => {\n  const _super = Mongo.Collection.prototype[methodName];\n\n  Mongo.Collection.prototype[methodName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let options = methodName === \"insert\" ? args[1] : args[2]; // Support missing options arg\n\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n\n      try {\n        // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(this, methodName, args, Meteor.isServer || this._connection === null, // getAutoValues\n      userId, Meteor.isServer // isFromTrustedCode\n      );\n\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  var doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  } // Gather arguments and cache the selector\n\n\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2]; // The real insert doesn't take options\n\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = isEmpty(doc); // Support missing options arg\n\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  last = args.length - 1;\n  hasCallback = typeof args[last] === 'function'; // If update was called with upsert:true, flag as an upsert\n\n  isUpsert = type === \"update\" && options.upsert === true; // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n\n  var schema = collection.simpleSchema(doc, options, selector);\n  var isLocalCollection = collection._connection === null; // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  } // Determine validation context\n\n\n  var validationContext = options.validationContext;\n\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  } // Add a default callback function if we're on the client and no callback was given\n\n\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function (err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  } // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n\n\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  } // Get the docId for passing in the autoValue/custom context\n\n\n  var docId;\n\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  } // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n\n\n  var cachedId;\n\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: type === \"insert\",\n    isUpdate: type === \"update\" && options.upsert !== true,\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = _objectSpread({}, (schema._cleanOptions || {}).extendAutoValueContext || {}, {}, autoValueContext, {}, options.extendAutoValueContext);\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  }); // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n\n  schema.clean(doc, _objectSpread({\n    mutate: true,\n    // Clean the doc/modifier in place\n    isModifier: type !== \"insert\"\n  }, defaultCleanOptions, {}, schema._cleanOptions || {}, {}, cleanOptionsForThisOperation, {\n    extendAutoValueContext,\n    // This was extended separately above\n    getAutoValues // Force this override\n\n  })); // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n\n  var docToValidate = {};\n\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  } // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation. \n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n\n\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    var set = docToValidate.$set || {};\n    docToValidate.$set = flattenSelector(selector);\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  } // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n\n\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: type !== \"insert\",\n      mutate: true,\n      // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false\n    });\n  } // XXX Maybe move this into SimpleSchema\n\n\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' + (type === 'update' ? 'modifier' : 'object') + ' is now empty');\n  } // Validate doc\n\n\n  var isValid;\n\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: type === \"update\" || type === \"upsert\",\n      upsert: isUpsert,\n      extendedCustomContext: _objectSpread({\n        isInsert: type === \"insert\",\n        isUpdate: type === \"update\" && options.upsert !== true,\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    } // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n\n\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    } // If callback, set invalidKey when we get a mongo unique error\n\n\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, \"in \".concat(collection._name, \" \").concat(type));\n\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  let appendToMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let message;\n  const invalidKeys = typeof context.validationErrors === 'function' ? context.validationErrors() : context.invalidKeys();\n\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey); // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = \"\".concat(firstErrorMessage, \" (\").concat(firstErrorKey, \")\");\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n\n  message = \"\".concat(message, \" \").concat(appendToMessage).trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context; // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n  var addValidationErrorsPropName = typeof context.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    const error = args[0];\n\n    if (error && (error.name === \"MongoError\" && error.code === 11001 || error.message.indexOf('MongoError: E11000' !== -1)) && error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  var addValidationErrorsPropName = typeof validationContext.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    const error = args[0]; // Handle our own validation errors\n\n    if (error instanceof Meteor.Error && error.error === 400 && error.reason === \"INVALID\" && typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    } // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error && error.error === 409 && error.reason && error.reason.indexOf('E11000') !== -1 && error.reason.indexOf('c2_') !== -1) {\n        addUniqueError(validationContext, error.reason);\n        args[0] = getErrorObject(validationContext);\n      }\n\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecure = {};\n\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function () {\n        return true;\n      },\n      update: function () {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  } // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n\n}\n\nvar alreadyDefined = {};\n\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n    var isLocalCollection = c._connection === null; // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n\n    c.deny({\n      insert: function (userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    }); // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n\n    c.deny(_objectSpread({\n      insert: function (userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"insert\", [doc, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false, // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"update\", [{\n          _id: doc && doc._id\n        }, modifier, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false, // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {\n      transform: null\n    })); // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n\n    alreadyDefined[c._name] = true;\n  }\n}\n\nmodule.exportDefault(Collection2);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/aldeed_collection2/lib.js                                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  flattenSelector: () => flattenSelector\n});\n\nfunction flattenSelector(selector) {\n  // If selector uses $and format, convert to plain object selector\n  if (Array.isArray(selector.$and)) {\n    selector.$and.forEach(sel => {\n      Object.assign(selector, flattenSelector(sel));\n    });\n    delete selector.$and;\n  }\n\n  const obj = {};\n  Object.entries(selector).forEach((_ref) => {\n    let [key, value] = _ref;\n\n    // Ignoring logical selectors (https://docs.mongodb.com/manual/reference/operator/query/#logical)\n    if (!key.startsWith(\"$\")) {\n      if (typeof value === 'object' && value !== null) {\n        if (value.$eq !== undefined) {\n          obj[key] = value.$eq;\n        } else if (Array.isArray(value.$in) && value.$in.length === 1) {\n          obj[key] = value.$in[0];\n        } else if (Object.keys(value).every(v => !(typeof v === \"string\" && v.startsWith(\"$\")))) {\n          obj[key] = value;\n        }\n      } else {\n        obj[key] = value;\n      }\n    }\n  });\n  return obj;\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"clone\":{\"package.json\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/clone/package.json                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {\n  \"name\": \"clone\",\n  \"version\": \"2.1.1\",\n  \"main\": \"clone.js\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"clone.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/clone/clone.js                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isempty\":{\"package.json\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isempty/package.json                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {\n  \"name\": \"lodash.isempty\",\n  \"version\": \"4.4.0\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isempty/index.js                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap');\n\n/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\nvar nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' ||\n        typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (nonEnumShadows || isPrototype(value)) {\n    return !nativeKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEmpty;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isequal\":{\"package.json\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isequal/package.json                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {\n  \"name\": \"lodash.isequal\",\n  \"version\": \"4.5.0\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isequal/index.js                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"lodash.isobject\":{\"package.json\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isobject/package.json                                 //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.exports = {\n  \"name\": \"lodash.isobject\",\n  \"version\": \"3.0.2\"\n};\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/aldeed_collection2/node_modules/lodash.isobject/index.js                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**\n * lodash 3.0.2 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/aldeed:collection2/collection2.js\");\n\n/* Exports */\nPackage._define(\"aldeed:collection2\", exports, {\n  Collection2: Collection2\n});\n\n})();\n","servePath":"/packages/aldeed_collection2.js","sourceMap":{"version":3,"sources":["packages/aldeed:collection2/collection2.js","packages/aldeed:collection2/lib.js"],"names":["_objectSpread","module","link","default","v","EventEmitter","Meteor","Mongo","checkNpmVersions","clone","EJSON","isEmpty","isEqual","isObject","flattenSelector","SimpleSchema","require","Collection2","defaultCleanOptions","filter","autoConvert","removeEmptyStrings","trimStrings","removeNullsFromArrays","Collection","prototype","attachSchema","c2AttachSchema","ss","options","isSimpleSchema","_c2","_simpleSchema","replace","version","newSS","extend","selector","attachTo","obj","schemaIndex","_simpleSchemas","forEach","schema","index","push","_collection","LocalCollection","defineDeny","keepInsecure","emit","simpleSchema","doc","query","schemas","length","Error","target","i","Object","keys","undefined","$set","methodName","_super","args","bypassCollection2","userId","err","doValidate","isServer","_connection","_makeNewID","splice","apply","collection","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","upsert","isLocalCollection","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","autoValueContext","isInsert","isUpdate","extendAutoValueContext","_cleanOptions","cleanOptionsForThisOperation","prop","clean","mutate","isModifier","docToValidate","hasOwnProperty","call","set","assign","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","getErrorObject","_name","context","appendToMessage","message","invalidKeys","validationErrors","firstErrorKey","name","firstErrorMessage","keyErrorMessage","indexOf","trim","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","code","wrappedCallbackForParsingServerErrors","details","invalidKeysFromServer","parse","alreadyInsecure","c","Package","insecure","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","exportDefault","export","Array","isArray","$and","sel","entries","key","startsWith","$eq","$in","every"],"mappings":"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","file":"/packages/aldeed_collection2.js","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport clone from 'clone';\nimport { EJSON } from 'meteor/ejson';\nimport isEmpty from 'lodash.isempty';\nimport isEqual from 'lodash.isequal';\nimport isObject from 'lodash.isobject';\nimport { flattenSelector } from './lib';\n\ncheckNpmVersions({ 'simpl-schema': '>=0.0.0' }, 'aldeed:collection2');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\nconst defaultCleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false,\n};\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  this._c2 = this._c2 || {};\n\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n  if (this._c2._simpleSchema && options.replace !== true) {\n    if (ss.version >= 2) {\n      var newSS = new SimpleSchema(this._c2._simpleSchema);\n      newSS.extend(ss);\n      ss = newSS;\n    } else {\n      ss = new SimpleSchema([this._c2._simpleSchema, ss]);\n    }\n  }\n\n  var selector = options.selector;\n\n  function attachTo(obj) {\n    if (typeof selector === \"object\") {\n      // Index of existing schema with identical selector\n      var schemaIndex = -1;\n\n      // we need an array to hold multiple schemas\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];\n\n      // Loop through existing schemas with selectors\n      obj._c2._simpleSchemas.forEach((schema, index) => {\n        // if we find a schema with an identical selector, save it's index\n        if(isEqual(schema.selector, selector)) {\n          schemaIndex = index;\n        }\n      });\n      if (schemaIndex === -1) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: SimpleSchema.isSimpleSchema(ss) ? ss : new SimpleSchema(ss),\n          selector: selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace !== true) {\n          // Merge with existing schema unless options.replace is `true`\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n          } else {\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }\n        } else {\n          // If options.replace is `true` replace existing schema with new schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        }\n\n      }\n\n      // Remove existing schemas without selector\n      delete obj._c2._simpleSchema;\n    } else {\n      // Track the schema in the collection\n      obj._c2._simpleSchema = ss;\n\n      // Remove existing schemas with selector\n      delete obj._c2._simpleSchemas;\n    }\n  }\n\n  attachTo(this);\n  // Attach the schema to the underlying LocalCollection, too\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach((obj) => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    var schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n\n      var schema, selector, target;\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n['insert', 'update'].forEach((methodName) => {\n  const _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function(...args) {\n    let options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(\n        this,\n        methodName,\n        args,\n        Meteor.isServer || this._connection === null, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  var doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  var schema = collection.simpleSchema(doc, options, selector);\n  var isLocalCollection = (collection._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Determine validation context\n  var validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  var docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: (type === \"insert\"),\n    isUpdate: (type === \"update\" && options.upsert !== true),\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = {\n    ...((schema._cleanOptions || {}).extendAutoValueContext || {}),\n    ...autoValueContext,\n    ...options.extendAutoValueContext,\n  };\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  });\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  schema.clean(doc, {\n    mutate: true, // Clean the doc/modifier in place\n    isModifier: (type !== \"insert\"),\n    // Start with some Collection2 defaults, which will usually be overwritten\n    ...defaultCleanOptions,\n    // The extend with the schema-level defaults (from SimpleSchema constructor options)\n    ...(schema._cleanOptions || {}),\n    // Finally, options for this specific operation should take precedence\n    ...cleanOptionsForThisOperation,\n    extendAutoValueContext, // This was extended separately above\n    getAutoValues, // Force this override\n  });\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation. \n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    var set = docToValidate.$set || {};\n\n    docToValidate.$set = flattenSelector(selector)\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  }\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: (type !== \"insert\"),\n      mutate: true, // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false,\n    });\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  var isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: {\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection,\n        ...(options.extendedCustomContext || {}),\n      },\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, `in ${collection._name} ${type}`);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context, appendToMessage = '') {\n  let message;\n  const invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey);\n\n    // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = `${firstErrorMessage} (${firstErrorKey})`;\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n  message = `${message} ${appendToMessage}`.trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  var addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(...args) {\n    const error = args[0];\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  var addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(...args) {\n    const error = args[0];\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecure = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nvar alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    var isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id'],\n      ...(options.transform === true ? {} : {transform: null}),\n    });\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nexport default Collection2;\n","export function flattenSelector(selector) {\n  // If selector uses $and format, convert to plain object selector\n  if (Array.isArray(selector.$and)) {\n    selector.$and.forEach(sel => {\n      Object.assign(selector, flattenSelector(sel));\n    });\n\n    delete selector.$and\n  }\n\n  const obj = {}\n\n  Object.entries(selector).forEach(([key, value]) => {\n    // Ignoring logical selectors (https://docs.mongodb.com/manual/reference/operator/query/#logical)\n    if (!key.startsWith(\"$\")) {\n      if (typeof value === 'object' && value !== null) {\n        if (value.$eq !== undefined) {\n          obj[key] = value.$eq\n        } else if (Array.isArray(value.$in) && value.$in.length === 1) {\n          obj[key] = value.$in[0]\n        } else if (Object.keys(value).every(v => !(typeof v === \"string\" && v.startsWith(\"$\")))) {\n          obj[key] = value\n        }\n      } else {\n        obj[key] = value\n      }\n    }\n  })\n  \n  return obj\n}\n"]}}]