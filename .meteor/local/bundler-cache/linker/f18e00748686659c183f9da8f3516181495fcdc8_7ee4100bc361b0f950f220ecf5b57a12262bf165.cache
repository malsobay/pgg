[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Collection2 = Package['aldeed:collection2'].Collection2;\nvar enableDebugLogging = Package['reywood:publish-composite'].enableDebugLogging;\nvar publishComposite = Package['reywood:publish-composite'].publishComposite;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar ReactMeteorData = Package['react-meteor-data'].ReactMeteorData;\nvar ValidatedMethod = Package['mdg:validated-method'].ValidatedMethod;\nvar Random = Package.random.Random;\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Autoupdate = Package.autoupdate.Autoupdate;\n\n/* Package-scope variables */\nvar player, $set, findAndModify;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"empirica:core\":{\"server.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/server.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  config: () => config\n});\nmodule.link(\"./startup/server/index.js\");\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet playerIdForConn;\nmodule.link(\"./startup/server/connections.js\", {\n  playerIdForConn(v) {\n    playerIdForConn = v;\n  }\n\n}, 1);\nlet callOnChange;\nmodule.link(\"./api/server/onchange.js\", {\n  callOnChange(v) {\n    callOnChange = v;\n  }\n\n}, 2);\nlet callOnSubmit;\nmodule.link(\"./api/server/onsubmit.js\", {\n  callOnSubmit(v) {\n    callOnSubmit = v;\n  }\n\n}, 3);\nlet earlyExitGame;\nmodule.link(\"./api/games/methods.js\", {\n  earlyExitGame(v) {\n    earlyExitGame = v;\n  }\n\n}, 4);\nlet shared;\nmodule.link(\"./shared\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 5);\nlet getFunctionParameters;\nmodule.link(\"./lib/utils\", {\n  getFunctionParameters(v) {\n    getFunctionParameters = v;\n  }\n\n}, 6);\nlet Games;\nmodule.link(\"./api/games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 7);\nSimpleSchema.debug = true;\n\nconst safeCallback = function (name, func, arguments) {\n  try {\n    switch (name) {\n      case \"onGameStart\":\n      case \"onRoundStart\":\n      case \"onStageStart\":\n      case \"onStageEnd\":\n      case \"onRoundEnd\":\n      case \"onGameEnd\":\n        handleCallbackFuncParameters(func);\n        break;\n\n      default:\n        break;\n    }\n\n    const game = Games.findOne(arguments[0]._id);\n\n    if (game.finishedAt) {\n      console.log(\"safeCallback: game already ended.\");\n      return;\n    }\n\n    return func.apply(this, arguments);\n  } catch (err) {\n    console.error(\"Fatal error encounter calling Empirica.\".concat(name, \":\"));\n    console.error(err);\n    const game = arguments[0];\n    earlyExitGame.call({\n      gameId: game._id,\n      endReason: \"Failed on \".concat(name, \" callback\"),\n      status: \"failed\"\n    });\n  }\n};\n\nconst handleCallbackFuncParameters = func => {\n  const parameters = getFunctionParameters(func);\n  const handler = {\n    getOwnPropertyDescriptor(target, keyIndex) {\n      const key = keyIndex.split(\"__-__\")[0];\n      const index = parseInt(keyIndex.split(\"__-__\")[1]);\n\n      if (key === \"game\" && index === 0 || key === \"round\" && index === 1 || key === \"stage\" && index === 2) {\n        return;\n      } else if (key === \"players\") {\n        throw new Error(\"the \\\"players\\\" argument has been deprecated, use \\\"game.players\\\" instead\");\n      } else {\n        throw new Error(\"\\\"\".concat(key, \"\\\" property is not allowed on this callback\"));\n      }\n    }\n\n  };\n  const proxy = new Proxy({}, handler);\n  parameters.forEach((key, index) => {\n    const keyIndex = key + \"__-__\" + index;\n    Object.getOwnPropertyDescriptor(proxy, keyIndex);\n  });\n}; // Maybe could do better...\n\n\nconst config = {\n  bots: {}\n};\nconst Empirica = {\n  // New name for init: gameInit\n  gameInit(func) {\n    config.gameInit = func;\n  },\n\n  bot(name, obj) {\n    if (config.bots[name]) {\n      throw \"Bot \\\"\".concat(name, \"\\\" was declared twice!\");\n    }\n\n    config.bots[name] = obj;\n  },\n\n  onGameStart(func) {\n    config.onGameStart = function () {\n      return safeCallback(\"onGameStart\", func, arguments);\n    };\n  },\n\n  onRoundStart(func) {\n    config.onRoundStart = function () {\n      return safeCallback(\"onRoundStart\", func, arguments);\n    };\n  },\n\n  onStageStart(func) {\n    config.onStageStart = function () {\n      return safeCallback(\"onStageStart\", func, arguments);\n    };\n  },\n\n  onStageEnd(func) {\n    config.onStageEnd = function () {\n      return safeCallback(\"onStageEnd\", func, arguments);\n    };\n  },\n\n  onRoundEnd(func) {\n    config.onRoundEnd = function () {\n      return safeCallback(\"onRoundEnd\", func, arguments);\n    };\n  },\n\n  onGameEnd(func) {\n    config.onGameEnd = function () {\n      return safeCallback(\"onGameEnd\", func, arguments);\n    };\n  },\n\n  onSet(func) {\n    config.onSet = function () {\n      return safeCallback(\"onSet\", func, arguments);\n    };\n  },\n\n  onAppend(func) {\n    config.onAppend = function () {\n      return safeCallback(\"onAppend\", func, arguments);\n    };\n  },\n\n  onChange(func) {\n    config.onChange = function () {\n      return safeCallback(\"onChange\", func, arguments);\n    };\n  },\n\n  onSubmit(func) {\n    config.onSubmit = function () {\n      return safeCallback(\"onSubmit\", func, arguments);\n    };\n  }\n\n};\nmodule.exportDefault(Empirica);\n// Help access to server only modules from shared modules\nshared.playerIdForConn = playerIdForConn;\nshared.callOnChange = callOnChange;\nshared.callOnSubmit = callOnSubmit;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"gameLobby-lock.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/gameLobby-lock.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nconst gameLobbyLock = {};\nmodule.exportDefault(gameLobbyLock);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"shared.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/shared.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// sharedNamespace is used for being able to loading files on client or server\n// exclusively, from files which are themselves shared.\nconst sharedNamespace = {};\nmodule.exportDefault(sharedNamespace);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"api\":{\"collections.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/collections.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  collections: () => collections\n});\nlet Batches;\nmodule.link(\"./batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 0);\nlet Factors;\nmodule.link(\"./factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 1);\nlet GameLobbies;\nmodule.link(\"./game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"./games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet LobbyConfigs;\nmodule.link(\"./lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 4);\nlet PlayerInputs;\nmodule.link(\"./player-inputs/player-inputs.js\", {\n  PlayerInputs(v) {\n    PlayerInputs = v;\n  }\n\n}, 5);\nlet PlayerRounds;\nmodule.link(\"./player-rounds/player-rounds.js\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 6);\nlet PlayerStages;\nmodule.link(\"./player-stages/player-stages.js\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 7);\nlet Players;\nmodule.link(\"./players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 8);\nlet Rounds;\nmodule.link(\"./rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 9);\nlet Stages;\nmodule.link(\"./stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 10);\nlet Treatments;\nmodule.link(\"./treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 11);\nconst collections = [Batches, Factors, GameLobbies, Games, LobbyConfigs, PlayerInputs, PlayerRounds, PlayerStages, Players, Rounds, Stages, Treatments];\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"default-schemas.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/default-schemas.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  IdSchema: () => IdSchema,\n  ArchivedSchema: () => ArchivedSchema,\n  DebugModeSchema: () => DebugModeSchema,\n  TimestampSchema: () => TimestampSchema,\n  CreatorSchema: () => CreatorSchema,\n  UserDataSchema: () => UserDataSchema,\n  PolymorphicSchema: () => PolymorphicSchema,\n  HasManyByRef: () => HasManyByRef,\n  BelongsTo: () => BelongsTo\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet inflection;\nmodule.link(\"inflection\", {\n  default(v) {\n    inflection = v;\n  }\n\n}, 1);\nconst IdSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\nconst ArchivedSchema = new SimpleSchema({\n  archivedById: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n\n    autoValue() {\n      if (this.field(\"archivedAt\").isSet) {\n        return this.userId;\n      }\n\n      return undefined;\n    }\n\n  },\n  archivedAt: {\n    type: Date,\n    label: \"Archived at\",\n    optional: true\n  }\n});\nconst DebugModeSchema = new SimpleSchema({\n  debugMode: {\n    type: Boolean,\n    defaultValue: false\n  }\n});\nconst TimestampSchema = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    // denyUpdate: true,\n    index: true,\n\n    autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return {\n          $setOnInsert: new Date()\n        };\n      } else {\n        this.unset(); // Prevent user from supplying their own value\n      }\n    }\n\n  },\n  updatedAt: {\n    type: Date,\n    label: \"Last updated at\",\n    optional: true,\n    // denyInsert: true,\n    index: true,\n\n    autoValue() {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    }\n\n  }\n});\nconst CreatorSchema = new SimpleSchema({\n  createdById: {\n    type: String,\n    label: \"Created by\",\n    // denyUpdate: true,\n    regEx: SimpleSchema.RegEx.Id,\n\n    autoValue() {\n      if (this.isInsert) {\n        return this.isSet && this.isFromTrustedCode ? undefined : this.userId;\n      }\n\n      return undefined;\n    },\n\n    index: true\n  },\n  updatedById: {\n    type: String,\n    label: \"Last updated by\",\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n\n    autoValue() {\n      if (this.isUpdate) {\n        return this.userId;\n      }\n    },\n\n    index: true\n  }\n});\nconst UserDataSchema = new SimpleSchema({\n  data: {\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  }\n});\n\nconst PolymorphicSchema = function (collTypes) {\n  return new SimpleSchema({\n    objectType: {\n      type: String,\n      allowedValues: collTypes,\n      // denyUpdate: true,\n      index: true\n    },\n    objectId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      // denyUpdate: true,\n      index: true\n    }\n  });\n};\n\nconst HasManyByRef = function (coll) {\n  const camel = inflection.camelize(inflection.singularize(coll), true);\n  const label = inflection.titleize(coll);\n  const fieldName = \"\".concat(camel, \"Ids\");\n  return new SimpleSchema({\n    [fieldName]: {\n      type: Array,\n      defaultValue: [],\n      label,\n      index: true\n    },\n    [\"\".concat(fieldName, \".$\")]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      label: \"\".concat(label, \" Item\")\n    }\n  });\n};\n\nconst BelongsTo = function (coll) {\n  let required = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const singular = inflection.singularize(coll);\n  const camel = inflection.camelize(singular, true);\n  const label = inflection.titleize(singular);\n  const fieldName = \"\".concat(camel, \"Id\");\n  return new SimpleSchema({\n    [fieldName]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      label,\n      // denyUpdate,\n      index: true,\n      optional: !required\n    }\n  });\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"indexes.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/indexes.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet inflection;\nmodule.link(\"inflection\", {\n  default(v) {\n    inflection = v;\n  }\n\n}, 0);\nlet log;\nmodule.link(\"../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 1);\nlet collections;\nmodule.link(\"./collections.js\", {\n  collections(v) {\n    collections = v;\n  }\n\n}, 2);\nMeteor.startup(() => {\n  // Add manual indexes here. Example:\n  //\n  // Batches.rawCollection().createIndex({\n  //   \"fieldname\": 1\n  // }, { unique: true })\n  //\n  // The following loop will try to add indexes marked in the Schemas\n  //\n  Meteor.setTimeout(() => {\n    collections.forEach(coll => {\n      if (!coll.schema) {\n        return;\n      }\n\n      try {\n        const name = inflection.titleize(coll._name);\n        log.debug(\"Adding indexes to\", name);\n\n        for (const key in coll.schema._schema) {\n          if (coll.schema._schema.hasOwnProperty(key)) {\n            const def = coll.schema._schema[key];\n            const desc = \"\\\"\".concat(name, \"\\\" \\u2013 { \").concat(key, \": { index: \").concat(def.index, \" } }\"); // No index wanted\n\n            if (def.index === undefined) {\n              continue;\n            } // Wanting index to be removed, not supported\n\n\n            if (def.index === false) {\n              log.warn(\"{ index: false } not supported on \".concat(desc));\n              continue;\n            } // Only 1, -1 and true values supported\n\n\n            if (!(def.index === true || def.index === 1 || def.index === -1)) {\n              log.warn(\"unknown index value on \".concat(desc));\n              continue;\n            } // Add opts supported by SimpleSchema:index\n\n\n            const opts = {};\n\n            if (def.sparse === true) {\n              options.sparse = true;\n            }\n\n            if (def.unique === true) {\n              opts.unique = true;\n            }\n\n            let index = {};\n\n            switch (def.index) {\n              case 1:\n              case true:\n                index = {\n                  [key]: 1\n                };\n                break;\n\n              case -1:\n                index = {\n                  [key]: -1\n                };\n                break;\n            }\n\n            log.debug(\"  - createIndex(\".concat(JSON.stringify(index), \", \").concat(JSON.stringify(opts), \")\"));\n            coll.rawCollection().createIndex(index, opts, (err, res) => {\n              if (err && err.codeName !== \"IndexOptionsConflict\") {\n                log.error(\"can't create index: \".concat(name, \"/\").concat(JSON.stringify(index), \". \").concat(err));\n              }\n            });\n          }\n        }\n      } catch (error) {}\n    });\n  }, 1000);\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"schema-helpers.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/schema-helpers.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Collection2;\nmodule.link(\"meteor/aldeed:collection2\", {\n  default(v) {\n    Collection2 = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\n// Must be unique scoped by other field (for given value of passed field,\n// The current field should be unique). For ex:\n//   Name: {\n//     Type: String,\n//     ScopedUnique: \"orgId\"\n//   }\n// Name must be unique for document with equal orgId.\n// Documents with different orgId can have same name.\nSimpleSchema.extendOptions([\"scopedUnique\"]);\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (ss.version >= 2) {\n    ss.messageBox.messages({\n      scopedUnique: \"Already exists\"\n    });\n  }\n\n  ss.addValidator(function () {\n    if (!this.isSet) {\n      return;\n    }\n\n    const def = this.definition;\n    const uniqueFieldScope = def.scopedUnique;\n\n    if (!uniqueFieldScope) {\n      return;\n    }\n\n    const val = this.field(uniqueFieldScope).value;\n    const key = this.key;\n\n    if (collection.find({\n      [uniqueFieldScope]: val,\n      [key]: this.value\n    }).count() > 0) {\n      return \"uniqueScoped\";\n    }\n  });\n}); // Extend the schema options allowed by SimpleSchema\n\nSimpleSchema.extendOptions([\"denyInsert\", \"denyUpdate\"]);\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (ss.version >= 2 && ss.messageBox && typeof ss.messageBox.messages === \"function\") {\n    ss.messageBox.messages({\n      en: {\n        insertNotAllowed: \"{{label}} cannot be set during an insert\",\n        updateNotAllowed: \"{{label}} cannot be set during an update\"\n      }\n    });\n  }\n\n  ss.addValidator(function schemaDenyValidator() {\n    if (!this.isSet) return;\n    const def = this.definition;\n    if (def.denyInsert && this.isInsert) return \"insertNotAllowed\";\n    if (def.denyUpdate && (this.isUpdate || this.isUpsert)) return \"updateNotAllowed\";\n  });\n}); // Extend the schema options allowed by SimpleSchema\n\nSimpleSchema.extendOptions([\"index\", // one of Number, String, Boolean\n\"unique\", // Boolean\n\"sparse\" // Boolean\n]);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"admin\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/admin/methods.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet yaml;\nmodule.link(\"js-yaml\", {\n  default(v) {\n    yaml = v;\n  }\n\n}, 0);\nlet Treatments;\nmodule.link(\"../../api/treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 1);\nlet Factors;\nmodule.link(\"../../api/factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"../../api/factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet LobbyConfigs;\nmodule.link(\"../../api/lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 4);\nlet bootstrap;\nmodule.link(\"../../startup/server/bootstrap.js\", {\n  bootstrap(v) {\n    bootstrap = v;\n  }\n\n}, 5);\nlet log;\nmodule.link(\"../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 6);\nconst userColls = [\"meteor_accounts_loginServiceConfiguration\", \"users\"];\nconst keepPartial = [\"treatments\", \"factors\", \"factor_types\", \"lobby_configs\"];\nconst deleteColls = [\"game_lobbies\", \"player_inputs\", \"batches\", \"rounds\", \"counters\", \"games\", \"player_rounds\", \"players\", \"player_stages\", \"player_logs\", \"stages\"].concat(keepPartial);\n\nconst localTypeForImported = data => {\n  return factorTypeId => {\n    const importedType = data.factorTypes.find(t => t._id === factorTypeId);\n\n    if (!importedType) {\n      log.warn(\"could not find corresponding factorTypeId\", factorTypeId);\n      return;\n    }\n\n    const type = FactorTypes.findOne({\n      name: importedType.name\n    });\n\n    if (!type) {\n      log.warn(\"could not import factor type, no correponding type\");\n      return;\n    }\n\n    return type._id;\n  };\n};\n\nconst localFactorForImported = data => {\n  return factorId => {\n    const importedFactor = data.factors.find(t => t._id === factorId);\n\n    if (!importedFactor) {\n      log.warn(\"could not import factor, no correponding imported factor\");\n      return;\n    }\n\n    const {\n      value,\n      factorTypeId: importedFactorTypeId\n    } = importedFactor;\n    const factorTypeId = localTypeForImported(data)(importedFactorTypeId);\n\n    if (!factorTypeId) {\n      log.warn(\"could not convert factor types\");\n      return;\n    }\n\n    const factor = Factors.findOne({\n      value,\n      factorTypeId\n    });\n\n    if (!factor) {\n      log.warn(\"could not import factor, no correponding factor\");\n      return;\n    }\n\n    return factor._id;\n  };\n};\n\nconst archivedUpdate = (archivedAt, existingArchivedAt) => !!archivedAt === !!existingArchivedAt ? null : archivedAt ? {\n  $set: {\n    archivedAt: new Date()\n  }\n} : {\n  $unset: {\n    archivedAt: true,\n    archivedById: true\n  }\n};\n\nMeteor.methods({\n  adminImportConfiguration(_ref) {\n    let {\n      text\n    } = _ref;\n    log.debug(\"Import starting.\");\n    const data = yaml.safeLoad(text);\n    const convertFactorTypeId = localTypeForImported(data);\n    const convertFactorId = localFactorForImported(data);\n    (data.factorTypes || []).forEach(f => {\n      const {\n        archivedAt,\n        name\n      } = f;\n      const exists = FactorTypes.findOne({\n        name\n      });\n\n      if (exists) {\n        log.debug(\"exists FactorTypes\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n\n        if (query) {\n          FactorTypes.update(exists._id, query);\n        }\n\n        return;\n      }\n\n      log.debug(\"new FactorTypes\");\n      FactorTypes.insert(f);\n    });\n    (data.factors || []).forEach(f => {\n      const {\n        factorTypeId: importedFactorTypeId,\n        value\n      } = f;\n      const factorTypeId = convertFactorTypeId(importedFactorTypeId);\n\n      if (!factorTypeId) {\n        log.debug(\"could not convert factorTypeIds\");\n        return;\n      }\n\n      const exists = Factors.findOne({\n        factorTypeId,\n        value\n      });\n\n      if (exists) {\n        log.debug(\"exists Factors\");\n        return;\n      }\n\n      const params = _objectSpread({}, f, {\n        factorTypeId\n      });\n\n      log.debug(\"new Factors\", params);\n      Factors.insert(params);\n    });\n    (data.treatments || []).forEach(t => {\n      const {\n        archivedAt,\n        factorIds: importedFactorIds\n      } = t;\n      const factorIds = importedFactorIds.map(convertFactorId);\n\n      if (_.compact(factorIds).length !== importedFactorIds.length) {\n        log.debug(\"could not convert factorIds\");\n        return;\n      }\n\n      const exists = Treatments.findOne({\n        factorIds\n      });\n\n      if (exists) {\n        log.debug(\"exists Treatments\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n\n        if (query) {\n          Treatments.update(exists._id, query);\n        }\n\n        return;\n      }\n\n      const params = _objectSpread({}, t, {\n        factorIds\n      });\n\n      log.debug(\"new Treatments\", params);\n      Treatments.insert(params);\n    });\n    (data.lobbyConfigs || []).forEach(l => {\n      const query = _.pick(l, \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"extendCount\");\n\n      const exists = LobbyConfigs.findOne(query);\n\n      if (exists) {\n        log.debug(\"exists LobbyConfigs\");\n        const query = archivedUpdate(l.archivedAt, exists.archivedAt);\n\n        if (query) {\n          LobbyConfigs.update(exists._id, query);\n        }\n\n        return;\n      }\n\n      log.debug(\"new LobbyConfigs\");\n      LobbyConfigs.insert(l);\n    });\n    log.debug(\"Import done.\");\n  },\n\n  adminExportConfiguration() {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const out = {\n      treatments: [],\n      factorTypes: [],\n      factors: [],\n      lobbyConfigs: []\n    };\n    const treatments = Treatments.find().fetch();\n    treatments.forEach(t => out.treatments.push(_.pick(t, \"name\", \"factorIds\", \"archivedAt\")));\n    const factorTypes = FactorTypes.find().fetch();\n    factorTypes.forEach(t => out.factorTypes.push(_.pick(t, \"_id\", \"name\", \"description\", \"required\", \"type\", \"min\", \"max\", \"archivedAt\")));\n    const factors = Factors.find().fetch();\n    factors.forEach(f => out.factors.push(_.pick(f, \"_id\", \"name\", \"value\", \"factorTypeId\", \"archivedAt\")));\n    const lobbyConfigs = LobbyConfigs.find().fetch();\n    lobbyConfigs.forEach(l => out.lobbyConfigs.push(_.pick(l, \"name\", \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"extendCount\", \"bacthIds\", \"gameLobbyIds\", \"archivedAt\")));\n    return yaml.safeDump(out);\n  }\n\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_resetDatabase) {\n  Meteor.methods({\n    adminResetDB(partial) {\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      if (Meteor.isClient) {\n        return;\n      }\n\n      const driver = MongoInternals.defaultRemoteCollectionDriver();\n      const db = driver.mongo.db;\n      db.listCollections().toArray(Meteor.bindEnvironment((err, colls) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n\n        colls = _.sortBy(colls, c => c.name === \"players\" ? 0 : 1);\n        colls.forEach(collection => {\n          if (!deleteColls.includes(collection.name)) {\n            return;\n          }\n\n          if (partial && keepPartial.includes(collection.name)) {\n            return;\n          }\n\n          const coll = driver.open(collection.name);\n          coll.rawCollection().drop();\n        });\n        db.listCollections().toArray(Meteor.bindEnvironment((err, colls) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n\n          log.debug(\"Keeping:\");\n          colls.forEach(collection => {\n            let extra = \"\";\n\n            if (userColls.includes(collection.name)) {\n              extra = \"(used by admin login system)\";\n            }\n\n            log.debug(\" - \" + collection.name, extra);\n          });\n          log.debug(\"Cleared DB\");\n          bootstrap();\n        }));\n      }));\n    }\n\n  });\n}\n\nMeteor.startup(() => {});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"batches\":{\"batches.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/batches/batches.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Batches: () => Batches,\n  maxGamesCount: () => maxGamesCount,\n  assignmentTypes: () => assignmentTypes\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet statusSchema;\nmodule.link(\"./status-schema\", {\n  statusSchema(v) {\n    statusSchema = v;\n  }\n\n}, 1);\nlet ArchivedSchema, TimestampSchema, HasManyByRef, DebugModeSchema;\nmodule.link(\"../default-schemas\", {\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  },\n\n  DebugModeSchema(v) {\n    DebugModeSchema = v;\n  }\n\n}, 2);\nlet Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 3);\nlet Counter;\nmodule.link(\"../../lib/counters\", {\n  Counter(v) {\n    Counter = v;\n  }\n\n}, 4);\n\nclass BatchesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"batches\");\n    return super.insert(doc, callback);\n  }\n\n}\n\nconst Batches = new BatchesCollection(\"batches\");\nBatches.helpers({\n  gameCount() {\n    return this.assignment === \"simple\" ? this.simpleConfig.count : this.completeGameCount();\n  },\n\n  completeGameCount() {\n    return _.reduce(this.completeConfig.treatments, (sum, t) => sum + t.count, 0);\n  },\n\n  duplicate() {\n    const {\n      assignment,\n      simpleConfig,\n      completeConfig\n    } = this;\n    Batches.insert({\n      assignment,\n      simpleConfig,\n      completeConfig,\n      status: \"init\"\n    });\n  }\n\n});\nconst maxGamesCount = 10000000;\nconst assignmentTypes = {\n  simple: \"Simple\",\n  complete: \"Complete\"\n};\nBatches.schema = new SimpleSchema({\n  // Auto-incremented number assigned to batches as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n  assignment: {\n    type: String,\n    // \"custom\" not yet supported\n    allowedValues: [\"simple\", \"complete\", \"custom\"]\n  },\n  full: {\n    label: \"Batch is full, all games are running\",\n    type: Boolean,\n    defaultValue: false\n  },\n  runningAt: {\n    label: \"Time when batch started running\",\n    type: Date,\n    optional: true\n  },\n  finishedAt: {\n    label: \"Time when batch finished running\",\n    type: Date,\n    optional: true\n  },\n  // Simple configuration at init\n  simpleConfig: {\n    type: Object,\n    optional: true,\n\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"simple\") {\n        return \"required\";\n      }\n    }\n\n  },\n  \"simpleConfig.count\": {\n    type: SimpleSchema.Integer,\n    min: 1,\n    max: maxGamesCount\n  },\n  \"simpleConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n\n    maxCount() {\n      return Treatments.find().count();\n    }\n\n  },\n  \"simpleConfig.treatments.$\": {\n    type: Object\n  },\n  \"simpleConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"simpleConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  // Complete configuration at init\n  completeConfig: {\n    type: Object,\n    optional: true,\n\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"complete\") {\n        return \"required\";\n      }\n    }\n\n  },\n  \"completeConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n\n    maxCount() {\n      return Treatments.find().count();\n    }\n\n  },\n  \"completeConfig.treatments.$\": {\n    type: Object\n  },\n  \"completeConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"completeConfig.treatments.$.count\": {\n    type: SimpleSchema.Integer,\n    minCount: 1,\n    maxCount: maxGamesCount\n  },\n  \"completeConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Batches.schema.extend(DebugModeSchema);\n}\n\nBatches.schema.extend(statusSchema);\nBatches.schema.extend(TimestampSchema);\nBatches.schema.extend(ArchivedSchema);\nBatches.schema.extend(HasManyByRef(\"Games\"));\nBatches.schema.extend(HasManyByRef(\"GameLobbies\"));\nBatches.attachSchema(Batches.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/batches/hooks.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 0);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 1);\nlet sendPlayersToNextBatches;\nmodule.link(\"../games/create\", {\n  sendPlayersToNextBatches(v) {\n    sendPlayersToNextBatches = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet Batches;\nmodule.link(\"./batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 6);\n// Create GameLobbies\nBatches.after.insert(function (userId, batch) {\n  let gameLobbies = [];\n\n  switch (batch.assignment) {\n    case \"simple\":\n      _.times(batch.simpleConfig.count, index => {\n        const treatment = Random.choice(batch.simpleConfig.treatments);\n        const {\n          _id: treatmentId,\n          lobbyConfigId\n        } = treatment;\n        gameLobbies.push({\n          treatmentId,\n          lobbyConfigId,\n          index\n        });\n      });\n\n      break;\n\n    case \"complete\":\n      batch.completeConfig.treatments.forEach((_ref) => {\n        let {\n          count,\n          _id,\n          lobbyConfigId\n        } = _ref;\n\n        _.times(count, () => {\n          gameLobbies.push({\n            treatmentId: _id,\n            lobbyConfigId\n          });\n        });\n      });\n      gameLobbies = _.shuffle(gameLobbies);\n      gameLobbies.forEach((l, index) => {\n        l.index = index;\n      });\n      break;\n\n    default:\n      console.error(\"Batches.after: unknown assignment: \" + batch.assignment);\n      break;\n  }\n\n  const gameLobbyIds = gameLobbies.map(l => {\n    l._id = Random.id();\n    l.status = batch.status;\n    l.batchId = batch._id; // This is trully horrific. Sorry.\n    // The debug mode is assigned asynchronously onto the batch, which might happen\n    // just as this on insert hook is called. Sorry.\n\n    const batchUpdated = Batches.findOne(batch._id);\n    l.debugMode = batchUpdated.debugMode;\n    const treatment = Treatments.findOne(l.treatmentId);\n    l.availableCount = treatment.factor(\"playerCount\").value;\n    const botsCountCond = treatment.factor(\"botsCount\");\n\n    if (botsCountCond) {\n      const botsCount = botsCountCond.value;\n\n      if (botsCount > l.availableCount) {\n        throw \"Trying to create a game with more bots than players\";\n      }\n\n      if (botsCount === l.availableCount) {\n        //throw \"Creating a game with only bots...\";\n        //Would be good to display a message \"Are you sure you want to create a game with only bots?\"\n        console.log(\"Warning: Creating a game with only bots!\");\n      }\n\n      const botNames = config.bots && _.keys(config.bots);\n\n      if (!config.bots || botNames.length === 0) {\n        throw \"Trying to create a game with bots, but no bots defined\";\n      }\n\n      l.playerIds = [];\n\n      _.times(botsCount, () => {\n        const params = {\n          id: Random.id(),\n          gameLobbyId: l._id,\n          readyAt: new Date(),\n          bot: _.shuffle(botNames)[0]\n        };\n        console.info(\"Creating bot:\", params);\n        const playerId = Players.insert(params);\n        l.playerIds.push(playerId);\n      });\n\n      l.queuedPlayerIds = l.playerIds;\n    }\n\n    return GameLobbies.insert(l);\n  });\n  Batches.update(batch._id, {\n    $set: {\n      gameLobbyIds\n    }\n  });\n}); // Update status on Games and GameLobbies\n\nBatches.after.update(function (userId, _ref2, fieldNames, modifier, options) {\n  let {\n    _id: batchId,\n    status\n  } = _ref2;\n\n  if (!fieldNames.includes(\"status\")) {\n    return;\n  }\n\n  [Games, GameLobbies].forEach(coll => {\n    coll.update({\n      batchId,\n      status: {\n        $nin: [\"finished\", \"cancelled\", \"failed\", \"custom\"]\n      }\n    }, {\n      $set: {\n        status\n      }\n    }, {\n      multi: true\n    });\n  });\n\n  if (status !== \"cancelled\") {\n    return;\n  }\n\n  const games = Games.find({\n    batchId\n  }).fetch();\n\n  const gplayerIds = _.flatten(_.pluck(games, \"playerIds\"));\n\n  Players.update({\n    _id: {\n      $in: gplayerIds\n    },\n    exitAt: {\n      $exists: false\n    }\n  }, {\n    $set: {\n      exitStatus: \"gameCancelled\",\n      exitAt: new Date()\n    }\n  }, {\n    multi: true\n  });\n  const gameLobbies = GameLobbies.find({\n    batchId,\n    gameId: {\n      $exists: false\n    }\n  }).fetch();\n\n  if (gameLobbies.length === 0) {\n    return;\n  }\n\n  const glplayerIds = _.flatten(_.pluck(gameLobbies, \"queuedPlayerIds\"));\n\n  const players = Players.find({\n    _id: {\n      $in: glplayerIds\n    },\n    exitAt: {\n      $exists: false\n    }\n  }).fetch();\n\n  const playerIds = _.pluck(players, \"_id\");\n\n  sendPlayersToNextBatches(playerIds, batchId, gameLobbies[0]);\n}, {\n  fetchPrevious: false\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/batches/methods.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createBatch: () => createBatch,\n  duplicateBatch: () => duplicateBatch,\n  updateBatch: () => updateBatch,\n  updateBatchStatus: () => updateBatchStatus\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet Batches;\nmodule.link(\"./batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 2);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 3);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 4);\nlet IdSchema;\nmodule.link(\"../default-schemas\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 5);\nconst createBatch = new ValidatedMethod({\n  name: \"Batches.methods.create\",\n  validate: Batches.schema.omit(\"gameIds\", \"gameLobbyIds\", \"status\", \"createdAt\", \"updatedAt\", \"debugMode\", \"full\", \"index\").validator(),\n\n  run(batch) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    Batches.insert(batch, {\n      autoConvert: false,\n      filter: false,\n      validate: false\n    });\n  }\n\n});\nconst duplicateBatch = new ValidatedMethod({\n  name: \"Batches.methods.duplicate\",\n  validate: IdSchema.validator(),\n\n  run(_ref) {\n    let {\n      _id\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    batch.duplicate();\n  }\n\n});\nconst updateBatch = new ValidatedMethod({\n  name: \"Batches.methods.updateBatch\",\n  validate: new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  }).extend(IdSchema).validator(),\n\n  run(_ref2) {\n    let {\n      _id,\n      archived\n    } = _ref2;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Batches.update(_id, modifier);\n  }\n\n});\nconst updateBatchStatus = new ValidatedMethod({\n  name: \"Batches.methods.updateStatus\",\n  validate: Batches.schema.pick(\"status\").extend(IdSchema).validator(),\n\n  run(_ref3) {\n    let {\n      _id,\n      status\n    } = _ref3;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    if (status === \"init\") {\n      throw new Error(\"invalid\");\n    }\n\n    const $set = {\n      status\n    };\n\n    if (status === \"running\") {\n      $set.runningAt = new Date();\n      GameLobbies.update({\n        batchId: _id\n      }, {\n        $set: {\n          status: \"running\"\n        }\n      }, {\n        multi: true\n      });\n    }\n\n    Batches.update(_id, {\n      $set\n    });\n  }\n\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  module.export({\n    setBatchInDebugMode: () => setBatchInDebugMode\n  });\n  const setBatchInDebugMode = new ValidatedMethod({\n    name: \"Batches.methods.debugMode\",\n    validate: IdSchema.validator(),\n\n    run(_ref4) {\n      let {\n        _id\n      } = _ref4;\n\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      const batch = Batches.findOne(_id);\n\n      if (!batch) {\n        throw new Error(\"not found\");\n      }\n\n      Batches.update(_id, {\n        $set: {\n          debugMode: true\n        }\n      });\n      GameLobbies.update({\n        batchId: _id\n      }, {\n        $set: {\n          debugMode: true\n        }\n      });\n      Games.update({\n        batchId: _id\n      }, {\n        $set: {\n          debugMode: true\n        }\n      });\n    }\n\n  });\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"status-schema.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/batches/status-schema.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  statusSchema: () => statusSchema\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nconst statusSchema = new SimpleSchema({\n  status: {\n    type: String,\n    allowedValues: [\"init\", // Batch created, not running yet\n    \"running\", // Batch is running\n    // NOTE(np): paused: for now, we don't support paused because we need to do something about timers\n    // \"paused\", // Batch has been pause, ongoing games keep on going but no more new players are accepted. Can be restarted.\n    \"finished\", // Batch has finished and cannot be restarted\n    // NOTE(np): cancelled might break a game if it's running at the moment, gotta be careful\n    \"cancelled\", // Batch was cancelled and cannot be restarted\n    \"failed\", \"custom\" // used for game.end(\"custom reason\")\n    ],\n    defaultValue: \"init\",\n    index: 1\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/batches/server/publications.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet GameLobbies;\nmodule.link(\"../../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet Rounds;\nmodule.link(\"../../rounds/rounds\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 2);\nlet Stages;\nmodule.link(\"../../stages/stages\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 3);\nlet Batches;\nmodule.link(\"../batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 4);\nMeteor.publish(\"admin-batches\", function (props) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!props || props.archived === undefined) {\n    return Batches.find();\n  }\n\n  return Batches.find({\n    archivedAt: {\n      $exists: Boolean(props.archived)\n    }\n  });\n});\nMeteor.publish(\"admin-batch\", function (_ref) {\n  let {\n    batchId\n  } = _ref;\n\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!batchId) {\n    return null;\n  }\n\n  return [GameLobbies.find({\n    batchId\n  }), Games.find({\n    batchId\n  })];\n});\nMeteor.publish(\"admin-batch-game\", function (_ref2) {\n  let {\n    gameId\n  } = _ref2;\n\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!gameId) {\n    return null;\n  }\n\n  return [Rounds.find({\n    gameId\n  }), Stages.find({\n    gameId\n  })];\n});\nMeteor.publish(\"runningBatches\", function (_ref3) {\n  let {\n    playerId\n  } = _ref3;\n  return Batches.find({\n    status: \"running\",\n    full: false\n  }, {\n    fields: {\n      _id: 1,\n      full: 1\n    }\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"factor-types\":{\"factor-types.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factor-types/factor-types.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  FactorTypes: () => FactorTypes\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ArchivedSchema, TimestampSchema;\nmodule.link(\"../default-schemas.js\", {\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 1);\nconst FactorTypes = new Mongo.Collection(\"factor_types\");\nFactorTypes.helpers({}); // requiredFactors hold a list of factors keys that are required by\n// Empirica core to be able to run a game.\n// Required factors are:\n// -`playerCount` determines how many players participate in a game and is\n//   therefore critical to run a game.\n\nFactorTypes.requiredTypes = [\"playerCount\"];\nFactorTypes.types = [\"String\", \"Integer\", \"Number\", \"Boolean\"];\nFactorTypes.schema = new SimpleSchema({\n  required: {\n    type: Boolean\n  },\n  name: {\n    type: String,\n    max: 256,\n    regEx: /^[a-z]+[a-zA-Z0-9]*$/,\n    index: true,\n    unique: true,\n\n    custom() {\n      if (this.isSet && FactorTypes.find({\n        name: this.value\n      }).count() > 0) {\n        return \"notUnique\";\n      }\n    }\n\n  },\n  description: {\n    type: String,\n    min: 1,\n    max: 2048\n  },\n  type: {\n    type: String,\n    allowedValues: FactorTypes.types\n  },\n  min: {\n    type: Number,\n    optional: true\n  },\n  max: {\n    type: Number,\n    optional: true\n  }\n});\nFactorTypes.schema.messageBox.messages({\n  en: {\n    notUnique: \"{{label}} already exists.\"\n  }\n});\nFactorTypes.schema.extend(ArchivedSchema);\nFactorTypes.schema.extend(TimestampSchema);\nFactorTypes.attachSchema(FactorTypes.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factor-types/hooks.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FactorTypes;\nmodule.link(\"./factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 0);\nlet Factors;\nmodule.link(\"../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 1);\nFactorTypes.after.insert(function (userId, factorType) {\n  const {\n    _id: factorTypeId,\n    type\n  } = factorType;\n\n  if (type === \"Boolean\") {\n    [true, false].forEach(value => Factors.insert({\n      factorTypeId,\n      value\n    }));\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factor-types/methods.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createFactorType: () => createFactorType,\n  updateFactorType: () => updateFactorType\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet Factors;\nmodule.link(\"../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"./factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 4);\nconst createFactorType = new ValidatedMethod({\n  name: \"FactorTypes.methods.create\",\n  validate: FactorTypes.schema.omit(\"createdAt\", \"updatedAt\").extend(new SimpleSchema({\n    initialValues: {\n      type: Array,\n      optional: true\n    },\n    \"initialValues.$\": {\n      type: SimpleSchema.oneOf({\n        type: String,\n        scopedUnique: \"type\"\n      }, {\n        type: SimpleSchema.Integer,\n        scopedUnique: \"type\"\n      }, {\n        type: Number,\n        scopedUnique: \"type\"\n      }, {\n        type: Boolean,\n        scopedUnique: \"type\"\n      })\n    }\n  })).validator(),\n\n  run(factorType) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const {\n      initialValues\n    } = factorType;\n    const factorTypeId = FactorTypes.insert(_.omit(factorType, \"initialValues\"), {\n      autoConvert: false\n    });\n    initialValues.forEach(value => Factors.insert({\n      factorTypeId,\n      value\n    }));\n  }\n\n});\nconst updateFactorType = new ValidatedMethod({\n  name: \"FactorTypes.methods.update\",\n  validate: new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  }).extend(IdSchema).validator(),\n\n  run(_ref) {\n    let {\n      _id,\n      archived\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const factorType = FactorTypes.findOne(_id);\n\n    if (!factorType) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (factorType.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!factorType.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    FactorTypes.update(_id, modifier);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"bootstrap.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factor-types/server/bootstrap.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FactorTypes;\nmodule.link(\"../factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 0);\nlet log;\nmodule.link(\"../../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 1);\nlet bootstrapFunctions;\nmodule.link(\"../../../startup/server/bootstrap.js\", {\n  bootstrapFunctions(v) {\n    bootstrapFunctions = v;\n  }\n\n}, 2);\nconst defaultTypes = [{\n  name: \"playerCount\",\n  description: \"The Number of players participating in the given game.\",\n  type: \"Integer\",\n  min: 1,\n  required: true\n}];\nbootstrapFunctions.push(() => {\n  defaultTypes.forEach(type => {\n    const exists = FactorTypes.findOne({\n      name: type.name\n    });\n\n    if (exists) {\n      return;\n    }\n\n    log.info(\"Inserting default Factor Type: \".concat(type.name));\n\n    try {\n      FactorTypes.insert(type);\n    } catch (error) {\n      log.error(\"Failed to insert '\".concat(type.name, \"' default Factor Type: \").concat(err));\n    }\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factor-types/server/publications.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet FactorTypes;\nmodule.link(\"../factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 0);\nMeteor.publish(\"admin-factor-types\", function () {\n  if (!this.userId) {\n    return null;\n  }\n\n  return FactorTypes.find();\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"factors\":{\"factors.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factors/factors.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Factors: () => Factors,\n  typeConversion: () => typeConversion\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ArchivedSchema, BelongsTo, TimestampSchema;\nmodule.link(\"../default-schemas.js\", {\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  },\n\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 1);\nlet FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 2);\nconst Factors = new Mongo.Collection(\"factors\");\nFactors.helpers({\n  label() {\n    let label = this.name;\n    const value = String(this.value);\n\n    if (label !== value) {\n      label += \" (\".concat(value, \")\");\n    }\n\n    return label;\n  },\n\n  factorType() {\n    return FactorTypes.findOne(this.factorTypeId);\n  },\n\n  factorTypeName() {\n    const t = this.factorType();\n    return t && t.name;\n  },\n\n  fullLabel() {\n    return \"\".concat(this.factorTypeName(), \": \").concat(this.label());\n  }\n\n});\nconst typeConversion = {\n  Integer: SimpleSchema.Integer,\n  String: String,\n  Number: Number,\n  Boolean: Boolean\n};\n\nFactors.valueValidation = function (factorType, value, simpleSchmemaType) {\n  const type = typeConversion[factorType.type];\n\n  if (simpleSchmemaType && simpleSchmemaType !== type) {\n    return;\n  }\n\n  const fieldSchema = {\n    type\n  };\n\n  if (factorType.min) {\n    fieldSchema.min = factorType.min;\n  }\n\n  if (factorType.max) {\n    fieldSchema.max = factorType.max;\n  }\n\n  const schema = {\n    value: fieldSchema\n  };\n  const val = new SimpleSchema(schema).newContext();\n  val.validate({\n    value\n  });\n\n  if (!val.isValid()) {\n    return val.validationErrors();\n  }\n\n  if (Factors.find({\n    factorTypeId: factorType._id,\n    value\n  }).count() > 0) {\n    return [{\n      name: \"value\",\n      type: \"scopedUnique\"\n    }];\n  }\n};\n\nconst valueValidation = function () {\n  if (this.key !== \"value\") {\n    return;\n  }\n\n  const factorTypeId = this.field(\"factorTypeId\").value;\n  const factorType = FactorTypes.findOne(factorTypeId);\n  const value = this.value;\n  const errors = Factors.valueValidation(factorType, value);\n\n  if (errors) {\n    this.addValidationErrors(errors);\n    return false;\n  }\n};\n\nFactors.schema = new SimpleSchema({\n  name: {\n    type: String,\n\n    autoValue() {\n      if (!this.isSet && (this.isInsert || Meteor.isClient)) {\n        return String(this.field(\"value\").value).slice(0, 32);\n      }\n    },\n\n    max: 256,\n    regEx: /^[a-zA-Z0-9_\\.]+$/\n  },\n  value: {\n    type: SimpleSchema.oneOf({\n      type: String\n    }, {\n      type: SimpleSchema.Integer\n    }, {\n      type: Number\n    }, {\n      type: Boolean\n    })\n  }\n});\nFactors.schema.addValidator(valueValidation);\nFactors.schema.extend(ArchivedSchema);\nFactors.schema.extend(BelongsTo(\"FactorTypes\"));\nFactors.schema.extend(TimestampSchema);\nFactors.attachSchema(Factors.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factors/methods.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createFactor: () => createFactor,\n  updateFactor: () => updateFactor\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Factors;\nmodule.link(\"./factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 4);\nlet handleFactorValueErrorMessage;\nmodule.link(\"../../lib/utils.js\", {\n  handleFactorValueErrorMessage(v) {\n    handleFactorValueErrorMessage = v;\n  }\n\n}, 5);\nconst createFactor = new ValidatedMethod({\n  name: \"Factors.methods.create\",\n  validate: Factors.schema.omit(\"createdAt\", \"updatedAt\").validator(),\n\n  run(factor) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const factorType = FactorTypes.findOne(factor.factorTypeId);\n\n    if (!factorType) {\n      throw new Error(\"not found\");\n    }\n\n    const errors = Factors.valueValidation(factorType, factor.value);\n\n    if (errors) {\n      throw new Error(errors.map(e => handleFactorValueErrorMessage(e)).join(\"\\n\"));\n    }\n\n    Factors.insert(factor, {\n      autoConvert: false\n    });\n  }\n\n});\nconst updateFactor = new ValidatedMethod({\n  name: \"Factors.methods.update\",\n  validate: Factors.schema.pick(\"name\").extend(IdSchema).extend(new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })).validator(),\n\n  run(_ref) {\n    let {\n      _id,\n      name,\n      archived\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const factor = Factors.findOne(_id);\n\n    if (!factor) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (name !== undefined) {\n      $set.name = name;\n    }\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (factor.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!factor.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Factors.update(_id, modifier);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/factors/server/publications.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Factors;\nmodule.link(\"../factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 0);\nMeteor.publish(\"admin-factors\", function () {\n  if (!this.userId) {\n    return null;\n  }\n\n  return [Factors.find()];\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"game-lobbies\":{\"game-lobbies.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/game-lobbies/game-lobbies.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  GameLobbies: () => GameLobbies\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet statusSchema;\nmodule.link(\"../batches/status-schema\", {\n  statusSchema(v) {\n    statusSchema = v;\n  }\n\n}, 1);\nlet Batches;\nmodule.link(\"../batches/batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 2);\nlet BelongsTo, HasManyByRef, TimestampSchema;\nmodule.link(\"../default-schemas\", {\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 3);\nlet DebugModeSchema, UserDataSchema;\nmodule.link(\"../default-schemas.js\", {\n  DebugModeSchema(v) {\n    DebugModeSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  }\n\n}, 4);\nlet Players;\nmodule.link(\"../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 5);\nlet Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 6);\nconst GameLobbies = new Mongo.Collection(\"game_lobbies\");\nGameLobbies.helpers({\n  players() {\n    return Players.find({\n      _id: {\n        $in: this.playerIds\n      }\n    }).fetch();\n  },\n\n  batch() {\n    return Batches.findOne({\n      _id: this.batchId\n    });\n  },\n\n  treatment() {\n    return Treatments.findOne({\n      _id: this.treatmentId\n    });\n  }\n\n});\nGameLobbies.schema = new SimpleSchema({\n  // index allows for an ordering of lobbies so we know which one\n  // to choose from next\n  index: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    label: \"Position\"\n  },\n  // availableCount tells us how many slots are available in this lobby\n  // (== treatment.playerCount)\n  availableCount: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    label: \"Available Slots Count\"\n  },\n  timeoutStartedAt: {\n    label: \"Time the first player arrived in the lobby\",\n    type: Date,\n    optional: true\n  },\n  timedOutAt: {\n    label: \"Time when the lobby timed out and was cancelled\",\n    type: Date,\n    optional: true,\n    index: 1\n  },\n  endReason: {\n    label: \"Ended Reason\",\n    type: String,\n    optional: true,\n    regEx: /[a-zA-Z0-9_]+/\n  },\n  // Queued players are players that have been associated with the lobby\n  // but are not confirmed for the game yet. playerIds is used for confirmed\n  // players\n  // There might be more queued player than availableCount as we\n  // allow overbooking to make games start faster.\n  queuedPlayerIds: {\n    type: Array,\n    defaultValue: [],\n    label: \"Queued Players\",\n    index: true\n  },\n  \"queuedPlayerIds.$\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    label: \"Queued Player\"\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  GameLobbies.schema.extend(DebugModeSchema);\n}\n\nGameLobbies.schema.extend(UserDataSchema);\nGameLobbies.schema.extend(TimestampSchema); // playerIds tells us how many players are ready to start (finished intro)\n// Once playerIds.length == availableCount, the game starts. Player that are\n// queued but haven't made it past the intro in time will be led to the outro\n// directly.\n\nGameLobbies.schema.extend(HasManyByRef(\"Players\"));\nGameLobbies.schema.extend(BelongsTo(\"Games\", false));\nGameLobbies.schema.extend(BelongsTo(\"Treatments\"));\nGameLobbies.schema.extend(BelongsTo(\"Batches\"));\nGameLobbies.schema.extend(BelongsTo(\"LobbyConfigs\")); // We are denormalizing the parent batch status in order to make clean queries\n\nGameLobbies.schema.extend(statusSchema);\nGameLobbies.attachSchema(GameLobbies.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/game-lobbies/hooks.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet LobbyConfigs;\nmodule.link(\"../lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 2);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 3);\nlet createGameFromLobby;\nmodule.link(\"../games/create\", {\n  createGameFromLobby(v) {\n    createGameFromLobby = v;\n  }\n\n}, 4);\nlet checkBatchFull, checkForBatchFinished;\nmodule.link(\"../games/hooks.js\", {\n  checkBatchFull(v) {\n    checkBatchFull = v;\n  },\n\n  checkForBatchFinished(v) {\n    checkForBatchFinished = v;\n  }\n\n}, 5);\n// Check if batch is full or the game finished if this lobby timed out\nGameLobbies.after.update(function (userId, _ref, fieldNames, modifier, options) {\n  let {\n    batchId\n  } = _ref;\n\n  if (!fieldNames.includes(\"timedOutAt\")) {\n    return;\n  }\n\n  checkBatchFull(batchId);\n  checkForBatchFinished(batchId);\n}); // Start the game if lobby full\n\nGameLobbies.after.update(function (userId, doc, fieldNames, modifier, options) {\n  if (!(fieldNames.includes(\"playerIds\") || fieldNames.includes(\"status\") && doc.status == \"running\")) {\n    return;\n  }\n\n  const gameLobby = this.transform();\n  const humanPlayers = [];\n\n  if (gameLobby.playerIds && gameLobby.playerIds.length > 0) {\n    const players = Players.find({\n      _id: {\n        $in: gameLobby.playerIds\n      }\n    }).fetch();\n    humanPlayers.push(...players.filter(p => !p.bot));\n  }\n\n  const readyPlayersCount = gameLobby.playerIds.length; // If the lobby timeout it hasn't started yet and the lobby isn't full yet\n  // (single player), try to start the timeout timer.\n\n  if (humanPlayers.length > 0 && gameLobby.availableCount != 1 && !gameLobby.timeoutStartedAt) {\n    const lobbyConfig = LobbyConfigs.findOne(gameLobby.lobbyConfigId);\n\n    if (lobbyConfig.timeoutType === \"lobby\") {\n      GameLobbies.update(gameLobby._id, {\n        $set: {\n          timeoutStartedAt: new Date()\n        }\n      });\n    }\n  } // If the readyPlayersCount went to 0 (disconnections for example), reset the\n  // lobby timeout.\n\n\n  if (humanPlayers.length === 0 && gameLobby.timeoutStartedAt) {\n    const lobbyConfig = LobbyConfigs.findOne(gameLobby.lobbyConfigId);\n\n    if (lobbyConfig.timeoutType === \"lobby\") {\n      GameLobbies.update(gameLobby._id, {\n        $unset: {\n          timeoutStartedAt: \"\"\n        }\n      });\n    }\n  } // If there are not enough players ready, wait\n\n\n  if (readyPlayersCount < gameLobby.availableCount) {\n    return;\n  } // Game already created (?!)\n\n\n  if (Games.find({\n    gameLobbyId: gameLobby._id\n  }).count() > 0) {\n    return;\n  } // Create Game\n\n\n  createGameFromLobby(gameLobby);\n}, {\n  fetchPrevious: false\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/game-lobbies/methods.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  updateGameLobbyData: () => updateGameLobbyData,\n  earlyExitGameLobby: () => earlyExitGameLobby\n});\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 2);\nlet GameLobbies;\nmodule.link(\"./game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 3);\nlet Players;\nmodule.link(\"../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 4);\nlet Batches;\nmodule.link(\"../batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 5);\nconst updateGameLobbyData = new ValidatedMethod({\n  name: \"GameLobbies.methods.updateData\",\n  validate: new SimpleSchema({\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      gameLobbyId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const gameLobby = GameLobbies.findOne(gameLobbyId);\n\n    if (!gameLobby) {\n      throw new Error(\"game lobbies not found\");\n    } // TODO check can update this record game\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    GameLobbies.update(gameLobbyId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        gameLobbyId,\n        gameLobby,\n        key,\n        value: val,\n        prevValue: gameLobby.data && gameLobby.data[key],\n        append\n      });\n    }\n  }\n\n});\nconst earlyExitGameLobby = new ValidatedMethod({\n  name: \"GameLobbies.methods.earlyExit\",\n  validate: new SimpleSchema({\n    exitReason: {\n      label: \"Reason for Exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    status: {\n      label: \"Status for lobby after exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref2) {\n    let {\n      exitReason,\n      gameLobbyId,\n      status\n    } = _ref2;\n\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const gameLobby = GameLobbies.findOne(gameLobbyId);\n    const exitStatus = status || \"failed\";\n\n    if (!gameLobby) {\n      throw new Error(\"gameLobby not found\");\n    }\n\n    Players.update({\n      gameLobbyId\n    }, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: exitStatus,\n        exitReason\n      }\n    });\n    GameLobbies.update(gameLobbyId, {\n      $set: {\n        status: exitStatus,\n        endReason: exitReason\n      }\n    });\n    const batch = Batches.findOne(gameLobby.batchId);\n    const availableLobby = GameLobbies.findOne({\n      $and: [{\n        _id: {\n          $in: batch.gameLobbyIds\n        }\n      }, {\n        status: {\n          $in: [\"init\", \"running\"]\n        }\n      }]\n    }); // End batch if there is no available lobby\n\n    if (!availableLobby) {\n      Batches.update({\n        gameLobbyIds: gameLobbyId\n      }, {\n        $set: {\n          status: exitStatus,\n          finishedAt: new Date()\n        }\n      });\n    }\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"cron.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/game-lobbies/server/cron.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet GameLobbies;\nmodule.link(\"../game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 1);\nlet LobbyConfigs;\nmodule.link(\"../../lobby-configs/lobby-configs\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 2);\nlet Players;\nmodule.link(\"../../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 3);\nlet createGameFromLobby;\nmodule.link(\"../../games/create.js\", {\n  createGameFromLobby(v) {\n    createGameFromLobby = v;\n  }\n\n}, 4);\nlet Cron;\nmodule.link(\"../../../startup/server/cron.js\", {\n  default(v) {\n    Cron = v;\n  }\n\n}, 5);\n\nconst checkLobbyTimeout = (log, lobby, lobbyConfig) => {\n  // Timeout hasn't started yet\n  if (!lobby.timeoutStartedAt) {\n    return;\n  }\n\n  const now = moment();\n  const startTimeAt = moment(lobby.timeoutStartedAt);\n  const endTimeAt = startTimeAt.add(lobbyConfig.timeoutInSeconds, \"seconds\");\n  const ended = now.isSameOrAfter(endTimeAt);\n\n  if (!ended) {\n    return;\n  }\n\n  switch (lobbyConfig.timeoutStrategy) {\n    case \"fail\":\n      GameLobbies.update(lobby._id, {\n        $set: {\n          timedOutAt: new Date(),\n          status: \"failed\"\n        }\n      });\n      Players.update({\n        _id: {\n          $in: lobby.queuedPlayerIds\n        }\n      }, {\n        $set: {\n          exitStatus: \"gameLobbyTimedOut\",\n          exitAt: new Date()\n        }\n      }, {\n        multi: true\n      });\n      break;\n\n    case \"ignore\":\n      createGameFromLobby(lobby);\n      break;\n    // case \"bots\": {\n    //   break;\n    // }\n\n    default:\n      log.error(\"unknown LobbyConfig.timeoutStrategy: \".concat(lobbyConfig.timeoutStrategy));\n  }\n};\n\nconst checkIndividualTimeout = (log, lobby, lobbyConfig) => {\n  const now = moment();\n  Players.find({\n    _id: {\n      $in: lobby.playerIds\n    }\n  }).forEach(player => {\n    const startTimeAt = moment(player.timeoutStartedAt);\n    const endTimeAt = startTimeAt.add(lobbyConfig.timeoutInSeconds, \"seconds\");\n    const ended = now.isSameOrAfter(endTimeAt);\n\n    if (!ended || player.timeoutWaitCount <= lobbyConfig.extendCount) {\n      return;\n    }\n\n    Players.update(player._id, {\n      $set: {\n        exitStatus: \"playerLobbyTimedOut\",\n        exitAt: new Date()\n      }\n    });\n    GameLobbies.update(lobby._id, {\n      $pull: {\n        playerIds: player._id // We keep the player in queuedPlayerIds so they will still have the\n        // fact they were in a lobby available in the UI, and so we can show\n        // them the exit steps.\n\n      }\n    });\n  });\n};\n\nCron.add({\n  name: \"Check lobby timeouts\",\n  interval: 1000,\n  task: function (log) {\n    const query = {\n      status: \"running\",\n      gameId: {\n        $exists: false\n      },\n      timedOutAt: {\n        $exists: false\n      }\n    };\n    GameLobbies.find(query).forEach(lobby => {\n      const lobbyConfig = LobbyConfigs.findOne(lobby.lobbyConfigId);\n\n      switch (lobbyConfig.timeoutType) {\n        case \"lobby\":\n          checkLobbyTimeout(log, lobby, lobbyConfig);\n          break;\n\n        case \"individual\":\n          checkIndividualTimeout(log, lobby, lobbyConfig);\n          break;\n\n        default:\n          log.error(\"unknown LobbyConfig.timeoutType: \".concat(lobbyConfig.timeoutType));\n      }\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/game-lobbies/server/publications.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet publishComposite;\nmodule.link(\"meteor/reywood:publish-composite\", {\n  publishComposite(v) {\n    publishComposite = v;\n  }\n\n}, 0);\nlet Factors;\nmodule.link(\"../../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 1);\nlet LobbyConfigs;\nmodule.link(\"../../lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 2);\nlet Players;\nmodule.link(\"../../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 3);\nlet Treatments;\nmodule.link(\"../../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 4);\nlet GameLobbies;\nmodule.link(\"../game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 5);\npublishComposite(\"gameLobby\", function (_ref) {\n  let {\n    playerId\n  } = _ref;\n  return {\n    find() {\n      return Players.find(playerId);\n    },\n\n    children: [{\n      find(_ref2) {\n        let {\n          gameLobbyId\n        } = _ref2;\n        return GameLobbies.find({\n          _id: gameLobbyId\n        });\n      },\n\n      children: [{\n        find(_ref3) {\n          let {\n            treatmentId\n          } = _ref3;\n          return Treatments.find(treatmentId);\n        },\n\n        children: [{\n          find(_ref4) {\n            let {\n              factorIds\n            } = _ref4;\n            return Factors.find({\n              _id: {\n                $in: factorIds\n              }\n            });\n          }\n\n        }]\n      }, {\n        find(_ref5) {\n          let {\n            lobbyConfigId\n          } = _ref5;\n          return LobbyConfigs.find(lobbyConfigId);\n        }\n\n      }]\n    }]\n  };\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"games\":{\"augment.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/augment.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  augmentGameObject: () => augmentGameObject\n});\nlet Stages;\nmodule.link(\"../stages/stages\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 0);\nlet augmentPlayerStageRound;\nmodule.link(\"../player-stages/augment\", {\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  }\n\n}, 1);\nlet Rounds;\nmodule.link(\"../rounds/rounds\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 2);\nlet Players;\nmodule.link(\"../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 3);\n\nconst augmentGameObject = (_ref) => {\n  let {\n    game,\n    treatment,\n    round = undefined,\n    stage = undefined,\n    firstRoundId = undefined,\n    currentStageId = undefined\n  } = _ref;\n  let gameTreatment = null,\n      gamePlayers = null,\n      gameRounds = null,\n      gameStages = null;\n  Object.defineProperties(game, {\n    treatment: {\n      get() {\n        if (!gameTreatment) {\n          gameTreatment = treatment.factorsObject();\n        }\n\n        return gameTreatment;\n      }\n\n    },\n    players: {\n      get() {\n        if (!gamePlayers) {\n          gamePlayers = Players.find({\n            _id: {\n              $in: game.playerIds\n            }\n          }).fetch();\n\n          if (firstRoundId) {\n            round = Rounds.findOne(firstRoundId);\n            stage = round.stages.find(s => s._id === currentStageId);\n          }\n\n          gamePlayers.forEach(player => {\n            player.round = _.extend({}, round);\n            player.stage = _.extend({}, stage);\n            augmentPlayerStageRound(player, player.stage, player.round, game);\n          });\n        }\n\n        return gamePlayers;\n      }\n\n    },\n    rounds: {\n      get() {\n        if (!gameRounds) {\n          gameRounds = Rounds.find({\n            gameId: game._id\n          }).fetch();\n          gameRounds.forEach(round => {\n            let stages = null;\n            Object.defineProperty(round, \"stages\", {\n              get() {\n                if (!stages) {\n                  stages = Stages.find({\n                    roundId: round._id\n                  }).fetch();\n                }\n\n                return stages;\n              }\n\n            });\n          });\n        }\n\n        return gameRounds;\n      }\n\n    },\n    stages: {\n      get() {\n        if (!gameStages) {\n          gameStages = Stages.find({\n            gameId: game._id\n          }).fetch();\n        }\n\n        return gameStages;\n      }\n\n    }\n  });\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"create.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/create.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  createGameFromLobby: () => createGameFromLobby,\n  sendPlayersToNextBatches: () => sendPlayersToNextBatches\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet Batches;\nmodule.link(\"../batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 1);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"./games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet PlayerRounds;\nmodule.link(\"../player-rounds/player-rounds\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 4);\nlet PlayerStages;\nmodule.link(\"../player-stages/player-stages\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 5);\nlet Players;\nmodule.link(\"../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 6);\nlet Rounds;\nmodule.link(\"../rounds/rounds\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 7);\nlet Stages;\nmodule.link(\"../stages/stages\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 8);\nlet earlyExitGameLobby;\nmodule.link(\"../game-lobbies/methods\", {\n  earlyExitGameLobby(v) {\n    earlyExitGameLobby = v;\n  }\n\n}, 9);\nlet augmentPlayerStageRound, augmentGameStageRound;\nmodule.link(\"../player-stages/augment.js\", {\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  },\n\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  }\n\n}, 10);\nlet augmentGameObject;\nmodule.link(\"../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 11);\nlet config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 12);\nlet weightedRandom;\nmodule.link(\"../../lib/utils.js\", {\n  weightedRandom(v) {\n    weightedRandom = v;\n  }\n\n}, 13);\nlet log;\nmodule.link(\"../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 14);\nlet gameLobbyLock;\nmodule.link(\"../../gameLobby-lock.js\", {\n  default(v) {\n    gameLobbyLock = v;\n  }\n\n}, 15);\nconst addStageErrMsg = \"\\\"round.addStage()\\\" requires an argument object with 3 properties:\\n- name: internal name you'll use to write conditional logic in your experiment.\\n- displayName: the name of the Stage the player will see in the UI.\\n- durationInSeconds: the duration in seconds of the stage\\n\\ne.g.: round.addStage({\\n  name: \\\"response\\\",\\n  displayName: \\\"Response\\\",\\n  durationInSeconds: 120\\n});\\n\\n\";\n\nconst createGameFromLobby = gameLobby => {\n  if (Games.find({\n    gameLobbyId: gameLobby._id\n  }).count() > 0) {\n    return;\n  }\n\n  const players = gameLobby.players();\n  const batch = gameLobby.batch();\n  const treatment = gameLobby.treatment();\n  const factors = treatment.factorsObject();\n  const {\n    batchId,\n    treatmentId,\n    status,\n    debugMode\n  } = gameLobby;\n  players.forEach(player => {\n    player.data = player.data || {};\n\n    player.set = (key, value) => {\n      player.data[key] = value;\n    };\n\n    player.get = key => {\n      return player.data[key];\n    };\n  }); // Ask (experimenter designer) init function to configure this game\n  // given the factors and players given.\n\n  const params = {\n    data: _objectSpread({}, gameLobby.data),\n    rounds: [],\n    players\n  };\n  var gameCollector = {\n    players,\n    treatment: factors,\n\n    get(k) {\n      return params.data[k];\n    },\n\n    set(k, v) {\n      params.data[k] = v;\n    },\n\n    addRound(props) {\n      const data = props ? props.data : {} || {};\n      const round = {\n        data,\n        stages: []\n      };\n      params.rounds.push(round);\n      return {\n        get(k) {\n          return round.data[k];\n        },\n\n        set(k, v) {\n          round.data[k] = v;\n        },\n\n        addStage(_ref) {\n          let {\n            name,\n            displayName,\n            durationInSeconds,\n            data = {}\n          } = _ref;\n\n          try {\n            if (!name || !displayName || !durationInSeconds) {\n              log.error(addStageErrMsg);\n              log.error(\"Got: \".concat(JSON.stringify({\n                name,\n                displayName,\n                durationInSeconds\n              }, null, \"  \")));\n              throw \"gameInit error\";\n            }\n\n            const durationInSecondsAsInt = parseInt(durationInSeconds);\n\n            if (Number.isNaN(durationInSecondsAsInt) || durationInSecondsAsInt < 1) {\n              console.error(\"Error in addStage call: durationInSeconds must be an number > 0 (name: \".concat(name, \")\"));\n            }\n\n            const stage = {\n              name,\n              displayName,\n              durationInSeconds: durationInSecondsAsInt\n            };\n            round.stages.push(_objectSpread({}, stage, {\n              data\n            }));\n            return _objectSpread({}, stage, {\n              get(k) {\n                return data[k];\n              },\n\n              set(k, v) {\n                data[k] = v;\n              }\n\n            });\n          } catch (error) {\n            earlyExitGameLobby.call({\n              exitReason: \"initError\",\n              gameLobbyId: gameLobby._id\n            });\n          }\n        }\n\n      };\n    }\n\n  };\n\n  try {\n    gameLobbyLock[gameLobby._id] = true;\n    config.gameInit(gameCollector, factors);\n  } catch (err) {\n    console.error(\"fatal error encounter calling Empirica.gameInit:\");\n    console.error(err);\n    earlyExitGameLobby.call({\n      exitReason: \"gameError\",\n      gameLobbyId: gameLobby._id\n    });\n    return;\n  }\n\n  if (!params.rounds || params.rounds.length === 0) {\n    throw \"at least one round must be added per game\";\n  }\n\n  params.rounds.forEach(round => {\n    if (!round.stages || round.stages.length === 0) {\n      throw \"at least one stage must be added per round\";\n    }\n\n    round.stages.forEach((_ref2) => {\n      let {\n        name,\n        displayName,\n        durationInSeconds\n      } = _ref2;\n\n      // This should never happen as we already verified it above.\n      if (!name || !displayName || !durationInSeconds) {\n        log.error(addStageErrMsg);\n        throw \"invalid stage\";\n      }\n    });\n  }); // Keep debug mode from lobby\n\n  params.debugMode = debugMode; // We need to create/configure stuff associated with the game before we\n  // create it so we generate the id early\n\n  const gameId = gameLobby._id;\n  params._id = gameId;\n  params.gameLobbyId = gameLobby._id; // We also add a few related objects\n\n  params.treatmentId = treatmentId;\n  params.batchId = batchId;\n  params.status = status; // playerIds is the reference to players stored in the game object\n\n  params.playerIds = _.pluck(params.players, \"_id\"); // We then need to verify all these ids exist and are unique, the\n  // init function might not have returned them correctly\n\n  const len = _.uniq(_.compact(params.playerIds)).length;\n\n  if (len !== params.players.length || len !== players.length) {\n    throw new Error(\"invalid player count\");\n  } // We want to copy over the changes made by the init function and save the\n  // gameId in the player objects already in the DB\n\n\n  params.players.forEach((_ref3) => {\n    let {\n      _id,\n      data\n    } = _ref3;\n    Players.update(_id, {\n      $set: {\n        gameId,\n        data\n      }\n    }, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n  }); // Create the round objects\n\n  let stageIndex = 0;\n  let totalDuration = 0;\n  let firstRoundId;\n  const insertOption = {\n    autoConvert: false,\n    filter: false,\n    validate: false,\n    trimStrings: false,\n    removeEmptyStrings: false\n  };\n  let StagesUpdateOp = Stages.rawCollection().initializeUnorderedBulkOp();\n  let RoundsOp = Rounds.rawCollection().initializeUnorderedBulkOp();\n  let StagesOp = Stages.rawCollection().initializeUnorderedBulkOp();\n  let roundsOpResult;\n  let stagesOpResult;\n  params.rounds.forEach((round, index) => RoundsOp.insert(_.extend({\n    gameId,\n    index,\n    _id: Random.id(),\n    createdAt: new Date(),\n    data: {}\n  }, round), insertOption));\n  roundsOpResult = Meteor.wrapAsync(RoundsOp.execute, RoundsOp)();\n  const roundIds = roundsOpResult.getInsertedIds().map(ids => ids._id);\n  params.roundIds = roundIds;\n  RoundsOp = Rounds.rawCollection().initializeUnorderedBulkOp();\n  params.rounds.forEach((round, index) => {\n    const roundId = roundIds[index];\n    const {\n      players\n    } = params;\n    StagesOp = Stages.rawCollection().initializeUnorderedBulkOp();\n    let PlayerStagesOp = PlayerStages.rawCollection().initializeUnorderedBulkOp();\n    let PlayerRoundsOp = PlayerRounds.rawCollection().initializeUnorderedBulkOp();\n    round.stages.forEach(stage => {\n      if (batch.debugMode) {\n        stage.durationInSeconds = 60 * 60; // Stage time in debugMode is 1h\n      }\n\n      totalDuration += stage.durationInSeconds;\n\n      const sParams = _.extend({\n        gameId,\n        roundId,\n        index: stageIndex,\n        _id: Random.id(),\n        createdAt: new Date(),\n        data: {}\n      }, stage);\n\n      StagesOp.insert(sParams, insertOption);\n      stageIndex++;\n    });\n    stagesOpResult = Meteor.wrapAsync(StagesOp.execute, StagesOp)();\n    const stageIds = stagesOpResult.getInsertedIds().map(ids => ids._id);\n    stageIds.forEach(stageId => {\n      if (!params.currentStageId) {\n        firstRoundId = roundId;\n        params.currentStageId = stageId;\n      }\n\n      players.forEach((_ref4) => {\n        let {\n          _id: playerId\n        } = _ref4;\n        return PlayerStagesOp.insert({\n          playerId,\n          stageId,\n          roundId,\n          gameId,\n          batchId,\n          _id: Random.id(),\n          createdAt: new Date(),\n          data: {}\n        });\n      });\n    });\n    const playerStagesResult = Meteor.wrapAsync(PlayerStagesOp.execute, PlayerStagesOp)();\n    const playerStageIds = playerStagesResult.getInsertedIds().map(ids => ids._id);\n    stageIds.forEach(stageId => StagesUpdateOp.find({\n      _id: stageId\n    }).upsert().updateOne({\n      $set: {\n        playerStageIds,\n        updatedAt: new Date()\n      }\n    }));\n    players.forEach((_ref5) => {\n      let {\n        _id: playerId\n      } = _ref5;\n      return PlayerRoundsOp.insert({\n        playerId,\n        roundId,\n        gameId,\n        batchId,\n        _id: Random.id(),\n        data: {},\n        createdAt: new Date()\n      });\n    });\n    const playerRoundIdsResult = Meteor.wrapAsync(PlayerRoundsOp.execute, PlayerRoundsOp)();\n    const playerRoundIds = playerRoundIdsResult.getInsertedIds().map(ids => ids._id);\n    RoundsOp.find({\n      _id: roundId\n    }).upsert().updateOne({\n      $set: {\n        stageIds,\n        playerRoundIds,\n        updatedAt: new Date()\n      }\n    });\n  });\n  Meteor.wrapAsync(StagesUpdateOp.execute, StagesUpdateOp)();\n  Meteor.wrapAsync(RoundsOp.execute, RoundsOp)(); // An estimation of the finish time to help querying.\n  // At the moment, this will 100% break with pausing the game/batch.\n\n  params.estFinishedTime = moment() // Give it an extra 24h (86400s) window for the inter-stage sync buffer.\n  // It was 5 min and that failed on an experiment with many rounds.\n  // This value is not extremely useful, it's main purpose is currently\n  // to stop querying games indefinitely in the update game background job.\n  // It was also meant to be an approximate estimate for when the game could\n  // end at the maximum, that we could show in the admin, but it can no longer\n  // work, and it is questionable if the \"stop querying\" \"feature\" is still\n  // adequate.\n  .add(totalDuration + 86400, \"seconds\").toDate(); // We're no longer filtering out unspecified fields on insert because of a\n  // simpleschema bug, so we need to remove invalid params now.\n\n  delete params.players;\n  delete params.rounds; // Insert game. As soon as it comes online, the game will start for the\n  // players so all related object (rounds, stages, players) must be created\n  // and ready\n\n  Games.insert(params, {\n    autoConvert: false,\n    filter: false,\n    validate: false,\n    trimStrings: false,\n    removeEmptyStrings: false\n  }); // Let Game Lobby know Game ID\n\n  GameLobbies.update(gameLobby._id, {\n    $set: {\n      gameId\n    }\n  }); //\n  // Overbooking\n  //\n  // Overbooked players that did not finish the intro and won't be in this game\n\n  const failedPlayerIds = _.difference(gameLobby.queuedPlayerIds, gameLobby.playerIds);\n\n  sendPlayersToNextBatches(failedPlayerIds, batchId, gameLobby); //\n  // Call the callbacks\n  //\n\n  const {\n    onRoundStart,\n    onGameStart,\n    onStageStart\n  } = config;\n\n  if ((onGameStart || onRoundStart || onStageStart) && firstRoundId) {\n    const game = Games.findOne(gameId);\n    augmentGameObject({\n      game,\n      treatment,\n      firstRoundId,\n      currentStageId: params.currentStageId\n    });\n    const nextRound = game.rounds.find(r => r._id === firstRoundId);\n    const nextStage = nextRound.stages.find(s => s._id === params.currentStageId);\n    augmentGameStageRound(game, nextStage, nextRound);\n\n    if (onGameStart) {\n      onGameStart(game);\n    }\n\n    if (onRoundStart) {\n      onRoundStart(game, nextRound);\n    }\n\n    if (onStageStart) {\n      onStageStart(game, nextRound, nextStage);\n    }\n  } //\n  // Start the game\n  //\n\n\n  const startTimeAt = moment().add(Stages.stagePaddingDuration).toDate();\n  Stages.update(params.currentStageId, {\n    $set: {\n      startTimeAt\n    }\n  });\n  delete gameLobbyLock[gameLobby._id];\n};\n\nfunction sendPlayersToNextBatches(playerIds, batchId, gameLobby) {\n  // Find other lobbies that are not full yet with the same treatment\n  const runningBatches = Batches.find({\n    _id: {\n      $ne: batchId\n    },\n    status: \"running\"\n  }, {\n    sort: {\n      runningAt: 1\n    }\n  });\n  const {\n    treatmentId\n  } = gameLobby;\n  const lobbiesGroups = runningBatches.map(() => []);\n  const runningBatcheIds = runningBatches.map(b => b._id);\n  lobbiesGroups.push([]);\n  const possibleLobbies = GameLobbies.find({\n    _id: {\n      $ne: gameLobby._id\n    },\n    status: \"running\",\n    timedOutAt: {\n      $exists: false\n    },\n    gameId: {\n      $exists: false\n    },\n    treatmentId\n  }).fetch();\n  possibleLobbies.forEach(lobby => {\n    if (lobby.batchId === batchId) {\n      lobbiesGroups[0].push(lobby);\n    } else {\n      lobbiesGroups[runningBatcheIds.indexOf(lobby.batchId) + 1].push(lobby);\n    }\n  }); // If no lobbies left, lead players to exit\n\n  if (possibleLobbies.length === 0) {\n    if (playerIds.length > 0) {\n      Players.update({\n        _id: {\n          $in: playerIds\n        }\n      }, {\n        $set: {\n          exitAt: new Date(),\n          exitStatus: \"gameFull\"\n        }\n      }, {\n        multi: true\n      });\n    }\n\n    return;\n  }\n\n  for (let i = 0; i < lobbiesGroups.length; i++) {\n    const lobbies = lobbiesGroups[i];\n\n    if (lobbies.length === 0) {\n      continue;\n    } // If there are lobbies remaining, distribute them across the lobbies\n    // proportinally to the initial playerCount\n\n\n    const weigthedLobbyPool = weightedRandom(lobbies.map(lobby => {\n      return {\n        value: lobby,\n        weight: lobby.availableCount\n      };\n    }));\n\n    for (let i = 0; i < playerIds.length; i++) {\n      const playerId = playerIds[i];\n      const lobby = weigthedLobbyPool(); // Adding the player to specified lobby queue\n\n      const $addToSet = {\n        queuedPlayerIds: playerId\n      };\n\n      if (gameLobby.playerIds.includes(playerId)) {\n        $addToSet.playerIds = playerId;\n      }\n\n      GameLobbies.update(lobby._id, {\n        $addToSet\n      });\n      Players.update(playerId, {\n        $set: {\n          gameLobbyId: lobby._id\n        }\n      });\n    }\n\n    break;\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"games.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/games.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Games: () => Games\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Counter;\nmodule.link(\"../../lib/counters\", {\n  Counter(v) {\n    Counter = v;\n  }\n\n}, 1);\nlet statusSchema;\nmodule.link(\"../batches/status-schema\", {\n  statusSchema(v) {\n    statusSchema = v;\n  }\n\n}, 2);\nlet BelongsTo, HasManyByRef, TimestampSchema;\nmodule.link(\"../default-schemas\", {\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 3);\nlet DebugModeSchema, UserDataSchema;\nmodule.link(\"../default-schemas.js\", {\n  DebugModeSchema(v) {\n    DebugModeSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  }\n\n}, 4);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 5);\nlet Treatments;\nmodule.link(\"../treatments/treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 6);\nlet Batches;\nmodule.link(\"../batches/batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 7);\nlet Players;\nmodule.link(\"../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 8);\nlet Stages;\nmodule.link(\"../stages/stages\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 9);\nlet Rounds;\nmodule.link(\"../rounds/rounds\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 10);\n\nclass GamesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"games\");\n    return super.insert(doc, callback);\n  }\n\n}\n\nconst Games = new GamesCollection(\"games\");\nGames.schema = new SimpleSchema({\n  // Auto-incremented number assigned to games as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n  // estFinishedTime is adding up all stages timings when the game is\n  // created/started to estimate when the game should be done at the latests.\n  estFinishedTime: {\n    type: Date,\n    index: 1\n  },\n  // Time the game actually finished\n  finishedAt: {\n    type: Date,\n    optional: true,\n    index: 1\n  },\n  // Indicates which stage is ongoing\n  currentStageId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n  endReason: {\n    label: \"Ended Reason\",\n    type: String,\n    optional: true,\n    regEx: /[a-zA-Z0-9_]+/\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Games.schema.extend(DebugModeSchema);\n}\n\nGames.schema.extend(TimestampSchema);\nGames.schema.extend(UserDataSchema);\nGames.schema.extend(BelongsTo(\"GameLobbies\", false));\nGames.schema.extend(BelongsTo(\"Treatments\"));\nGames.schema.extend(HasManyByRef(\"Rounds\"));\nGames.schema.extend(HasManyByRef(\"Players\"));\nGames.schema.extend(BelongsTo(\"Batches\")); // We are denormalizing the parent batch status in order to make clean queries\n\nGames.schema.extend(statusSchema);\nGames.attachSchema(Games.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/hooks.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  checkBatchFull: () => checkBatchFull,\n  checkForBatchFinished: () => checkForBatchFinished\n});\nlet Batches;\nmodule.link(\"../batches/batches\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 0);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 1);\nlet Games;\nmodule.link(\"../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 2);\n\nconst checkBatchFull = batchId => {\n  const batch = Batches.findOne(batchId);\n\n  if (!batch) {\n    throw \"batch for game missing. batchId: \".concat(batchId);\n  }\n\n  const expectedGamesCount = batch.gameCount();\n  const gamesCount = Games.find({\n    batchId\n  }).count();\n  const timeOutGameLobbiesCount = GameLobbies.find({\n    batchId,\n    timedOutAt: {\n      $exists: true\n    }\n  }).count();\n\n  if (expectedGamesCount === gamesCount + timeOutGameLobbiesCount) {\n    Batches.update(batchId, {\n      $set: {\n        full: true\n      }\n    });\n  }\n};\n\n// If all games for batch are filled, change batch status\nGames.after.insert(function (userId, _ref) {\n  let {\n    batchId\n  } = _ref;\n  checkBatchFull(batchId);\n});\n\nconst checkForBatchFinished = batchId => {\n  // Find games that are not finished\n  const gameQuery = {\n    batchId,\n    finishedAt: {\n      $exists: false\n    }\n  };\n  const gamesCount = Games.find(gameQuery).count();\n  const noGamesLeft = gamesCount === 0; // Find game lobbies that haven't been transformed into games and that haven't timedout\n\n  const gameLobbiesQuery = {\n    batchId,\n    gameId: {\n      $exists: false\n    },\n    timedOutAt: {\n      $exists: false\n    }\n  };\n  const lobbiesCount = GameLobbies.find(gameLobbiesQuery).count();\n  const noGameLobbiesLeft = lobbiesCount === 0;\n\n  if (noGamesLeft && noGameLobbiesLeft) {\n    Batches.update(batchId, {\n      $set: {\n        status: \"finished\",\n        finishedAt: new Date()\n      }\n    });\n  }\n};\n\n// Check if all games finished, mark batch as finished\nGames.after.update(function (userId, _ref2, fieldNames, modifier, options) {\n  let {\n    batchId\n  } = _ref2;\n\n  if (!fieldNames.includes(\"finishedAt\")) {\n    return;\n  }\n\n  checkForBatchFinished(batchId);\n}, {\n  fetchPrevious: false\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/methods.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  updateGameData: () => updateGameData,\n  earlyExitGame: () => earlyExitGame\n});\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"./games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 4);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 5);\nlet Stages;\nmodule.link(\"../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 6);\nlet Batches;\nmodule.link(\"../batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 7);\nconst updateGameData = new ValidatedMethod({\n  name: \"Games.methods.updateData\",\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      gameId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    } // TODO check can update this record game\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    Games.update(gameId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        gameId,\n        game,\n        key,\n        value: val,\n        prevValue: game.data && game.data[key],\n        append\n      });\n    }\n  }\n\n});\nconst earlyExitGame = new ValidatedMethod({\n  name: \"Games.methods.earlyExitGame\",\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    endReason: {\n      label: \"Reason for End\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    status: {\n      label: \"status for games and players after exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    }\n  }).validator(),\n\n  run(_ref2) {\n    let {\n      gameId,\n      endReason,\n      status\n    } = _ref2;\n\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n\n    if (game && game.finishedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\n\\ngame already ended!\");\n      }\n\n      return;\n    }\n\n    Games.update(gameId, {\n      $set: {\n        finishedAt: new Date(),\n        status,\n        endReason\n      }\n    });\n    GameLobbies.update({\n      gameId\n    }, {\n      $set: {\n        status,\n        endReason\n      }\n    });\n    game.playerIds.forEach(playerId => Players.update(playerId, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: status,\n        exitReason: endReason\n      }\n    }));\n    const batch = Batches.findOne(game.batchId);\n    const availableLobby = GameLobbies.findOne({\n      $and: [{\n        _id: {\n          $in: batch.gameLobbyIds\n        }\n      }, {\n        status: {\n          $in: [\"init\", \"running\"]\n        }\n      }]\n    }); // End batch if there is no available game\n\n    if (!availableLobby) {\n      Batches.update({\n        gameLobbyIds: gameId\n      }, {\n        $set: {\n          status: status,\n          finishedAt: new Date()\n        }\n      });\n    }\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"cron.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/server/cron.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet Rounds;\nmodule.link(\"../../rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 3);\nlet Stages;\nmodule.link(\"../../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../../treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet augmentPlayerStageRound, augmentGameStageRound;\nmodule.link(\"../../player-stages/augment.js\", {\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  },\n\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  }\n\n}, 6);\nlet augmentGameObject;\nmodule.link(\"../../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 7);\nlet config;\nmodule.link(\"../../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 8);\nlet endOfStage;\nmodule.link(\"../../stages/finish.js\", {\n  endOfStage(v) {\n    endOfStage = v;\n  }\n\n}, 9);\nlet Cron;\nmodule.link(\"../../../startup/server/cron.js\", {\n  default(v) {\n    Cron = v;\n  }\n\n}, 10);\nCron.add({\n  name: \"Trigger stage timeout or Run bots\",\n  interval: 1000,\n  task: function (log) {\n    const query = {\n      status: \"running\",\n      estFinishedTime: {\n        $gte: new Date()\n      },\n      finishedAt: {\n        $exists: false\n      }\n    };\n    Games.find(query).forEach(game => {\n      const stage = Stages.findOne(game.currentStageId);\n      const now = moment();\n      const startTimeAt = moment(stage.startTimeAt);\n      const endTimeAt = startTimeAt.add(stage.durationInSeconds, \"seconds\");\n      const ended = now.isSameOrAfter(endTimeAt);\n\n      if (ended) {\n        endOfStage(stage._id);\n      } else {\n        const {\n          gameId\n        } = stage; // make bots play\n\n        const query = {\n          gameId,\n          bot: {\n            $exists: true\n          }\n        };\n\n        if (Players.find(query).count() === 0) {\n          return;\n        }\n\n        const botPlayers = Players.find(query);\n        const treatment = Treatments.findOne(game.treatmentId);\n        const round = Rounds.findOne(stage.roundId);\n        augmentGameObject({\n          game,\n          treatment,\n          round,\n          stage\n        });\n        botPlayers.forEach(botPlayer => {\n          const bot = config.bots[botPlayer.bot];\n\n          if (!bot) {\n            log.error(\"Definition for bot \\\"\".concat(botPlayer.bot, \"\\\" was not found in the server config!\"));\n            return;\n          }\n\n          if (!bot.onStageTick) {\n            return;\n          }\n\n          augmentGameStageRound(game, stage, round);\n          botPlayer.stage = _.extend({}, stage);\n          botPlayer.round = _.extend({}, round);\n          augmentPlayerStageRound(botPlayer, botPlayer.stage, botPlayer.round, game);\n          const tick = endTimeAt.diff(now, \"seconds\");\n          game.rounds.forEach(round => {\n            round.stages = game.stages.filter(s => s.roundId === round._id);\n          });\n          bot.onStageTick(botPlayer, game, round, stage, tick);\n        });\n      }\n    });\n  }\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/games/server/publications.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet PlayerRounds;\nmodule.link(\"../../player-rounds/player-rounds\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 0);\nlet PlayerStages;\nmodule.link(\"../../player-stages/player-stages\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet Rounds;\nmodule.link(\"../../rounds/rounds\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 3);\nlet Stages;\nmodule.link(\"../../stages/stages\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 4);\nlet Games;\nmodule.link(\"../games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 5);\nMeteor.publish(\"game\", function (_ref) {\n  let {\n    playerId\n  } = _ref;\n  return Games.find({\n    playerIds: playerId\n  });\n});\nMeteor.publish(\"gameDependencies\", function (_ref2) {\n  let {\n    gameId\n  } = _ref2;\n\n  if (!gameId) {\n    return [];\n  }\n\n  return [Players.find({\n    gameId\n  })];\n});\nMeteor.publish(\"gameLobbyDependencies\", function (_ref3) {\n  let {\n    gameLobbyId\n  } = _ref3;\n\n  if (!gameLobbyId) {\n    return [];\n  }\n\n  return [Players.find({\n    gameLobbyId\n  })];\n});\nMeteor.publish(\"gameCurrentRoundStage\", function (_ref4) {\n  let {\n    gameId,\n    stageId\n  } = _ref4;\n\n  if (!gameId || !stageId) {\n    return [];\n  }\n\n  const stage = Stages.findOne(stageId);\n  const roundId = stage.roundId;\n  return [Stages.find({\n    gameId,\n    roundId\n  }), Rounds.find({\n    gameId,\n    _id: roundId\n  }), PlayerRounds.find({\n    gameId,\n    roundId\n  }), PlayerStages.find({\n    gameId,\n    stageId\n  })];\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"lobby-configs\":{\"lobby-configs.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/lobby-configs/lobby-configs.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  LobbyConfigs: () => LobbyConfigs\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet inflection;\nmodule.link(\"inflection\", {\n  default(v) {\n    inflection = v;\n  }\n\n}, 1);\nlet HasManyByRef, TimestampSchema, ArchivedSchema;\nmodule.link(\"../default-schemas\", {\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  }\n\n}, 2);\nconst LobbyConfigs = new Mongo.Collection(\"lobby_configs\");\nLobbyConfigs.helpers({\n  displayName() {\n    if (this.name) {\n      return this.name;\n    }\n\n    const type = inflection.titleize(this.timeoutType);\n    const base = \"\".concat(type, \": \").concat(this.timeoutInSeconds, \"s\");\n    let details;\n\n    switch (this.timeoutType) {\n      case \"lobby\":\n        details = \"\\u2192 \".concat(inflection.titleize(this.timeoutStrategy));\n\n        if (this.timeoutStrategy === \"bots\") {\n          details += \"(\".concat(this.timeoutBots.join(\",\"), \")\");\n        }\n\n        break;\n\n      case \"individual\":\n        details = \"\\u2A09 \".concat(this.extendCount + 1);\n        break;\n\n      default:\n        console.error(\"unknown timeoutType: \".concat(this.timeoutType));\n        return base;\n    }\n\n    return \"\".concat(base, \" \").concat(details);\n  }\n\n}); // There are 2 exclusive timeout types:\n// - lobby: the timeout start when the first player reaches the lobby and runs\n//   out for all the players whether they have even reached the lobby or not.\n// - individual: the timeout is started for each player as they reach the room.\n//   Some players might time out before all players are in the lobby, they might\n//   continue waiting for another timeout period. They might also leave the game\n//   and a new player can replace them. The lobby itself never times out.\n\nLobbyConfigs.timeoutTypes = [\"lobby\", \"individual\"]; // The timeoutStrategy determines what to do in case people are waiting\n// in the lobby for longer than the timeoutInSeconds duration.\n// Only for \"lobby\" timeoutType.\n// Available strategies:\n// - ignore: start the game anyway\n// - fail: take the player to the exit survey\n// - bots: fill the missing players slots with bots from timeoutBots\n\nLobbyConfigs.timeoutStrategies = [\"fail\", \"ignore\"]; // DEACTIVATING bots until bots implemented.\n// LobbyConfigs.timeoutStrategies = [\"fail\", \"ignore\", \"bots\"];\n// One year, that's a lot, just need to block from something too wild like 10M\n// years. We don't actually care, Inf would be fine...\n\nLobbyConfigs.maxTimeoutInSeconds = 365 * 24 * 60 * 60; // defaultTimeoutInSeconds is simply used as the default value in the Lobby\n// Configuration creation form.\n\nLobbyConfigs.defaultTimeoutInSeconds = 5 * 60;\nLobbyConfigs.schema = new SimpleSchema({\n  // Optional experimenter given name for the treatment\n  name: {\n    type: String,\n    max: 256,\n    optional: true,\n\n    custom() {\n      if (this.isSet && LobbyConfigs.find({\n        name: this.value\n      }).count() > 0) {\n        return \"notUnique\";\n      }\n    } // regEx: /^[a-zA-Z0-9_]+$/\n\n\n  },\n  // The timeoutType fundamentally changes the behavior of the lobby. See\n  // LobbyConfigs.timeoutTypes above for details.\n  timeoutType: {\n    type: String,\n    allowedValues: LobbyConfigs.timeoutTypes\n  },\n  // Number of seconds for one player to wait in lobby before timeoutStrategy\n  // is applied. This timeout applies only to the waiting for the game to start.\n  // It is either a \"Lobby Timeout\", or an \"Individual Timeout\", depending on\n  // the timeoutType value.\n  timeoutInSeconds: {\n    type: SimpleSchema.Integer,\n    max: LobbyConfigs.maxTimeoutInSeconds,\n    // It would be difficult to manage a timer that is less than 5s, and it\n    // would be  weird. 5s is already weird...\n    min: 5\n  },\n  // The timeoutStrategy determines what to do in case people are waiting\n  // in the lobby for longer than the timeoutInSeconds duration.\n  // Only for \"lobby\" timeoutType.\n  // See LobbyConfigs.timeoutStrategies for details.\n  timeoutStrategy: {\n    type: String,\n    allowedValues: LobbyConfigs.timeoutStrategies,\n    defaultValue: \"fail\",\n    optional: true\n  },\n  // Names of bot to use if timed out and still not enough player.\n  // Only for \"lobby\" timeoutType and timeoutStrategy is \"bots\".\n  timeoutBots: {\n    type: Array,\n    // Should add custom validation to verify the timeoutStrategy and make\n    // required if \"bots\" and should verify bot with name exists.\n    optional: true\n  },\n  \"timeoutBots.$\": {\n    type: String\n  },\n  // Number of times to allow the user to extend their wait time by\n  // timeoutInSeconds.\n  // If set to 0, they are never asked to retry.\n  // Only for \"individual\" timeoutType.\n  extendCount: {\n    type: SimpleSchema.Integer,\n    // 1 millard times, that should be a sufficient upper bound\n    max: 1000000000,\n    min: 0,\n    optional: true\n  }\n});\nLobbyConfigs.schema.extend(TimestampSchema);\nLobbyConfigs.schema.extend(ArchivedSchema);\nLobbyConfigs.schema.extend(HasManyByRef(\"Batches\"));\nLobbyConfigs.schema.extend(HasManyByRef(\"GameLobbies\"));\nLobbyConfigs.attachSchema(LobbyConfigs.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/lobby-configs/methods.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createLobbyConfig: () => createLobbyConfig,\n  updateLobbyConfig: () => updateLobbyConfig\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 1);\nlet LobbyConfigs;\nmodule.link(\"./lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 2);\nlet IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 3);\nconst createLobbyConfig = new ValidatedMethod({\n  name: \"LobbyConfigs.methods.create\",\n  validate: LobbyConfigs.schema.pick(\"name\", \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"timeoutBots.$\", \"extendCount\").validator(),\n\n  run(lobbyConfig) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    LobbyConfigs.insert(lobbyConfig);\n  }\n\n});\nconst updateLobbyConfig = new ValidatedMethod({\n  name: \"LobbyConfigs.methods.update\",\n  validate: LobbyConfigs.schema.pick(\"name\").extend(new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })).extend(IdSchema).validator(),\n\n  run(_ref) {\n    let {\n      _id,\n      name,\n      archived\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const lobbyConfig = LobbyConfigs.findOne(_id);\n\n    if (!lobbyConfig) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (name !== undefined) {\n      $set.name = name;\n    }\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (lobbyConfig.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!lobbyConfig.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    LobbyConfigs.update(_id, modifier);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/lobby-configs/server/publications.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet LobbyConfigs;\nmodule.link(\"../lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 0);\nMeteor.publish(\"admin-lobby-configs\", function (_ref) {\n  let {\n    archived\n  } = _ref;\n\n  if (!this.userId) {\n    return null;\n  }\n\n  if (archived === undefined) {\n    return LobbyConfigs.find();\n  }\n\n  return LobbyConfigs.find({\n    archivedAt: {\n      $exists: Boolean(archived)\n    }\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"player-inputs\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-inputs/methods.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  addPlayerInput: () => addPlayerInput\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet PlayerInputs;\nmodule.link(\"./player-inputs.js\", {\n  PlayerInputs(v) {\n    PlayerInputs = v;\n  }\n\n}, 3);\nconst addPlayerInput = new ValidatedMethod({\n  name: \"PlayerInputs.methods.add\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    data: {\n      type: String\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      playerId,\n      gameId,\n      gameLobbyId,\n      data: rawData\n    } = _ref;\n    const player = Players.findOne(playerId);\n\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    if (!gameId && !gameLobbyId) {\n      throw new Error(\"gameId or gameLobbyId required\");\n    }\n\n    const data = JSON.parse(rawData);\n    PlayerInputs.insert({\n      playerId,\n      gameId,\n      gameLobbyId,\n      data\n    }, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"player-inputs.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-inputs/player-inputs.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  PlayerInputs: () => PlayerInputs\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet BelongsTo, TimestampSchema, UserDataSchema;\nmodule.link(\"../default-schemas\", {\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  }\n\n}, 1);\nconst PlayerInputs = new Mongo.Collection(\"player_inputs\");\nPlayerInputs.schema = new SimpleSchema({});\nPlayerInputs.schema.extend(TimestampSchema);\nPlayerInputs.schema.extend(UserDataSchema);\nPlayerInputs.schema.extend(BelongsTo(\"Games\", false));\nPlayerInputs.schema.extend(BelongsTo(\"GameLobbies\", false));\nPlayerInputs.schema.extend(BelongsTo(\"Players\"));\nPlayerInputs.attachSchema(PlayerInputs.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"player-logs\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-logs/methods.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  playerLog: () => playerLog\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet PlayerLogs;\nmodule.link(\"./player-logs.js\", {\n  PlayerLogs(v) {\n    PlayerLogs = v;\n  }\n\n}, 2);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 3);\nconst playerLog = new ValidatedMethod({\n  name: \"PlayerLogs.methods.add\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    stageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    roundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    name: {\n      type: String,\n      max: 255\n    },\n    jsonData: {\n      type: String\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      playerId,\n      gameId,\n      roundId,\n      stageId,\n      name,\n      jsonData\n    } = _ref;\n    const player = Players.findOne(playerId);\n\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    PlayerLogs.insert({\n      playerId,\n      gameId,\n      roundId,\n      stageId,\n      name,\n      jsonData\n    }, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"player-logs.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-logs/player-logs.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  PlayerLogs: () => PlayerLogs\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet TimestampSchema, BelongsTo;\nmodule.link(\"../default-schemas\", {\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  BelongsTo(v) {\n    BelongsTo = v;\n  }\n\n}, 1);\nconst PlayerLogs = new Mongo.Collection(\"player_logs\");\nPlayerLogs.schema = new SimpleSchema({\n  stageId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  roundId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  gameId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  name: {\n    type: String,\n    max: 255\n  },\n  jsonData: {\n    type: String\n  }\n});\nPlayerLogs.schema.extend(TimestampSchema);\nPlayerLogs.schema.extend(BelongsTo(\"Players\"));\nPlayerLogs.attachSchema(PlayerLogs.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"player-rounds\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-rounds/methods.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  updatePlayerRoundData: () => updatePlayerRoundData\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet PlayerRounds;\nmodule.link(\"./player-rounds\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 2);\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 3);\nconst updatePlayerRoundData = new ValidatedMethod({\n  name: \"PlayerRounds.methods.updateData\",\n  validate: new SimpleSchema({\n    playerRoundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      playerRoundId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const playerRound = PlayerRounds.findOne(playerRoundId);\n\n    if (!playerRound) {\n      throw new Error(\"playerRound not found\");\n    } // TODO check can update this record playerRound\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    PlayerRounds.update(playerRoundId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId: playerRound.playerId,\n        playerRoundId,\n        playerRound,\n        key,\n        value: val,\n        prevValue: playerRound.data && playerRound.data[key],\n        append\n      });\n    }\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"player-rounds.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-rounds/player-rounds.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  PlayerRounds: () => PlayerRounds\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet TimestampSchema, UserDataSchema, BelongsTo;\nmodule.link(\"../default-schemas\", {\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  },\n\n  BelongsTo(v) {\n    BelongsTo = v;\n  }\n\n}, 1);\nconst PlayerRounds = new Mongo.Collection(\"player_rounds\");\nPlayerRounds.schema = new SimpleSchema({});\nPlayerRounds.schema.extend(TimestampSchema);\nPlayerRounds.schema.extend(UserDataSchema);\nPlayerRounds.schema.extend(BelongsTo(\"Players\"));\nPlayerRounds.schema.extend(BelongsTo(\"Rounds\"));\nPlayerRounds.schema.extend(BelongsTo(\"Games\"));\nPlayerRounds.schema.extend(BelongsTo(\"Batches\"));\nPlayerRounds.attachSchema(PlayerRounds.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"player-stages\":{\"augment.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-stages/augment.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  augmentGameLobby: () => augmentGameLobby,\n  augmentPlayerLobby: () => augmentPlayerLobby,\n  augmentPlayer: () => augmentPlayer,\n  augmentPlayerStageRound: () => augmentPlayerStageRound,\n  stubPlayerStageRound: () => stubPlayerStageRound,\n  augmentGameStageRound: () => augmentGameStageRound,\n  stubStageRound: () => stubStageRound\n});\nlet updateGameData, earlyExitGame;\nmodule.link(\"../games/methods.js\", {\n  updateGameData(v) {\n    updateGameData = v;\n  },\n\n  earlyExitGame(v) {\n    earlyExitGame = v;\n  }\n\n}, 0);\nlet updateGameLobbyData;\nmodule.link(\"../game-lobbies/methods\", {\n  updateGameLobbyData(v) {\n    updateGameLobbyData = v;\n  }\n\n}, 1);\nlet updatePlayerRoundData;\nmodule.link(\"../player-rounds/methods\", {\n  updatePlayerRoundData(v) {\n    updatePlayerRoundData = v;\n  }\n\n}, 2);\nlet PlayerRounds;\nmodule.link(\"../player-rounds/player-rounds\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 3);\nlet updatePlayerData, earlyExitPlayer, earlyExitPlayerLobby;\nmodule.link(\"../players/methods.js\", {\n  updatePlayerData(v) {\n    updatePlayerData = v;\n  },\n\n  earlyExitPlayer(v) {\n    earlyExitPlayer = v;\n  },\n\n  earlyExitPlayerLobby(v) {\n    earlyExitPlayerLobby = v;\n  }\n\n}, 4);\nlet playerLog;\nmodule.link(\"../player-logs/methods.js\", {\n  playerLog(v) {\n    playerLog = v;\n  }\n\n}, 5);\nlet updateRoundData;\nmodule.link(\"../rounds/methods.js\", {\n  updateRoundData(v) {\n    updateRoundData = v;\n  }\n\n}, 6);\nlet updateStageData;\nmodule.link(\"../stages/methods.js\", {\n  updateStageData(v) {\n    updateStageData = v;\n  }\n\n}, 7);\nlet submitPlayerStage, updatePlayerStageData;\nmodule.link(\"./methods\", {\n  submitPlayerStage(v) {\n    submitPlayerStage = v;\n  },\n\n  updatePlayerStageData(v) {\n    updatePlayerStageData = v;\n  }\n\n}, 8);\nlet PlayerStages;\nmodule.link(\"./player-stages\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 9);\n\nconst gameSet = function (gameId) {\n  let append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (key, value) => {\n    updateGameData.call({\n      gameId,\n      key,\n      value: JSON.stringify(value),\n      append,\n      noCallback: Meteor.isServer\n    });\n  };\n};\n\nconst gameLobbySet = function (gameLobbyId) {\n  let append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (key, value) => {\n    updateGameLobbyData.call({\n      gameLobbyId,\n      key,\n      value: JSON.stringify(value),\n      append,\n      noCallback: Meteor.isServer\n    });\n  };\n};\n\nconst playerSet = function (playerId) {\n  let append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (key, value) => {\n    updatePlayerData.call({\n      playerId,\n      key,\n      value: JSON.stringify(value),\n      append,\n      noCallback: Meteor.isServer\n    });\n  };\n};\n\nconst stageSet = function (playerStageId) {\n  let append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (key, value) => {\n    updatePlayerStageData.call({\n      playerStageId,\n      key,\n      value: JSON.stringify(value),\n      append,\n      noCallback: Meteor.isServer\n    });\n  };\n};\n\nconst stageSubmit = playerStageId => cb => {\n  submitPlayerStage.call({\n    playerStageId,\n    noCallback: Meteor.isServer\n  }, cb);\n};\n\nconst roundSet = function (playerRoundId) {\n  let append = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (key, value) => {\n    updatePlayerRoundData.call({\n      playerRoundId,\n      key,\n      value: JSON.stringify(value),\n      append,\n      noCallback: Meteor.isServer\n    });\n  };\n}; // Once the operation has succeeded (no throw), set the value\n// undefined is not supported, null is, replace undefineds by nulls.\n\n\nconst set = (obj, func) => (k, v) => {\n  const val = v === undefined ? null : v;\n  func(k, val);\n  obj[k] = val;\n};\n\nconst append = (obj, func) => (k, v) => {\n  const val = v === undefined ? null : v;\n  func(k, val);\n\n  if (!obj[k]) {\n    obj[k] = [];\n  }\n\n  obj[k].push(val);\n};\n\nconst nullFunc = () => {\n  throw \"You called .get(...) or .set(...) but there is no data for the player yet. Did the game run for this player?\";\n};\n\nconst augmentGameLobby = gameLobby => {\n  gameLobby.get = key => gameLobby.data[key];\n\n  gameLobby.set = set(gameLobby.data, gameLobbySet(gameLobby._id));\n  gameLobby.append = append(gameLobby.data, gameLobbySet(gameLobby._id, true));\n};\n\nconst augmentPlayerLobby = function (player) {\n  let round = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let stage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let gameLobby = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    _id: playerId\n  } = player;\n\n  player.exit = reason => earlyExitPlayerLobby.call({\n    playerId,\n    exitReason: reason,\n    gameLobbyId: gameLobby._id\n  });\n\n  player.get = key => player.data[key];\n\n  player.set = set(player.data, playerSet(playerId));\n  player.append = append(player.data, playerSet(playerId, true));\n\n  player.log = (name, data) => {\n    playerLog.call({\n      playerId,\n      name,\n      jsonData: JSON.stringify(data),\n      stageId: stage._id,\n      roundId: round._id,\n      gameLobbyId: gameLobby._id\n    });\n  };\n};\n\nconst augmentPlayer = function (player) {\n  let stage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let game = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    _id: playerId\n  } = player;\n\n  player.exit = reason => earlyExitPlayer.call({\n    playerId,\n    exitReason: reason,\n    gameId: game._id\n  });\n\n  player.get = key => player.data[key];\n\n  player.set = set(player.data, playerSet(playerId));\n  player.append = append(player.data, playerSet(playerId, true));\n\n  player.log = (name, data) => {\n    playerLog.call({\n      playerId,\n      name,\n      jsonData: JSON.stringify(data),\n      stageId: stage._id,\n      roundId: round._id,\n      gameId: game._id\n    });\n  };\n};\n\nconst augmentPlayerStageRound = function (player) {\n  let stage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let game = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    _id: playerId\n  } = player;\n  augmentPlayer(player, stage, round, game);\n\n  if (stage) {\n    const playerStage = PlayerStages.findOne({\n      stageId: stage._id,\n      playerId\n    });\n\n    stage.get = key => playerStage.data[key];\n\n    stage.set = set(playerStage.data, stageSet(playerStage._id));\n    stage.append = append(playerStage.data, stageSet(playerStage._id, true));\n    stage.submit = stageSubmit(playerStage._id, err => {\n      if (!err) {\n        stage.submitted = true;\n      }\n    });\n    stage.submitted = Boolean(playerStage.submittedAt);\n    stage.submittedAt = playerStage.submittedAt;\n  }\n\n  if (round) {\n    const playerRound = PlayerRounds.findOne({\n      roundId: round._id,\n      playerId\n    });\n\n    round.get = key => playerRound.data[key];\n\n    round.set = set(playerRound.data, roundSet(playerRound._id));\n    round.append = append(playerRound.data, roundSet(playerRound._id, true));\n  }\n};\n\nconst stubPlayerStageRound = (player, stage, round) => {\n  player.get = nullFunc;\n  player.set = nullFunc;\n  player.append = nullFunc;\n\n  if (stage) {\n    stage.get = nullFunc;\n    stage.set = nullFunc;\n    stage.append = nullFunc;\n    stage.submit = nullFunc;\n    stage.submitted = false;\n  }\n\n  if (round) {\n    round.get = nullFunc;\n    round.set = nullFunc;\n    round.append = nullFunc;\n  }\n};\n\nconst augmentGameStageRound = (game, stage, round) => {\n  if (game) {\n    game.get = key => game.data[key];\n\n    game.set = set(game.data, gameSet(game._id));\n    game.append = append(game.data, gameSet(game._id, true));\n\n    game.end = endReason => earlyExitGame.call({\n      gameId: game._id,\n      endReason,\n      status: \"custom\"\n    });\n  }\n\n  if (stage) {\n    stage.get = key => {\n      return stage.data[key];\n    };\n\n    stage.set = set(stage.data, (key, value) => {\n      updateStageData.call({\n        stageId: stage._id,\n        key,\n        value: JSON.stringify(value),\n        append: false,\n        noCallback: Meteor.isServer\n      });\n    });\n    stage.append = append(stage.data, (key, value) => {\n      updateStageData.call({\n        stageId: stage._id,\n        key,\n        value: JSON.stringify(value),\n        append: true,\n        noCallback: Meteor.isServer\n      });\n    });\n\n    stage.submit = () => {\n      throw \"You cannot submit the entire stage at the moment\";\n    };\n  }\n\n  if (round) {\n    round.get = key => {\n      return round.data[key];\n    };\n\n    round.set = set(round.data, (key, value) => {\n      updateRoundData.call({\n        roundId: round._id,\n        key,\n        value: JSON.stringify(value),\n        append: false,\n        noCallback: Meteor.isServer\n      });\n    });\n    round.append = append(round.data, (key, value) => {\n      updateRoundData.call({\n        roundId: round._id,\n        key,\n        value: JSON.stringify(value),\n        append: true,\n        noCallback: Meteor.isServer\n      });\n    });\n  }\n};\n\nconst stubStageRound = (stage, round) => {\n  stage.get = nullFunc;\n  stage.set = nullFunc;\n  stage.append = nullFunc;\n  stage.submit = nullFunc;\n  round.get = nullFunc;\n  round.set = nullFunc;\n  round.append = nullFunc;\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"hooks.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-stages/hooks.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet PlayerStages;\nmodule.link(\"./player-stages\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 0);\nlet endOfStage;\nmodule.link(\"../stages/finish.js\", {\n  endOfStage(v) {\n    endOfStage = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../players/players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nPlayerStages.after.update(function (userId, playerStage, fieldNames, modifier, options) {\n  if (!fieldNames.includes(\"submittedAt\")) {\n    return;\n  }\n\n  const {\n    stageId\n  } = playerStage;\n  const playerIDs = PlayerStages.find({\n    stageId\n  }).map(p => p.playerId);\n  const availPlayerIDs = Players.find({\n    _id: {\n      $in: playerIDs\n    },\n    exitAt: {\n      $exists: false\n    }\n  }).map(p => p._id);\n  const doneCount = PlayerStages.find({\n    stageId,\n    playerId: {\n      $in: availPlayerIDs\n    },\n    submittedAt: {\n      $exists: true\n    }\n  }).count();\n\n  if (doneCount === availPlayerIDs.length) {\n    endOfStage(stageId);\n  }\n}, {\n  fetchPrevious: false\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-stages/methods.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  updatePlayerStageData: () => updatePlayerStageData,\n  submitPlayerStage: () => submitPlayerStage\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet PlayerStages;\nmodule.link(\"./player-stages\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 2);\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 3);\nconst updatePlayerStageData = new ValidatedMethod({\n  name: \"PlayerStages.methods.updateData\",\n  validate: new SimpleSchema({\n    playerStageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      playerStageId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const playerStage = PlayerStages.findOne(playerStageId);\n\n    if (!playerStage) {\n      throw new Error(\"playerStage not found\");\n    } // TODO check can update this record playerStage\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    PlayerStages.update(playerStageId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId: playerStage.playerId,\n        playerStageId,\n        playerStage,\n        key,\n        value: val,\n        prevValue: playerStage.data && playerStage.data[key],\n        append\n      });\n    }\n  }\n\n});\nconst submitPlayerStage = new ValidatedMethod({\n  name: \"PlayerStages.methods.submit\",\n  validate: new SimpleSchema({\n    playerStageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref2) {\n    let {\n      playerStageId,\n      noCallback\n    } = _ref2;\n    const playerStage = PlayerStages.findOne(playerStageId);\n\n    if (!playerStage) {\n      throw new Error(\"playerStage not found\");\n    } // TODO check can update this record playerStage\n\n\n    if (playerStage.submittedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"stage already submitted\");\n      }\n\n      return;\n    }\n\n    PlayerStages.update(playerStageId, {\n      $set: {\n        submittedAt: new Date()\n      }\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnSubmit({\n        playerId: playerStage.playerId,\n        playerStage\n      });\n    }\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"player-stages.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/player-stages/player-stages.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  PlayerStages: () => PlayerStages\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet TimestampSchema, UserDataSchema, BelongsTo;\nmodule.link(\"../default-schemas\", {\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  },\n\n  BelongsTo(v) {\n    BelongsTo = v;\n  }\n\n}, 1);\nconst PlayerStages = new Mongo.Collection(\"player_stages\");\nPlayerStages.schema = new SimpleSchema({\n  submittedAt: {\n    type: Date,\n    denyInsert: true,\n    optional: true,\n    index: 1\n  }\n});\nPlayerStages.schema.extend(TimestampSchema);\nPlayerStages.schema.extend(UserDataSchema);\nPlayerStages.schema.extend(BelongsTo(\"Players\"));\nPlayerStages.schema.extend(BelongsTo(\"Stages\"));\nPlayerStages.schema.extend(BelongsTo(\"Rounds\"));\nPlayerStages.schema.extend(BelongsTo(\"Games\"));\nPlayerStages.schema.extend(BelongsTo(\"Batches\"));\nPlayerStages.attachSchema(PlayerStages.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"players\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/players/methods.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createPlayer: () => createPlayer,\n  playerReady: () => playerReady,\n  updatePlayerData: () => updatePlayerData,\n  markPlayerExitStepDone: () => markPlayerExitStepDone,\n  extendPlayerTimeoutWait: () => extendPlayerTimeoutWait,\n  endPlayerTimeoutWait: () => endPlayerTimeoutWait,\n  earlyExitPlayer: () => earlyExitPlayer,\n  earlyExitPlayerLobby: () => earlyExitPlayerLobby,\n  retireSinglePlayer: () => retireSinglePlayer,\n  retireGameFullPlayers: () => retireGameFullPlayers,\n  playerWasRetired: () => playerWasRetired,\n  updatePlayerStatus: () => updatePlayerStatus\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Batches;\nmodule.link(\"../batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 2);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 3);\nlet IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 4);\nlet LobbyConfigs;\nmodule.link(\"../lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 5);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 6);\nlet Players;\nmodule.link(\"./players\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 7);\nlet exitStatuses;\nmodule.link(\"./players.js\", {\n  exitStatuses(v) {\n    exitStatuses = v;\n  }\n\n}, 8);\nlet sleep, weightedRandom;\nmodule.link(\"../../lib/utils.js\", {\n  sleep(v) {\n    sleep = v;\n  },\n\n  weightedRandom(v) {\n    weightedRandom = v;\n  }\n\n}, 9);\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 10);\nlet gameLobbyLock;\nmodule.link(\"../../gameLobby-lock.js\", {\n  default(v) {\n    gameLobbyLock = v;\n  }\n\n}, 11);\nconst createPlayer = new ValidatedMethod({\n  name: \"Players.methods.create\",\n  validate: new SimpleSchema({\n    id: {\n      type: String\n    },\n    urlParams: {\n      type: Object,\n      blackbox: true,\n      defaultValue: {}\n    }\n  }).validator(),\n\n  run(player) {\n    // Find the first running batch (in order of running started time)\n    const batch = Batches.findOne({\n      status: \"running\",\n      full: false\n    }, {\n      sort: {\n        runningAt: 1\n      }\n    });\n\n    if (!batch) {\n      // The UI should update and realize there is no batch available\n      // This should be a rare case where a fraction of a second of\n      // desynchornisation when the last available batch just finished.\n      // If this is the case, since the user exist in the DB at this point\n      // but has no lobby assigned, and the UI will soon determine there\n      // is no available game, the UI will switch to \"No experiments\n      // available\", nothing else to do.\n      return;\n    } // TODO: MAYBE, add verification that the user is not current connected\n    // elsewhere and this is not a flagrant impersonation. Note that is\n    // extremely difficult to guaranty. Could also add verification of user's\n    // id with email verication for example. For now the assumption is that\n    // there is no immediate reason or long-term motiviation for people to hack\n    // each other's player account.\n\n\n    const existing = Players.findOne({\n      id: player.id\n    }); // If the player already has a game lobby assigned, no need to\n    // re-initialize them\n\n    if (existing && existing.gameLobbyId) {\n      return existing._id;\n    }\n\n    if (existing) {\n      player = existing;\n    } else {\n      // Because of a bug in SimpleSchema around blackbox: true, skipping\n      // validation here. Validation did happen at the method level though.\n      player._id = Players.insert(player, {\n        filter: false,\n        validate: false\n      });\n    } // Looking for all lobbies for batch (for which that game has not started yet)\n\n\n    const lobbies = GameLobbies.find({\n      batchId: batch._id,\n      status: \"running\",\n      timedOutAt: {\n        $exists: false\n      },\n      gameId: {\n        $exists: false\n      }\n    }).fetch();\n\n    if (lobbies.length === 0) {\n      // This is the same case as when there are no batches available.\n      return;\n    } // Let's first try to find lobbies for which their queue isn't full yet\n\n\n    let lobbyPool = lobbies.filter(l => l.availableCount > l.queuedPlayerIds.length); // If no lobbies still have \"availability\", just fill any lobby\n\n    if (lobbyPool.length === 0) {\n      lobbyPool = lobbies;\n    } // Book proportially to total expected playerCount\n\n\n    const weigthedLobbyPool = lobbyPool.map(lobby => {\n      return {\n        value: lobby,\n        weight: lobby.availableCount\n      };\n    }); // Choose a lobby in the available weigthed pool\n\n    const lobby = weightedRandom(weigthedLobbyPool)(); // Adding the player to specified lobby queue\n\n    GameLobbies.update(lobby._id, {\n      $addToSet: {\n        queuedPlayerIds: player._id\n      }\n    });\n    const gameLobbyId = lobby._id;\n    const $set = {\n      gameLobbyId\n    }; // Check if there will be instructions\n\n    let skipInstructions = lobby.debugMode; // If there are no instruction, mark the player as ready immediately\n\n    if (skipInstructions) {\n      $set.readyAt = new Date();\n    }\n\n    Players.update(player._id, {\n      $set\n    }); // If there are no instruction, player is ready, notify the lobby\n\n    if (skipInstructions) {\n      GameLobbies.update(gameLobbyId, {\n        $addToSet: {\n          playerIds: player._id\n        }\n      });\n    }\n\n    return player._id;\n  }\n\n});\nconst playerReady = new ValidatedMethod({\n  name: \"Players.methods.ready\",\n  validate: IdSchema.validator(),\n\n  run(_ref) {\n    return Promise.asyncApply(() => {\n      let {\n        _id\n      } = _ref;\n\n      if (!Meteor.isServer) {\n        return;\n      }\n\n      try {\n        // Lobby might be locked if game is currently being created.\n        // We retry until lobby is unlocked.\n        while (!assignToLobby(_id)) {\n          Promise.await(sleep(1000));\n        }\n      } catch (error) {\n        console.error(\"Players.methods.ready\", error);\n      }\n    });\n  }\n\n});\n\nfunction assignToLobby(_id) {\n  const player = Players.findOne(_id);\n\n  if (!player) {\n    throw \"unknown ready player: \".concat(_id);\n  }\n\n  const {\n    readyAt,\n    gameLobbyId\n  } = player;\n\n  if (readyAt) {\n    // Already ready\n    return true;\n  }\n\n  const lobby = GameLobbies.findOne(gameLobbyId);\n\n  if (!lobby) {\n    throw \"unknown lobby for ready player: \".concat(_id);\n  } // GameLobby is locked.\n\n\n  if (gameLobbyLock[gameLobbyId]) {\n    return false;\n  } // Game is Full, bail the player\n\n\n  if (lobby.playerIds.length === lobby.availableCount) {\n    // User already ready, something happened out of order\n    if (lobby.playerIds.includes(_id)) {\n      return true;\n    } // Mark the player's participation attemp as failed if\n    // not already marked exited\n\n\n    Players.update({\n      _id,\n      exitAt: {\n        $exists: false\n      }\n    }, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: \"gameFull\"\n      }\n    });\n    return true;\n  } // Try to update the GameLobby with the playerIds we just queried.\n\n\n  GameLobbies.update({\n    _id: gameLobbyId,\n    playerIds: lobby.playerIds\n  }, {\n    $addToSet: {\n      playerIds: _id\n    }\n  }); // If the playerId insert succeeded (playerId WAS added to playerIds),\n  // mark the user record as ready and potentially start the individual\n  // lobby timer.\n\n  const lobbyUpdated = GameLobbies.findOne(gameLobbyId);\n\n  if (lobbyUpdated.playerIds.includes(_id)) {\n    // If it did work, mark player as ready\n    $set = {\n      readyAt: new Date()\n    }; // If it's an individual lobby timeout, mark the first timer as started.\n\n    const lobbyConfig = LobbyConfigs.findOne(lobbyUpdated.lobbyConfigId);\n\n    if (lobbyConfig.timeoutType === \"individual\") {\n      $set.timeoutStartedAt = new Date();\n      $set.timeoutWaitCount = 1;\n    }\n\n    Players.update(_id, {\n      $set\n    });\n    return true;\n  } // If the playerId insert failed (playerId NOT added to playerIds), the\n  // playerIds has changed since it was queried and the lobby might not\n  // have any available slots left, loop and retry.\n\n\n  return false;\n}\n\nconst updatePlayerData = new ValidatedMethod({\n  name: \"Players.methods.updateData\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref2) {\n    let {\n      playerId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref2;\n    const player = Players.findOne(playerId);\n\n    if (!player) {\n      throw new Error(\"player not found\");\n    } // TODO check can update this record player\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    Players.update(playerId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId,\n        player,\n        key,\n        value: val,\n        prevValue: player.data && player.data[key],\n        append\n      });\n    }\n  }\n\n});\nconst markPlayerExitStepDone = new ValidatedMethod({\n  name: \"Players.methods.markExitStepDone\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    stepName: {\n      type: String\n    }\n  }).validator(),\n\n  run(_ref3) {\n    let {\n      playerId,\n      stepName\n    } = _ref3;\n    const player = Players.findOne(playerId);\n\n    if (!player) {\n      throw new Error(\"player not found\");\n    } // TODO check can update this record player\n\n\n    Players.update(playerId, {\n      $addToSet: {\n        exitStepsDone: stepName\n      }\n    });\n  }\n\n});\nconst extendPlayerTimeoutWait = new ValidatedMethod({\n  name: \"Players.methods.extendTimeoutWait\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run(_ref4) {\n    let {\n      playerId\n    } = _ref4;\n    const player = Players.findOne(playerId);\n\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    Players.update(playerId, {\n      $inc: {\n        timeoutWaitCount: 1\n      },\n      $set: {\n        timeoutStartedAt: new Date()\n      }\n    });\n  }\n\n});\nconst endPlayerTimeoutWait = new ValidatedMethod({\n  name: \"Players.methods.endTimeoutWait\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run(_ref5) {\n    let {\n      playerId\n    } = _ref5;\n    const player = Players.findOne(playerId);\n\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    Players.update(playerId, {\n      $set: {\n        exitStatus: \"playerEndedLobbyWait\",\n        exitAt: new Date()\n      }\n    });\n    GameLobbies.update(player.gameLobbyId, {\n      $pull: {\n        playerIds: playerId // We keep the player in queuedPlayerIds so they will still have the\n        // fact they were in a lobby available in the UI, and so we can show\n        // them the exit steps.\n\n      }\n    });\n  }\n\n});\nconst earlyExitPlayer = new ValidatedMethod({\n  name: \"Players.methods.admin.earlyExitPlayer\",\n  validate: new SimpleSchema({\n    exitReason: {\n      label: \"Reason for Exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run(_ref6) {\n    let {\n      exitReason,\n      playerId,\n      gameId\n    } = _ref6;\n\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n\n    if (game && game.finishedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\n\\ngame already ended!\");\n      }\n\n      return;\n    }\n\n    const currentPlayer = Players.findOne(playerId);\n\n    if (currentPlayer && currentPlayer.exitAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\nplayer already exited!\");\n      }\n\n      return;\n    }\n\n    Players.update(playerId, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: \"custom\",\n        exitReason\n      }\n    });\n    const players = Players.find({\n      gameId\n    }).fetch();\n    const onlinePlayers = players.filter(player => !player.exitAt);\n\n    if (!onlinePlayers || onlinePlayers && onlinePlayers.length === 0) {\n      Games.update(gameId, {\n        $set: {\n          finishedAt: new Date(),\n          status: \"custom\",\n          endReason: \"finished_early\"\n        }\n      });\n      GameLobbies.update({\n        gameId\n      }, {\n        $set: {\n          status: \"custom\",\n          endReason: \"finished_early\"\n        }\n      });\n    }\n  }\n\n});\nconst earlyExitPlayerLobby = new ValidatedMethod({\n  name: \"Players.methods.admin.earlyExitPlayerLobby\",\n  validate: new SimpleSchema({\n    exitReason: {\n      label: \"Reason for Exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run(_ref7) {\n    let {\n      exitReason,\n      playerId,\n      gameLobbyId\n    } = _ref7;\n\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const gameLobby = GameLobbies.findOne(gameLobbyId);\n\n    if (!gameLobby) {\n      throw new Error(\"gameLobby not found\");\n    }\n\n    const currentPlayer = Players.findOne(playerId);\n\n    if (currentPlayer && currentPlayer.exitAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\nplayer already exited!\");\n      }\n\n      return;\n    }\n\n    Players.update(playerId, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: \"custom\",\n        exitReason\n      }\n    });\n  }\n\n});\nconst retireSinglePlayer = new ValidatedMethod({\n  name: \"Players.methods.admin.retireSingle\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run(_ref8) {\n    let {\n      playerId\n    } = _ref8;\n\n    if (!playerId) {\n      throw new Error(\"empty playerId\");\n    }\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const player = Players.findOne({\n      _id: playerId,\n      retiredAt: {\n        $exists: false\n      }\n    });\n\n    if (!player) {\n      throw new Error(\"Player not found\");\n    }\n\n    const timestamp = new Date().toISOString();\n    Players.update(playerId, {\n      $set: {\n        id: \"\".concat(player.id, \" (Retired custom at \").concat(timestamp, \")\"),\n        retiredAt: new Date(),\n        retiredReason: \"custom\"\n      }\n    });\n    return player;\n  }\n\n});\nconst retireGameFullPlayers = new ValidatedMethod({\n  name: \"Players.methods.admin.retireGameFull\",\n  validate: new SimpleSchema({\n    retiredReason: {\n      label: \"Retired Reason\",\n      type: String,\n      optional: true,\n      allowedValues: exitStatuses\n    }\n  }).validator(),\n\n  run(_ref9) {\n    let {\n      retiredReason\n    } = _ref9;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const players = Players.find({\n      exitStatus: retiredReason,\n      retiredAt: {\n        $exists: false\n      }\n    }).fetch();\n    const timestamp = new Date().toISOString();\n\n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n      Players.update(player._id, {\n        $set: {\n          id: \"\".concat(player.id, \" (Retired \").concat(retiredReason, \" at \").concat(timestamp, \")\"),\n          retiredAt: new Date(),\n          retiredReason\n        }\n      });\n    }\n\n    return players.length;\n  }\n\n});\nconst playerWasRetired = new ValidatedMethod({\n  name: \"Players.methods.playerWasRetired\",\n  validate: IdSchema.validator(),\n\n  run(_ref10) {\n    let {\n      _id\n    } = _ref10;\n    return Boolean(Players.findOne({\n      _id,\n      exitStatus: {\n        $exists: true\n      },\n      retiredAt: {\n        $exists: true\n      }\n    }));\n  }\n\n});\nconst updatePlayerStatus = new ValidatedMethod({\n  name: \"Players.methods.updateStatus\",\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    idle: {\n      type: Boolean\n    },\n    lastActivityAt: {\n      type: Date\n    }\n  }).validator(),\n\n  run(_ref11) {\n    let {\n      playerId,\n      idle,\n      lastActivityAt\n    } = _ref11;\n\n    if (Meteor.isServer) {\n      const playerIdConn = shared.playerIdForConn(this.connection);\n\n      if (!playerIdConn) {\n        return;\n      }\n\n      if (playerId !== playerIdConn) {\n        console.error(\"Attempting to update player status from wrong connection\");\n        return;\n      }\n    }\n\n    Players.update(playerId, {\n      $set: {\n        idle,\n        lastActivityAt\n      }\n    });\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"players.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/players/players.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Players: () => Players,\n  exitStatuses: () => exitStatuses\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Counter;\nmodule.link(\"../../lib/counters\", {\n  Counter(v) {\n    Counter = v;\n  }\n\n}, 1);\nlet BelongsTo, TimestampSchema, UserDataSchema;\nmodule.link(\"../default-schemas\", {\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  }\n\n}, 2);\n\nclass PlayersCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"players\");\n    return super.insert(doc, callback);\n  }\n\n}\n\nconst Players = new PlayersCollection(\"players\");\nconst exitStatuses = [\"gameFull\", \"gameCancelled\", \"gameLobbyTimedOut\", \"playerEndedLobbyWait\", \"playerLobbyTimedOut\", \"finished\", \"cancelled\", \"failed\", \"custom\"];\nPlayers.schema = new SimpleSchema({\n  // The Player `id` is used to uniquely identify the player to avoid\n  // having a user play multiple times. It can be any string, for example\n  // an email address, a Mechanical Turk ID, a manually assigned participation\n  // number (saved as string), etc...\n  id: {\n    type: String,\n    max: 256\n  },\n  // True if the player is currently online and idle\n  idle: {\n    label: \"Idle\",\n    type: Boolean,\n    optional: true\n  },\n  // True if the player is currently online\n  online: {\n    label: \"Online\",\n    type: Boolean,\n    optional: true\n  },\n  // Time when the player was last seen online and active\n  lastActivityAt: {\n    label: \"Last Activity At\",\n    type: Date,\n    optional: true\n  },\n  lastLogin: {\n    type: Object,\n    optional: true\n  },\n  \"lastLogin.at\": {\n    type: Date,\n    optional: true\n  },\n  \"lastLogin.ip\": {\n    type: String,\n    optional: true\n  },\n  \"lastLogin.userAgent\": {\n    type: String,\n    optional: true\n  },\n  // Auto-incremented number assigned to players as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n  // params contains any URL passed parameters\n  urlParams: {\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  },\n  bot: {\n    label: \"Name of bot definition if player is a bot\",\n    type: String,\n    optional: true,\n    index: 1\n  },\n  // Time at witch the player became ready (done with intro)\n  readyAt: {\n    label: \"Ready At\",\n    type: Date,\n    optional: true\n  },\n  timeoutStartedAt: {\n    label: \"Time the first player arrived in the lobby\",\n    type: Date,\n    optional: true\n  },\n  timeoutWaitCount: {\n    label: \"Number of time the player has waited for timeoutStartedAt\",\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 1\n  },\n  exitStepsDone: {\n    type: Array,\n    defaultValue: []\n  },\n  \"exitStepsDone.$\": {\n    type: String\n  },\n  // Failed fields are filled when the player's participation in a game failed\n  exitAt: {\n    label: \"Exited At\",\n    type: Date,\n    optional: true\n  },\n  exitStatus: {\n    label: \"Failed Status\",\n    type: String,\n    optional: true,\n    allowedValues: exitStatuses\n  },\n  exitReason: {\n    label: \"Failed Reason\",\n    type: String,\n    optional: true,\n    regEx: /[a-zA-Z0-9_]+/\n  },\n  // A player can be retired. Retired players should no longer be used in active\n  // game, but NOTHING is done in the code to block that from happening. It's\n  // more of an indicator for debugging down the line.\n  retiredAt: {\n    label: \"Retired At\",\n    type: Date,\n    optional: true\n  },\n  retiredReason: {\n    label: \"Retired Reason\",\n    type: String,\n    optional: true,\n    allowedValues: exitStatuses\n  }\n});\nPlayers.schema.extend(TimestampSchema);\nPlayers.schema.extend(UserDataSchema);\nPlayers.schema.extend(BelongsTo(\"Games\", false));\nPlayers.schema.extend(BelongsTo(\"GameLobbies\", false));\nPlayers.attachSchema(Players.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/players/server/publications.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet savePlayerId;\nmodule.link(\"../../../startup/server/connections.js\", {\n  savePlayerId(v) {\n    savePlayerId = v;\n  }\n\n}, 0);\nlet Players;\nmodule.link(\"../players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 1);\nMeteor.publish(\"admin-players\", function (props) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!props || props.retired === undefined) {\n    return Players.find();\n  }\n\n  return Players.find({\n    retiredAt: {\n      $exists: Boolean(props.retired)\n    }\n  });\n});\nMeteor.publish(\"playerInfo\", function (_ref) {\n  let {\n    playerId\n  } = _ref;\n  const selector = {\n    _id: playerId,\n    retiredAt: {\n      $exists: false\n    }\n  };\n  const playerExists = Players.find(selector).count() > 0;\n\n  if (playerExists) {\n    savePlayerId(this.connection, playerId);\n  }\n\n  return Players.find(selector);\n});\nconst clients = {};\nlet hasPlayers = false;\nMeteor.startup(() => {\n  let initializing = true;\n  hasPlayers = Players.find().count() > 0; // `observeChanges` only returns after the initial `added` callbacks have run.\n  // Until then, we don't want to send a lot of `changed` messages—hence\n  // tracking the `initializing` state.\n\n  const handle = Players.find({}, {\n    fields: {\n      _id: 1\n    }\n  }).observeChanges({\n    added: id => {\n      if (initializing) {\n        return;\n      }\n\n      if (Players.find().count() > 0 && !hasPlayers) {\n        hasPlayers = true;\n\n        for (const id in clients) {\n          if (clients.hasOwnProperty(id)) {\n            const client = clients[id];\n            client.changed(\"hasPlayers\", \"id\", {\n              hasPlayers\n            });\n          }\n        }\n      }\n    },\n    removed: id => {\n      if (Players.find().count() === 0 && hasPlayers) {\n        hasPlayers = false;\n\n        for (const id in clients) {\n          if (clients.hasOwnProperty(id)) {\n            const client = clients[id];\n            client.changed(\"hasPlayers\", \"id\", {\n              hasPlayers\n            });\n          }\n        }\n      }\n    }\n  });\n  initializing = false;\n});\nMeteor.publish(null, function () {\n  clients[this.connection.id] = this;\n  this.added(\"hasPlayers\", \"id\", {\n    hasPlayers\n  });\n  this.ready();\n  this.onStop(() => delete clients[this.connection.id]);\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"rounds\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/rounds/methods.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  updateRoundData: () => updateRoundData\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Rounds;\nmodule.link(\"./rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 2);\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 3);\nconst updateRoundData = new ValidatedMethod({\n  name: \"Rounds.methods.updateData\",\n  validate: new SimpleSchema({\n    roundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      roundId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const round = Rounds.findOne(roundId);\n\n    if (!round) {\n      throw new Error(\"round not found\");\n    } // TODO check can update this record round\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    Rounds.update(roundId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        roundId,\n        round,\n        key,\n        value: val,\n        prevValue: round.data && round.data[key],\n        append\n      });\n    }\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"rounds.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/rounds/rounds.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Rounds: () => Rounds\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet BelongsTo, HasManyByRef, UserDataSchema, TimestampSchema;\nmodule.link(\"../default-schemas\", {\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  }\n\n}, 1);\nconst Rounds = new Mongo.Collection(\"rounds\");\nRounds.schema = new SimpleSchema({\n  // Index represents the 0 based position of the current round in the ordered\n  // list of a game's rounds. For display, add 1.\n  index: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 9999 // That's a lot of rounds...\n\n  }\n});\nRounds.schema.extend(TimestampSchema);\nRounds.schema.extend(UserDataSchema);\nRounds.schema.extend(HasManyByRef(\"Stages\"));\nRounds.schema.extend(BelongsTo(\"Games\"));\nRounds.schema.extend(HasManyByRef(\"PlayerRounds\"));\nRounds.attachSchema(Rounds.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"onchange.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/server/onchange.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  callOnChange: () => callOnChange\n});\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet Rounds;\nmodule.link(\"../rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 3);\nlet Stages;\nmodule.link(\"../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet augmentGameStageRound, augmentPlayerStageRound;\nmodule.link(\"../player-stages/augment.js\", {\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  },\n\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  }\n\n}, 6);\nlet augmentGameObject;\nmodule.link(\"../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 7);\nlet config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 8);\nconst targets = {\n  playerStageId: \"playerStage\",\n  playerRoundId: \"playerRound\",\n  stageId: \"stage\",\n  roundId: \"round\",\n  gameId: \"game\"\n}; // Central point for triggering the onSet, onAppend and onChange callbacks.\n// These callbacks are called when the experiment code calls custom data update\n// methods on games, rounds, stages, players, playerRounds or playerStages.\n// onSet is called when the .set() method is used.\n// onAppend is called when the .append() method is used.\n// onChange is called when the .set() or .append() method is used.\n\nconst callOnChange = params => {\n  const cbName = params.append ? \"onAppend\" : \"onSet\";\n  const {\n    onChange,\n    [cbName]: onSetAppend\n  } = config;\n  const callbacks = [];\n\n  if (onSetAppend) {\n    callbacks.push(onSetAppend);\n  }\n\n  if (onChange) {\n    callbacks.push(onChange);\n  }\n\n  if (callbacks.length === 0) {\n    return;\n  }\n\n  if (params.conn && !params.playerId) {\n    params.playerId = shared.playerIdForConn(params.conn);\n  }\n\n  let target = params.player,\n      targetType = \"player\";\n\n  for (const key in targets) {\n    if (params[key]) {\n      targetType = targets[key];\n      target = params[targets[key]]; // Update field to latest value\n\n      if (params.append) {\n        if (!target.data[params.key]) {\n          target.data[params.key] = [params.value];\n        } else {\n          target.data[params.key] = target.data[params.key].slice(0);\n          target.data[params.key].push(params.value);\n        }\n      } else {\n        target.data[params.key] = params.value;\n      }\n\n      break;\n    }\n  }\n\n  let {\n    player,\n    game,\n    round,\n    stage\n  } = params;\n  player = player || Players.findOne(params.playerId);\n  game = game || Games.findOne(player.gameId);\n\n  if (!game) {\n    console.error(\"\".concat(targetType, \" data updated without game\"));\n    return;\n  }\n\n  stage = stage || Stages.findOne(game.currentStageId);\n\n  if (!stage) {\n    console.error(\"\".concat(targetType, \" data updated without stage\"));\n    return;\n  }\n\n  const {\n    roundId\n  } = stage;\n  round = round || Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n  augmentGameObject({\n    game,\n    treatment,\n    round,\n    stage\n  });\n  augmentGameStageRound(game, stage, round);\n  callbacks.forEach(callback => {\n    callback(game, round, stage, player, target, targetType, params.key, params.value, params.prevValue, params.append // for onChange\n    );\n  });\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"onsubmit.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/server/onsubmit.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  callOnSubmit: () => callOnSubmit\n});\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 0);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 1);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 2);\nlet Rounds;\nmodule.link(\"../rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 3);\nlet Stages;\nmodule.link(\"../stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"../treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nlet augmentGameStageRound, augmentPlayerStageRound;\nmodule.link(\"../player-stages/augment.js\", {\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  },\n\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  }\n\n}, 6);\nlet augmentGameObject;\nmodule.link(\"../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 7);\nlet config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 8);\n\nconst callOnSubmit = params => {\n  const {\n    onSubmit\n  } = config;\n\n  if (!onSubmit) {\n    return;\n  }\n\n  const {\n    playerId,\n    playerStage\n  } = params;\n  const player = Players.findOne(playerId);\n  const game = Games.findOne(player.gameId);\n\n  if (!game) {\n    console.error(\"\".concat(targetType, \" data updated without game\"));\n    return;\n  }\n\n  const stage = Stages.findOne(playerStage.stageId);\n\n  if (!stage) {\n    console.error(\"\".concat(targetType, \" data updated without stage\"));\n    return;\n  }\n\n  const {\n    roundId\n  } = stage;\n  const round = Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n  augmentGameObject({\n    game,\n    treatment,\n    round,\n    stage\n  });\n  augmentGameStageRound(game, stage, round);\n  player.stage = _.extend({}, stage);\n  player.round = _.extend({}, round);\n  augmentPlayerStageRound(player, player.stage, player.round, game);\n  onSubmit(game, round, stage, player);\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"stages\":{\"finish.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/stages/finish.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  endOfStage: () => endOfStage\n});\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 0);\nlet config;\nmodule.link(\"../../server\", {\n  config(v) {\n    config = v;\n  }\n\n}, 1);\nlet Games;\nmodule.link(\"../games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 2);\nlet augmentGameStageRound, augmentPlayerStageRound;\nmodule.link(\"../player-stages/augment.js\", {\n  augmentGameStageRound(v) {\n    augmentGameStageRound = v;\n  },\n\n  augmentPlayerStageRound(v) {\n    augmentPlayerStageRound = v;\n  }\n\n}, 3);\nlet augmentGameObject;\nmodule.link(\"../games/augment.js\", {\n  augmentGameObject(v) {\n    augmentGameObject = v;\n  }\n\n}, 4);\nlet Players;\nmodule.link(\"../players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 5);\nlet Rounds;\nmodule.link(\"../rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 6);\nlet Treatments;\nmodule.link(\"../treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 7);\nlet Stages;\nmodule.link(\"./stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 8);\nlet GameLobbies;\nmodule.link(\"../game-lobbies/game-lobbies\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 9);\n// endOfStage should only ever run once per stageId. If one of the callback\n// (or the execution of endOfStage itself) takes too much time, a second\n// trigger could try to run endOfStage again (e.g. all players submitted +\n// cron). The lock ensures endOfStage can only run once.\nconst lock = {};\n\nconst endOfStage = stageId => {\n  if (lock[stageId]) {\n    return;\n  }\n\n  lock[stageId] = true;\n  const stage = Stages.findOne(stageId);\n  const {\n    index,\n    gameId,\n    roundId\n  } = stage;\n  const game = Games.findOne(gameId);\n  const round = Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n  augmentGameObject({\n    game,\n    treatment,\n    round,\n    stage\n  });\n  augmentGameStageRound(game, stage, round);\n  const {\n    onStageEnd,\n    onRoundEnd,\n    onRoundStart,\n    onStageStart\n  } = config;\n\n  if (onStageEnd) {\n    onStageEnd(game, round, stage);\n  }\n\n  const nextStage = Stages.findOne({\n    gameId,\n    index: index + 1\n  });\n\n  if (onRoundEnd && !nextStage || stage.roundId !== nextStage.roundId) {\n    onRoundEnd(game, round);\n  }\n\n  if (nextStage && (onRoundStart || onStageStart)) {\n    const nextRound = Rounds.findOne(nextStage.roundId);\n    augmentGameStageRound(game, nextStage, nextRound);\n    game.players.forEach(player => {\n      player.round = _.extend({}, nextRound);\n      player.stage = _.extend({}, nextStage);\n      augmentPlayerStageRound(player, player.stage, player.round, game);\n    });\n\n    if (onRoundStart && stage.roundId !== nextStage.roundId) {\n      onRoundStart(game, nextRound);\n    }\n\n    if (onStageStart) {\n      onStageStart(game, nextRound, nextStage);\n    }\n  }\n\n  if (nextStage) {\n    // go to next stage\n    const currentStageId = nextStage._id;\n    Games.update(gameId, {\n      $set: {\n        currentStageId\n      }\n    });\n    const startTimeAt = moment().add(Stages.stagePaddingDuration);\n    Stages.update(currentStageId, {\n      $set: {\n        startTimeAt: startTimeAt.toDate()\n      }\n    });\n  } else {\n    const onGameEnd = config.onGameEnd;\n\n    if (onGameEnd) {\n      onGameEnd(game);\n    }\n\n    Players.update({\n      _id: {\n        $in: _.pluck(game.players, \"_id\"),\n        $exists: {\n          exitStatus: false\n        }\n      }\n    }, {\n      $set: {\n        exitStatus: \"finished\",\n        exitAt: new Date()\n      }\n    }, {\n      multi: true\n    });\n    Games.update(gameId, {\n      $set: {\n        finishedAt: new Date(),\n        status: \"finished\"\n      }\n    });\n    GameLobbies.update({\n      gameId\n    }, {\n      $set: {\n        status: \"finished\"\n      }\n    });\n  }\n\n  delete lock[stageId];\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/stages/methods.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  updateStageData: () => updateStageData\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet Stages;\nmodule.link(\"./stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 2);\nlet shared;\nmodule.link(\"../../shared.js\", {\n  default(v) {\n    shared = v;\n  }\n\n}, 3);\nconst updateStageData = new ValidatedMethod({\n  name: \"Stages.methods.updateData\",\n  validate: new SimpleSchema({\n    stageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run(_ref) {\n    let {\n      stageId,\n      key,\n      value,\n      append,\n      noCallback\n    } = _ref;\n    const stage = Stages.findOne(stageId);\n\n    if (!stage) {\n      throw new Error(\"stage not found\");\n    } // TODO check can update this record stage\n\n\n    const val = JSON.parse(value);\n    let update = {\n      [\"data.\".concat(key)]: val\n    };\n    const modifier = append ? {\n      $push: update\n    } : {\n      $set: update\n    };\n    Stages.update(stageId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        stageId,\n        stage,\n        key,\n        value: val,\n        prevValue: stage.data && stage.data[key],\n        append\n      });\n    }\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stages.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/stages/stages.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Stages: () => Stages\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 1);\nlet BelongsTo, TimestampSchema, UserDataSchema, HasManyByRef;\nmodule.link(\"../default-schemas\", {\n  BelongsTo(v) {\n    BelongsTo = v;\n  },\n\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  UserDataSchema(v) {\n    UserDataSchema = v;\n  },\n\n  HasManyByRef(v) {\n    HasManyByRef = v;\n  }\n\n}, 2);\nlet Games;\nmodule.link(\"../games/games\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 3);\nlet PlayerStages;\nmodule.link(\"../player-stages/player-stages\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 4);\nlet Rounds;\nmodule.link(\"../rounds/rounds\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 5);\nconst Stages = new Mongo.Collection(\"stages\");\nStages.helpers({\n  round() {\n    return Rounds.findOne(this.roundId);\n  }\n\n});\nStages.stagePaddingDuration = moment.duration(0.25, \"seconds\");\nStages.schema = new SimpleSchema({\n  // Index represents the 0 based position of the current stage in the ordered\n  // list of a all the game's stages. For display, add 1.\n  index: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 999999 // That's a lot of stages...\n\n  },\n  name: {\n    type: String,\n    max: 64\n  },\n  displayName: {\n    type: String,\n    max: 128 // TODO Add auto value to by default copy the name into the displayName?\n\n  },\n  // This will synchronize the clients timer start time and record start time\n  // for the record\n  startTimeAt: {\n    type: Date,\n    optional: true\n  },\n  durationInSeconds: {\n    type: SimpleSchema.Integer,\n    // One day, that's a lot, but could be \"weird\" experiment, yet no going nuts\n    // into hundreds of years for example.\n    max: 24 * 60 * 60,\n    // It would be difficult to manage a timer that is less than 5s given all\n    // the multi-peer synchronization going on.\n    min: 5\n  }\n});\nStages.schema.extend(TimestampSchema);\nStages.schema.extend(UserDataSchema);\nStages.schema.extend(BelongsTo(\"Rounds\"));\nStages.schema.extend(BelongsTo(\"Games\"));\nStages.schema.extend(HasManyByRef(\"PlayerStages\"));\nStages.attachSchema(Stages.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"treatments\":{\"methods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/treatments/methods.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  createTreatment: () => createTreatment,\n  updateTreatment: () => updateTreatment\n});\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 1);\nlet IdSchema;\nmodule.link(\"../default-schemas.js\", {\n  IdSchema(v) {\n    IdSchema = v;\n  }\n\n}, 2);\nlet FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 3);\nlet Factors;\nmodule.link(\"../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 4);\nlet Treatments;\nmodule.link(\"./treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 5);\nconst createTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.create\",\n  validate: new SimpleSchema({\n    name: {\n      type: String,\n      max: 256,\n      optional: true\n    },\n    factorIds: {\n      type: Array,\n      label: \"Factors\"\n    },\n    \"factorIds.$\": {\n      type: String\n    }\n  }).validator(),\n\n  run(treatment) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    } // Validate the required factor types\n\n\n    const requiredFactorTypes = FactorTypes.find({\n      required: true,\n      archivedAt: {\n        $exists: false\n      }\n    }).fetch();\n\n    if (requiredFactorTypes.length > 0) {\n      const createdFactors = Factors.find({\n        _id: {\n          $in: treatment.factorIds\n        }\n      }).fetch();\n      const createdFactorTypes = FactorTypes.find({\n        $and: [{\n          _id: {\n            $in: createdFactors.map(f => f.factorTypeId)\n          }\n        }, {\n          required: true\n        }]\n      }).fetch();\n\n      if (requiredFactorTypes.length !== createdFactorTypes.length) {\n        throw new Error(\"Fill all required factors!\");\n      }\n    }\n\n    Treatments.insert(treatment);\n  }\n\n});\nconst updateTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.update\",\n  validate: Treatments.schema.pick(\"name\").extend(new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })).extend(IdSchema).validator(),\n\n  run(_ref) {\n    let {\n      _id,\n      name,\n      archived\n    } = _ref;\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const treatment = Treatments.findOne(_id);\n\n    if (!treatment) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n          $unset = {};\n\n    if (name !== undefined) {\n      $set.name = name;\n    }\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Treatments.update(_id, modifier);\n  }\n\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"treatments.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/treatments/treatments.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Treatments: () => Treatments\n});\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet Factors;\nmodule.link(\"../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 1);\nlet FactorTypes;\nmodule.link(\"../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 2);\nlet TimestampSchema, ArchivedSchema;\nmodule.link(\"../default-schemas\", {\n  TimestampSchema(v) {\n    TimestampSchema = v;\n  },\n\n  ArchivedSchema(v) {\n    ArchivedSchema = v;\n  }\n\n}, 3);\nconst Treatments = new Mongo.Collection(\"treatments\");\nTreatments.helpers({\n  displayName() {\n    return this.name || _.map(this.factors(), c => c.fullLabel()).join(\" - \");\n  },\n\n  factor(name) {\n    const type = FactorTypes.findOne({\n      name\n    });\n\n    if (!type) {\n      return;\n    }\n\n    return this.factors().find(c => c.factorTypeId === type._id);\n  },\n\n  factors() {\n    const query = {\n      _id: {\n        $in: this.factorIds\n      }\n    };\n    return Factors.find(query).fetch();\n  },\n\n  factorsObject() {\n    const doc = {};\n    this.factors().forEach(c => {\n      const type = FactorTypes.findOne(c.factorTypeId);\n      doc[type.name] = c.value;\n    });\n    return doc;\n  }\n\n});\nTreatments.schema = new SimpleSchema({\n  // Optional experimenter given name for the treatment\n  name: {\n    type: String,\n    max: 256,\n    optional: true,\n\n    custom() {\n      if (this.isSet && Treatments.find({\n        name: this.value\n      }).count() > 0) {\n        return \"notUnique\";\n      }\n    } // regEx: /^[a-zA-Z0-9_]+$/\n\n\n  },\n  // Array of factorIds\n  factorIds: {\n    type: Array,\n    minCount: FactorTypes.requiredTypes,\n    label: \"Factors\",\n    index: true,\n    denyUpdate: true // // Custom validation verifies required factors are present and that\n    // // there are no duplicate factors with the same key. We cannot easily\n    // // verify one of each factors is present.\n    // custom() {\n    //   if (!Meteor.isServer || !this.isInsert) {\n    //     return;\n    //   }\n    //   const factors = Factors.find({ _id: { $in: this.value } }).fetch();\n    //   const doc = {};\n    //   factors.forEach(c => (doc[c.type] = c.value));\n    //   const context = factorsSchema.newContext();\n    //   context.validate(doc);\n    //   if (!context.isValid()) {\n    //     const error = {\n    //       name: \"factorIds\",\n    //       type: \"invalid\",\n    //       details: context.validationErrors()\n    //     };\n    //     this.addValidationErrors([error]);\n    //     return \"invalid\";\n    //   }\n    // }\n\n  },\n  \"factorIds.$\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    label: \"Factor Item\"\n  }\n});\nTreatments.schema.addDocValidator((_ref) => {\n  let {\n    factorIds\n  } = _ref;\n\n  if (!this.isInsert) {\n    return [];\n  }\n\n  const query = {\n    factorIds: {\n      $size: factorIds.length,\n      $all: factorIds\n    }\n  };\n\n  if (Boolean(Treatments.findOne(query))) {\n    return [{\n      name: \"factorIds\",\n      type: \"notUnique\"\n    }];\n  }\n\n  return [];\n});\nTreatments.schema.extend(TimestampSchema);\nTreatments.schema.extend(ArchivedSchema);\nTreatments.attachSchema(Treatments.schema);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server\":{\"publications.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/api/treatments/server/publications.js                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet Treatments;\nmodule.link(\"../treatments\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 0);\nlet Factors;\nmodule.link(\"../../factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 1);\nlet FactorTypes;\nmodule.link(\"../../factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 2);\nMeteor.publish(\"admin-treatments\", function (_ref) {\n  let {\n    archived\n  } = _ref;\n\n  if (!this.userId) {\n    return null;\n  }\n\n  if (archived === undefined) {\n    return Treatments.find();\n  }\n\n  return Treatments.find({\n    archivedAt: {\n      $exists: Boolean(archived)\n    }\n  });\n});\nMeteor.publish(\"treatment\", function (treatmentId) {\n  if (!treatmentId) {\n    return [];\n  }\n\n  const treatment = Treatments.findOne(treatmentId);\n\n  if (!treatment) {\n    return [];\n  }\n\n  return [Treatments.find(treatmentId), Factors.find({\n    _id: {\n      $in: treatment.factorIds\n    }\n  }), FactorTypes.find()];\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"lib\":{\"componentChecker.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/lib/componentChecker.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  let React;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    }\n\n  }, 0);\n\n  function isClassComponent(component) {\n    return typeof component === \"function\" && !!component.prototype.isReactComponent ? true : false;\n  }\n\n  function isFunctionComponent(component) {\n    return typeof component === \"function\" && String(component).includes(\"return React.createElement\") ? true : false;\n  }\n\n  function isReactComponent(component) {\n    return isClassComponent(component) || isFunctionComponent(component) ? true : false;\n  }\n\n  function isElement(element) {\n    return React.isValidElement(element);\n  }\n\n  function isDOMTypeElement(element) {\n    return isElement(element) && typeof element.type === \"string\";\n  }\n\n  function isCompositeTypeElement(element) {\n    return isElement(element) && typeof element.type === \"function\";\n  }\n\n  module.exports = {\n    isClassComponent,\n    isFunctionComponent,\n    isReactComponent,\n    isElement,\n    isDOMTypeElement,\n    isCompositeTypeElement\n  };\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"counters.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/lib/counters.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Counter: () => Counter\n});\n// Named Atomic counters\n//\n// Example:\n//    Counter.inc(\"something\") // => 1\n//    Counter.inc(\"something\") // => 2\n//    Counter.inc(\"something\", 8) // => 10\n//    Counter.inc(\"something\", -5) // => 5\n//    Counter.set(\"something\", 42) // => 42\nlet incset;\n\nif (Meteor.isServer) {\n  const raw = new Mongo.Collection(\"counters\").rawCollection();\n  findAndModify = Meteor.wrapAsync(raw.findAndModify, raw);\n\n  incset = op => function (name) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const res = findAndModify({\n      _id: name\n    }, // query\n    null, // sort\n    {\n      [\"$\".concat(op)]: {\n        value: amount\n      }\n    }, // update\n    {\n      new: true,\n      upsert: true\n    } // options\n    );\n    return res.value && res.value.value;\n  };\n} else {\n  incset = op => () => {};\n}\n\nconst Counter = {\n  inc: incset(\"inc\"),\n  set: incset(\"set\")\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"log.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/lib/log.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet logging;\nmodule.link(\"loglevel\", {\n  \"*\"(v) {\n    logging = v;\n  }\n\n}, 0);\nconst log = logging.getLogger(\"main\"); // Fallback level if none is set in config file\n\nlog.setDefaultLevel(Meteor.isDevelopment ? \"info\" : \"warn\"); // Log level is set in \"public\" so it's accessible on the client\n// Valid log level strings are: trace, debug, info, warn, error or silent.\n\nif (Meteor.settings.public.loglevel) {\n  log.setLevel(Meteor.settings.public.loglevel);\n}\n\nmodule.exportDefault(log);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"utils.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/lib/utils.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  sleep: () => sleep,\n  weightedRandom: () => weightedRandom,\n  isReactComponents: () => isReactComponents,\n  getFunctionParameters: () => getFunctionParameters,\n  handleFactorValueErrorMessage: () => handleFactorValueErrorMessage\n});\nlet isClassComponent, isFunctionComponent, isReactComponent, isElement;\nmodule.link(\"./componentChecker\", {\n  isClassComponent(v) {\n    isClassComponent = v;\n  },\n\n  isFunctionComponent(v) {\n    isFunctionComponent = v;\n  },\n\n  isReactComponent(v) {\n    isReactComponent = v;\n  },\n\n  isElement(v) {\n    isElement = v;\n  }\n\n}, 0);\n\nconst sleep = ms => {\n  return new Promise(function (resolve, _) {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n};\n\nconst weightedRandom = values => {\n  const samples = [];\n\n  for (var i = 0; i < values.length; i += 1) {\n    if (!values[i] || !values[i].hasOwnProperty(\"value\") || !values[i].hasOwnProperty(\"weight\")) {\n      throw \"all values passed to weightedRandom must have a value and weight field\";\n    }\n\n    for (var j = 0; j < values[i].weight; j += 1) {\n      samples.push(values[i].value);\n    }\n  }\n\n  return () => samples[Math.floor(Math.random() * samples.length)];\n};\n\nconst isReactComponents = components => {\n  let isValid = true;\n\n  if (components && _.isArray(components)) {\n    for (let i = 0; i < components.length; i++) {\n      if (!isClassComponent(components[i]) && !isFunctionComponent(components[i]) && !isReactComponent(components[i]) && !isElement(components[i])) {\n        console.error(\"component is not a React Component!\", components[i]);\n        isValid = false;\n        break;\n      }\n    }\n  } else {\n    console.error(\"components is not Valid!\");\n    isValid = false;\n  }\n\n  return isValid;\n};\n\nlet STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nlet ARGUMENT_NAMES = /(?:^|,)\\s*([^\\s,=]+)/g;\n\nconst getFunctionParameters = func => {\n  let fnStr = func.toString().replace(STRIP_COMMENTS, \"\");\n  fnStr = fnStr.split(\"=>\")[0];\n  const argsList = fnStr.slice(fnStr.indexOf(\"(\") + 1, fnStr.indexOf(\")\"));\n  const result = argsList.match(ARGUMENT_NAMES);\n\n  if (result === null) {\n    return [];\n  } else {\n    let stripped = [];\n\n    for (let i = 0; i < result.length; i++) {\n      stripped.push(result[i].replace(/[\\s,]/g, \"\"));\n    }\n\n    return stripped;\n  }\n};\n\nconst handleFactorValueErrorMessage = error => {\n  switch (error.type) {\n    case \"maxNumber\":\n    case \"maxString\":\n      return \"Value must be less than or equal to  \".concat(error.max, \" \").concat(error.type === \"maxString\" ? \"character(s)\" : \"\", \".\");\n\n    case \"minNumber\":\n    case \"minString\":\n      return \"Value must be greater than or equal to  \".concat(error.min, \" \").concat(error.type === \"minString\" ? \"character(s)\" : \"\", \".\");\n\n    case \"scopedUnique\":\n      return \"\".concat(error.name, \" must be unique.\");\n\n    default:\n      return \"Unknown Error\";\n  }\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"startup\":{\"both\":{\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/both/index.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.link(\"../../api/schema-helpers.js\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"auth.js\":function module(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/auth.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAccounts.config({\n  sendVerificationEmail: false,\n  forbidClientAccountCreation: true,\n  ambiguousErrorMessages: true\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"avatars.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/avatars.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 0);\nlet Identicon;\nmodule.link(\"identicon.js\", {\n  default(v) {\n    Identicon = v;\n  }\n\n}, 1);\nlet jdenticon;\nmodule.link(\"jdenticon\", {\n  default(v) {\n    jdenticon = v;\n  }\n\n}, 2);\nWebApp.connectHandlers.use(\"/avatars\", (req, res) => {\n  const [type, id] = req.url.slice(1).split(\"/\");\n  const hash = crypto.createHash(\"sha1\").update(id).digest(\"hex\");\n  let svg;\n\n  switch (type) {\n    case \"identicon\":\n      svg = new Identicon(hash, {\n        size: 200,\n        format: \"svg\"\n      }).toString(true);\n      break;\n\n    case \"jdenticon\":\n      svg = jdenticon.toSvg(hash, 200);\n      break;\n\n    default:\n      res.writeHead(404, {});\n      res.end();\n      return;\n  }\n\n  res.writeHead(200, {\n    \"Content-Type\": \"image/svg+xml\"\n  });\n  res.end(svg);\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"bootstrap.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/bootstrap.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  bootstrapFunctions: () => bootstrapFunctions,\n  bootstrap: () => bootstrap\n});\nlet log;\nmodule.link(\"../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 0);\nconst admins = [];\nconst settingsAdmins = Meteor.settings.admins;\n\nif (settingsAdmins) {\n  if (!_.isArray(settingsAdmins)) {\n    log.error(\"settings: `admins` field is not an array\");\n  } else {\n    settingsAdmins.forEach((_ref) => {\n      let {\n        username,\n        password\n      } = _ref;\n\n      if (!username || !password) {\n        log.error(\"settings: `admins` require `username` and `password`\");\n      } else {\n        admins.push({\n          username,\n          password\n        });\n      }\n    });\n  }\n}\n\nif (admins.length === 0) {\n  const tempPassword = Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2);\n  admins.push({\n    username: \"admin\",\n    password: tempPassword\n  });\n  log.warn(\"You have not set a custom password for admin login.\\nIf you have a settings file (e.g. local.json) with \\\"admins\\\" configured, you can\\nrestart the app passing in the settings arg: \\\"meteor --settings local.json\\\".\\nYou can temporarily log in with (reset on each app reload):\\n  - username: admin\\n  - password: \".concat(tempPassword, \"\\n\"));\n}\n\nconst bootstrapFunctions = [];\n\nconst bootstrap = () => {\n  bootstrapFunctions.forEach(f => f());\n  log.debug(\"Bootstrapped!\");\n};\n\nMeteor.startup(() => {\n  bootstrap();\n});\nbootstrapFunctions.push(() => {\n  admins.forEach(admin => {\n    const exists = Meteor.users.findOne(_.omit(admin, \"password\"));\n\n    if (!exists) {\n      Accounts.createUser(admin);\n    } else {\n      Accounts.setPassword(exists._id, admin.password, {\n        logout: false\n      });\n    }\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connections.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/connections.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  connections: () => connections,\n  playerIdForConn: () => playerIdForConn,\n  savePlayerId: () => savePlayerId,\n  forgetPlayerId: () => forgetPlayerId\n});\nlet GameLobbies;\nmodule.link(\"../../api/game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 0);\nlet Players;\nmodule.link(\"../../api/players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 1);\nconst connections = {};\n\nconst playerInLobby = function (playerId) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"playerIds\";\n  const query = {\n    status: \"running\",\n    gameId: {\n      $exists: false\n    },\n    timedOutAt: {\n      $exists: false\n    },\n    [key]: playerId\n  };\n  return GameLobbies.findOne(query);\n};\n\nconst playerIdForConn = conn => {\n  return connections[conn.id];\n};\n\nconst savePlayerId = (conn, playerId) => {\n  connections[conn.id] = playerId;\n  const pii = Meteor.settings.collectPII ? {\n    ip: conn.clientAddress,\n    userAgent: conn.httpHeaders[\"user-agent\"]\n  } : {};\n  Players.update(playerId, {\n    $set: {\n      online: true,\n      lastLogin: _objectSpread({\n        at: new Date()\n      }, pii)\n    }\n  });\n  const player = Players.findOne(playerId);\n\n  if (!player.readyAt) {\n    return;\n  }\n\n  const lobby = playerInLobby(playerId, \"queuedPlayerIds\");\n\n  if (!lobby) {\n    return;\n  }\n\n  GameLobbies.update(lobby._id, {\n    $addToSet: {\n      playerIds: playerId\n    }\n  });\n};\n\nconst forgetPlayerId = conn => {\n  if (!connections[conn.id]) {\n    return;\n  }\n\n  const playerId = connections[conn.id];\n  Players.update(playerId, {\n    $set: {\n      online: false\n    },\n    $unset: {\n      idle: null\n    }\n  });\n  const lobby = playerInLobby(playerId);\n\n  if (!lobby) {\n    return;\n  }\n\n  GameLobbies.update(lobby._id, {\n    $pull: {\n      playerIds: playerId\n    }\n  });\n  delete connections[conn.id];\n};\n\nMeteor.onConnection(conn => {\n  conn.onClose(() => {\n    forgetPlayerId(conn);\n  });\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cron.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/cron.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet colors;\nmodule.link(\"colors/safe\", {\n  default(v) {\n    colors = v;\n  }\n\n}, 1);\nconst tasks = {};\nconst Cron = {\n  add(options) {\n    new SimpleSchema({\n      name: {\n        type: String\n      },\n      interval: {\n        type: SimpleSchema.Integer\n      },\n      // In ms, shouldn't be less than 1000ms\n      task: {\n        type: Function\n      }\n    }).validate(options);\n\n    if (tasks[options.name]) {\n      throw \"Cron task with name \".concat(options.name, \" already exists\");\n    }\n\n    tasks[options.name] = options;\n  }\n\n};\nconst logCron = Meteor.cron && Meteor.cron.log || false;\n\nconst cronLog = msg => logCron && console.info(msg);\n\nconst cronLogErr = msg => logCron && console.error(msg);\n\nMeteor.startup(() => {\n  for (const name in tasks) {\n    if (!tasks.hasOwnProperty(name)) {\n      continue;\n    }\n\n    const task = tasks[name];\n    Meteor.defer(() => {\n      const taskName = colors.bold(task.name);\n      const startLog = \"\".concat(colors.green(\"▶\"), \" \").concat(taskName);\n\n      const doneLog = (took, wait) => {\n        return \"\".concat(colors.red(\"◼\"), \" \").concat(taskName, \": Done in \").concat(took, \"ms. \") + \"Waiting for \".concat(wait < 0 ? 0 : wait, \"ms.\");\n      };\n\n      const log = {\n        info(msg) {\n          cronLog(\"\".concat(colors.dim(\"i\"), \" \").concat(taskName, \": \").concat(msg, \" \"));\n        },\n\n        error(msg) {\n          cronLog(\"\".concat(colors.red(\"✘\"), \" \").concat(colors.red(taskName + \":\"), \" \").concat(msg, \" \"));\n        }\n\n      };\n\n      let run = () => {\n        cronLog(startLog);\n        const start = new Date();\n        task.task(log);\n        const took = new Date() - start;\n        const wait = task.interval - took;\n        cronLog(doneLog(took, wait));\n\n        if (wait <= 0) {\n          Meteor.defer(run);\n        } else {\n          Meteor.setTimeout(run, wait);\n        }\n      };\n\n      run();\n    });\n  }\n});\nmodule.exportDefault(Cron);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"export.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/export.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  BOM: () => BOM,\n  cast: () => cast,\n  quoteMark: () => quoteMark,\n  doubleQuoteMark: () => doubleQuoteMark,\n  quoteRegex: () => quoteRegex,\n  encodeCells: () => encodeCells\n});\nlet archiver;\nmodule.link(\"archiver\", {\n  default(v) {\n    archiver = v;\n  }\n\n}, 0);\nlet contentDisposition;\nmodule.link(\"content-disposition\", {\n  default(v) {\n    contentDisposition = v;\n  }\n\n}, 1);\nlet moment;\nmodule.link(\"moment\", {\n  default(v) {\n    moment = v;\n  }\n\n}, 2);\nlet streams;\nmodule.link(\"stream-buffers\", {\n  default(v) {\n    streams = v;\n  }\n\n}, 3);\nlet Batches;\nmodule.link(\"../../api/batches/batches.js\", {\n  Batches(v) {\n    Batches = v;\n  }\n\n}, 4);\nlet FactorTypes;\nmodule.link(\"../../api/factor-types/factor-types.js\", {\n  FactorTypes(v) {\n    FactorTypes = v;\n  }\n\n}, 5);\nlet Factors;\nmodule.link(\"../../api/factors/factors.js\", {\n  Factors(v) {\n    Factors = v;\n  }\n\n}, 6);\nlet GameLobbies;\nmodule.link(\"../../api/game-lobbies/game-lobbies.js\", {\n  GameLobbies(v) {\n    GameLobbies = v;\n  }\n\n}, 7);\nlet Games;\nmodule.link(\"../../api/games/games.js\", {\n  Games(v) {\n    Games = v;\n  }\n\n}, 8);\nlet LobbyConfigs;\nmodule.link(\"../../api/lobby-configs/lobby-configs.js\", {\n  LobbyConfigs(v) {\n    LobbyConfigs = v;\n  }\n\n}, 9);\nlet PlayerInputs;\nmodule.link(\"../../api/player-inputs/player-inputs.js\", {\n  PlayerInputs(v) {\n    PlayerInputs = v;\n  }\n\n}, 10);\nlet PlayerLogs;\nmodule.link(\"../../api/player-logs/player-logs.js\", {\n  PlayerLogs(v) {\n    PlayerLogs = v;\n  }\n\n}, 11);\nlet PlayerRounds;\nmodule.link(\"../../api/player-rounds/player-rounds.js\", {\n  PlayerRounds(v) {\n    PlayerRounds = v;\n  }\n\n}, 12);\nlet PlayerStages;\nmodule.link(\"../../api/player-stages/player-stages.js\", {\n  PlayerStages(v) {\n    PlayerStages = v;\n  }\n\n}, 13);\nlet Players;\nmodule.link(\"../../api/players/players.js\", {\n  Players(v) {\n    Players = v;\n  }\n\n}, 14);\nlet Rounds;\nmodule.link(\"../../api/rounds/rounds.js\", {\n  Rounds(v) {\n    Rounds = v;\n  }\n\n}, 15);\nlet Stages;\nmodule.link(\"../../api/stages/stages.js\", {\n  Stages(v) {\n    Stages = v;\n  }\n\n}, 16);\nlet Treatments;\nmodule.link(\"../../api/treatments/treatments.js\", {\n  Treatments(v) {\n    Treatments = v;\n  }\n\n}, 17);\nlet log;\nmodule.link(\"../../lib/log.js\", {\n  default(v) {\n    log = v;\n  }\n\n}, 18);\nconst BOM = \"\\uFEFF\";\n\n// Get all possible keys in the data field of collections that have a data field\n// such as Players, PlayerStages and PlayerRounds.\nconst getDataKeys = coll => {\n  const map = {};\n  coll.find({}, {\n    fields: {\n      data: 1\n    }\n  }).forEach(record => {\n    _.keys(record.data).forEach(key => map[key] = true);\n  });\n  return _.keys(map);\n};\n\nconst cast = out => {\n  if (_.isArray(out)) {\n    // The cast here will flatten arrays but will still catch dates correctly\n    return out.map(a => cast(a)).join(\",\");\n  }\n\n  if (_.isDate(out)) {\n    return moment(out).utc().format();\n  }\n\n  if (_.isObject(out)) {\n    return JSON.stringify(out);\n  }\n\n  if (_.isString(out)) {\n    return out.replace(/\\n/g, \"\\\\n\");\n  }\n\n  if (out === false || out === 0) {\n    return out.toString();\n  }\n\n  return (out || \"\").toString();\n};\n\nconst quoteMark = '\"';\nconst doubleQuoteMark = '\"\"';\nconst quoteRegex = /\"/g;\n\nconst encodeCells = line => {\n  const row = line.slice(0);\n\n  for (var i = 0, len = row.length; i < len; i++) {\n    row[i] = cast(row[i]);\n\n    if (row[i].indexOf(quoteMark) !== -1) {\n      row[i] = quoteMark + row[i].replace(quoteRegex, doubleQuoteMark) + quoteMark;\n    } else if (row[i].indexOf(\",\") !== -1 || row[i].indexOf(\"\\\\n\") !== -1) {\n      row[i] = quoteMark + row[i] + quoteMark;\n    }\n  }\n\n  return row.join(\",\") + \"\\n\";\n};\n\nconst batch = function (coll) {\n  let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let sort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n  return iterator => {\n    let skip = 0,\n        records;\n\n    while (!records || records.length > 0) {\n      records = coll.find(query, {\n        sort,\n        limit,\n        skip\n      }).fetch();\n      records.forEach(iterator);\n      skip += limit;\n    }\n  };\n};\n\nWebApp.connectHandlers.use(\"/admin/export\", (req, res, next) => {\n  //\n  // Authentication\n  //\n  const loginToken = req.cookies && req.cookies.meteor_login_token;\n  let user;\n\n  if (loginToken) {\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n\n    const query = {\n      \"services.resume.loginTokens.hashedToken\": hashedToken\n    };\n    const options = {\n      fields: {\n        _id: 1\n      }\n    };\n    user = Meteor.users.findOne(query, options);\n  }\n\n  if (!user) {\n    res.writeHead(403);\n    res.end();\n    return;\n  } //\n  // Format\n  //\n\n\n  let format;\n\n  switch (true) {\n    case req.url === \"/\":\n      next();\n      return;\n\n    case req.url.includes(\"/.json\"):\n      format = \"json\";\n      break;\n\n    case req.url.includes(\"/.jsonl\"):\n      format = \"jsonl\";\n      break;\n\n    case req.url.includes(\"/.csv\"):\n      format = \"csv\";\n      break;\n\n    default:\n      res.writeHead(404);\n      res.end();\n      return;\n  } //\n  // Connection bookkeeping\n  //\n\n\n  let cancelRequest = false,\n      requestFinished = false;\n  req.on(\"close\", function (err) {\n    if (!requestFinished) {\n      log.info(\"Export request was cancelled\");\n      cancelRequest = true;\n    }\n  }); //\n  // Headers\n  //\n\n  const ts = moment().format(\"YYYY-MM-DD HH-mm-ss\");\n  const filename = \"Empirica Data - \".concat(ts);\n  res.setHeader(\"Content-Disposition\", contentDisposition(filename + \".zip\"));\n  res.setHeader(\"Content-Type\", \"application/zip\");\n  res.writeHead(200); //\n  // Create archive\n  //\n\n  var archive = archiver(\"zip\"); // good practice to catch warnings (ie stat failures and other non-blocking errors)\n\n  archive.on(\"warning\", function (err) {\n    if (err.code === \"ENOENT\") {\n      log.warn(\"archive warning\", err);\n    } else {\n      log.err(\"archive error\"); // throw error\n\n      throw err;\n    }\n  }); // good practice to catch this error explicitly\n\n  archive.on(\"error\", function (err) {\n    log.err(\"archive error\");\n    throw err;\n  }); // pipe archive data to the file\n\n  archive.pipe(res); //\n  // File creation helper\n  //\n\n  const existingFile = {};\n\n  const saveFile = function (name, keys, func) {\n    let dataKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    if (existingFile[name]) {\n      throw \"export filename already exists: \".concat(name);\n    }\n\n    existingFile[name] = true;\n    const file = new streams.ReadableStreamBuffer();\n    archive.append(file, {\n      name: \"\".concat(filename, \"/\").concat(name, \".\").concat(format)\n    });\n\n    if (format === \"csv\") {\n      file.put(BOM);\n      file.put(encodeCells(keys.concat(dataKeys.map(k => \"data.\".concat(k)))));\n    }\n\n    format === \"json\" && file.put(\"[\");\n    let isFirstLine = true;\n    func(function (data) {\n      let userData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      switch (format) {\n        case \"csv\":\n          const out = [];\n          keys.forEach(k => {\n            out.push(data[k]);\n          });\n          dataKeys.forEach(k => {\n            out.push(userData[k]);\n          });\n          file.put(encodeCells(out));\n          break;\n\n        case \"jsonl\":\n          _.each(userData, (v, k) => data[\"data.\".concat(k)] = v);\n\n          file.put(JSON.stringify(data) + \"\\n\");\n          break;\n\n        case \"json\":\n          _.each(userData, (v, k) => data[\"data.\".concat(k)] = v);\n\n          if (isFirstLine) {\n            isFirstLine = false;\n            file.put(\"\\t\" + JSON.stringify(data));\n          } else {\n            file.put(\",\\t\" + JSON.stringify(data));\n          }\n\n          break;\n\n        default:\n          throw \"unknown format: \".concat(format);\n      }\n    });\n    format === \"json\" && file.put(\"\\n]\");\n    file.stop();\n  }; //\n  // Exports\n  //\n\n\n  const factorTypeFields = [\"_id\", \"name\", \"required\", \"description\", \"type\", \"min\", \"max\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"factor-types\", factorTypeFields, puts => {\n    FactorTypes.find().forEach(ft => puts(_.pick(ft, factorTypeFields)));\n  });\n  const factorFields = [\"_id\", \"name\", \"value\", \"factorTypeId\", \"createdAt\"];\n  saveFile(\"factors\", factorFields, puts => {\n    batch(Factors)(f => puts(_.pick(f, factorFields)));\n  });\n  const treatmentFields = [\"_id\", \"name\", \"factorIds\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"treatments\", treatmentFields, puts => {\n    batch(Treatments)(f => puts(_.pick(f, treatmentFields)));\n  });\n  const lobbyConfigFields = [\"_id\", \"name\", \"timeoutType\", \"timeoutInSeconds\", \"timeoutStrategy\", \"timeoutBots\", \"extendCount\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"lobby-configs\", lobbyConfigFields, puts => {\n    batch(LobbyConfigs)(f => puts(_.pick(f, lobbyConfigFields)));\n  });\n  const batchFields = [\"_id\", \"index\", \"assignment\", \"full\", \"runningAt\", \"finishedAt\", \"status\", \"gameIds\", \"gameLobbyIds\", \"createdAt\", \"archivedAt\"];\n  saveFile(\"batches\", batchFields, puts => {\n    batch(Batches)(f => puts(_.pick(f, batchFields)));\n  });\n  const gameLobbyFields = [\"_id\", \"index\", \"availableCount\", \"timeoutStartedAt\", \"timedOutAt\", \"queuedPlayerIds\", \"playerIds\", \"gameId\", \"treatmentId\", \"batchId\", \"lobbyConfigId\", \"createdAt\"];\n  saveFile(\"game-lobbies\", gameLobbyFields, puts => {\n    batch(GameLobbies)(f => puts(_.pick(f, gameLobbyFields)));\n  });\n  const gameFields = [\"_id\", \"finishedAt\", \"gameLobbyId\", \"treatmentId\", \"roundIds\", \"playerIds\", \"batchId\", \"createdAt\"];\n  const gameDataFields = getDataKeys(Games);\n  saveFile(\"games\", gameFields, puts => {\n    batch(Games)(f => puts(_.pick(f, gameFields), _.pick(f.data, gameDataFields)));\n  }, gameDataFields);\n  const playerFields = [\"_id\", \"bot\", \"readyAt\", \"timeoutStartedAt\", \"timeoutWaitCount\", \"exitStepsDone\", \"exitAt\", \"exitStatus\", \"exitReason\", \"retiredAt\", \"retiredReason\", \"createdAt\"];\n\n  if (req.query.include_pii === \"true\") {\n    playerFields.splice(1, 0, \"id\", \"urlParams\");\n    playerFields.splice(playerFields.length, 0, \"lastLogin\");\n  }\n\n  const playerDataFields = getDataKeys(Players);\n  saveFile(\"players\", playerFields, puts => {\n    batch(Players)(p => puts(_.pick(p, playerFields), _.pick(p.data, playerDataFields)));\n  }, playerDataFields);\n  const roundFields = [\"_id\", \"index\", \"stageIds\", \"gameId\", \"createdAt\"];\n  const roundDataFields = getDataKeys(Rounds);\n  saveFile(\"rounds\", roundFields, puts => {\n    batch(Rounds)(p => puts(_.pick(p, roundFields), _.pick(p.data, roundDataFields)));\n  }, roundDataFields);\n  const stageFields = [\"_id\", \"index\", \"name\", \"displayName\", \"startTimeAt\", \"durationInSeconds\", \"roundId\", \"gameId\", \"createdAt\"];\n  const stageDataFields = getDataKeys(Stages);\n  saveFile(\"stages\", stageFields, puts => {\n    batch(Stages)(p => puts(_.pick(p, stageFields), _.pick(p.data, stageDataFields)));\n  }, stageDataFields);\n  const playerRoundFields = [\"_id\", \"batchId\", \"playerId\", \"roundId\", \"gameId\", \"createdAt\"];\n  const playerRoundDataFields = getDataKeys(PlayerRounds);\n  saveFile(\"player-rounds\", playerRoundFields, puts => {\n    batch(PlayerRounds)(p => puts(_.pick(p, playerRoundFields), _.pick(p.data, playerRoundDataFields)));\n  }, playerRoundDataFields);\n  const playerStageFields = [\"_id\", \"batchId\", \"playerId\", \"stageId\", \"roundId\", \"gameId\", \"createdAt\", \"submittedAt\"];\n  const playerStageDataFields = getDataKeys(PlayerStages);\n  saveFile(\"player-stages\", playerStageFields, puts => {\n    batch(PlayerStages)(p => puts(_.pick(p, playerStageFields), _.pick(p.data, playerStageDataFields)));\n  }, playerStageDataFields);\n  const playerInputFields = [\"_id\", \"playerId\", \"gameId\", \"createdAt\"];\n  const playerInputDataFields = getDataKeys(PlayerInputs);\n  saveFile(\"player-inputs\", playerInputFields, puts => {\n    batch(PlayerInputs)(p => puts(_.pick(p, playerInputFields), _.pick(p.data, playerInputDataFields)));\n  }, playerInputDataFields);\n  const playerLogFields = [\"_id\", \"playerId\", \"gameId\", \"roundId\", \"stageId\", \"name\", \"jsonData\", \"createdAt\"];\n  saveFile(\"player-logs\", playerLogFields, puts => {\n    batch(PlayerLogs)(p => puts(_.pick(p, playerLogFields)));\n  });\n  archive.finalize();\n  requestFinished = true;\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/index.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.link(\"../both/index.js\");\nmodule.link(\"./auth.js\");\nmodule.link(\"./bootstrap.js\");\nmodule.link(\"./cron.js\");\nmodule.link(\"./register-api.js\");\nmodule.link(\"./avatars.js\");\nmodule.link(\"./export.js\");\nmodule.link(\"./connections.js\");\nmodule.link(\"../../lib/utils.js\");\nmodule.link(\"../../api/indexes.js\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"register-api.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/empirica_core/startup/server/register-api.js                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.link(\"../../api/admin/methods.js\");\nmodule.link(\"../../api/batches/methods.js\");\nmodule.link(\"../../api/batches/hooks.js\");\nmodule.link(\"../../api/batches/server/publications.js\");\nmodule.link(\"../../api/factors/methods.js\");\nmodule.link(\"../../api/factors/server/publications.js\");\nmodule.link(\"../../api/factor-types/methods.js\");\nmodule.link(\"../../api/factor-types/hooks.js\");\nmodule.link(\"../../api/factor-types/server/publications.js\");\nmodule.link(\"../../api/factor-types/server/bootstrap.js\");\nmodule.link(\"../../api/game-lobbies/hooks.js\");\nmodule.link(\"../../api/game-lobbies/server/cron.js\");\nmodule.link(\"../../api/game-lobbies/server/publications.js\");\nmodule.link(\"../../api/games/hooks.js\");\nmodule.link(\"../../api/games/methods.js\");\nmodule.link(\"../../api/games/server/publications.js\");\nmodule.link(\"../../api/games/server/cron.js\");\nmodule.link(\"../../api/lobby-configs/methods.js\");\nmodule.link(\"../../api/lobby-configs/server/publications.js\");\nmodule.link(\"../../api/players/methods.js\");\nmodule.link(\"../../api/players/server/publications\");\nmodule.link(\"../../api/player-inputs/methods.js\");\nmodule.link(\"../../api/player-rounds/methods.js\");\nmodule.link(\"../../api/player-stages/methods.js\");\nmodule.link(\"../../api/player-stages/hooks.js\");\nmodule.link(\"../../api/rounds/methods.js\");\nmodule.link(\"../../api/stages/methods.js\");\nmodule.link(\"../../api/treatments/methods.js\");\nmodule.link(\"../../api/treatments/server/publications.js\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"node_modules\":{\"simpl-schema\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/simpl-schema/package.json                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"simpl-schema\",\n  \"version\": \"1.5.5\",\n  \"main\": \"./dist/main.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"dist\":{\"main.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/simpl-schema/dist/main.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"loglevel\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/loglevel/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"loglevel\",\n  \"version\": \"1.6.1\",\n  \"main\": \"lib/loglevel\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"loglevel.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/loglevel/lib/loglevel.js                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"colors\":{\"safe.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/colors/safe.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"@babel\":{\"runtime\":{\"helpers\":{\"objectSpread2.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/@babel/runtime/helpers/objectSpread2.js                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"js-yaml\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/js-yaml/package.json                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"js-yaml\",\n  \"version\": \"3.12.0\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/js-yaml/index.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"inflection\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/inflection/package.json                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"inflection\",\n  \"version\": \"1.12.0\",\n  \"main\": \"./lib/inflection.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"inflection.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/inflection/lib/inflection.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"moment\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/moment/package.json                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"moment\",\n  \"version\": \"2.22.2\",\n  \"main\": \"./moment.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"moment.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/moment/moment.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"react\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/react/package.json                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"react\",\n  \"version\": \"16.5.2\",\n  \"main\": \"index.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/react/index.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"identicon.js\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/identicon.js/package.json                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"identicon.js\",\n  \"version\": \"2.3.2\",\n  \"main\": \"identicon.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"identicon.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/identicon.js/identicon.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"jdenticon\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/jdenticon/package.json                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"jdenticon\",\n  \"version\": \"2.1.0\",\n  \"main\": \"index.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/jdenticon/index.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"archiver\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/archiver/package.json                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"archiver\",\n  \"version\": \"3.0.0\",\n  \"main\": \"index.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/archiver/index.js                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"content-disposition\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/content-disposition/package.json                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"content-disposition\",\n  \"version\": \"0.5.2\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/content-disposition/index.js                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"stream-buffers\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/stream-buffers/package.json                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.exports = {\n  \"name\": \"stream-buffers\",\n  \"version\": \"3.0.2\",\n  \"main\": \"./lib/streambuffer.js\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"streambuffer.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// node_modules/meteor/empirica_core/node_modules/stream-buffers/lib/streambuffer.js                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\",\n    \".mjs\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/empirica:core/server.js\");\n\n/* Exports */\nPackage._define(\"empirica:core\", exports);\n\n})();\n","servePath":"/packages/empirica_core.js","sourceMap":{"version":3,"sources":["packages/empirica:core/server.js","packages/empirica:core/gameLobby-lock.js","packages/empirica:core/shared.js","packages/empirica:core/api/collections.js","packages/empirica:core/api/default-schemas.js","packages/empirica:core/api/indexes.js","packages/empirica:core/api/schema-helpers.js","packages/empirica:core/api/admin/methods.js","packages/empirica:core/api/batches/batches.js","packages/empirica:core/api/batches/hooks.js","packages/empirica:core/api/batches/methods.js","packages/empirica:core/api/batches/status-schema.js","packages/empirica:core/api/batches/server/publications.js","packages/empirica:core/api/factor-types/factor-types.js","packages/empirica:core/api/factor-types/hooks.js","packages/empirica:core/api/factor-types/methods.js","packages/empirica:core/api/factor-types/server/bootstrap.js","packages/empirica:core/api/factor-types/server/publications.js","packages/empirica:core/api/factors/factors.js","packages/empirica:core/api/factors/methods.js","packages/empirica:core/api/factors/server/publications.js","packages/empirica:core/api/game-lobbies/game-lobbies.js","packages/empirica:core/api/game-lobbies/hooks.js","packages/empirica:core/api/game-lobbies/methods.js","packages/empirica:core/api/game-lobbies/server/cron.js","packages/empirica:core/api/game-lobbies/server/publications.js","packages/empirica:core/api/games/augment.js","packages/empirica:core/api/games/create.js","packages/empirica:core/api/games/games.js","packages/empirica:core/api/games/hooks.js","packages/empirica:core/api/games/methods.js","packages/empirica:core/api/games/server/cron.js","packages/empirica:core/api/games/server/publications.js","packages/empirica:core/api/lobby-configs/lobby-configs.js","packages/empirica:core/api/lobby-configs/methods.js","packages/empirica:core/api/lobby-configs/server/publications.js","packages/empirica:core/api/player-inputs/methods.js","packages/empirica:core/api/player-inputs/player-inputs.js","packages/empirica:core/api/player-logs/methods.js","packages/empirica:core/api/player-logs/player-logs.js","packages/empirica:core/api/player-rounds/methods.js","packages/empirica:core/api/player-rounds/player-rounds.js","packages/empirica:core/api/player-stages/augment.js","packages/empirica:core/api/player-stages/hooks.js","packages/empirica:core/api/player-stages/methods.js","packages/empirica:core/api/player-stages/player-stages.js","packages/empirica:core/api/players/methods.js","packages/empirica:core/api/players/players.js","packages/empirica:core/api/players/server/publications.js","packages/empirica:core/api/rounds/methods.js","packages/empirica:core/api/rounds/rounds.js","packages/empirica:core/api/server/onchange.js","packages/empirica:core/api/server/onsubmit.js","packages/empirica:core/api/stages/finish.js","packages/empirica:core/api/stages/methods.js","packages/empirica:core/api/stages/stages.js","packages/empirica:core/api/treatments/methods.js","packages/empirica:core/api/treatments/treatments.js","packages/empirica:core/api/treatments/server/publications.js","packages/empirica:core/lib/componentChecker.js","packages/empirica:core/lib/counters.js","packages/empirica:core/lib/log.js","packages/empirica:core/lib/utils.js","packages/empirica:core/startup/both/index.js","packages/empirica:core/startup/server/auth.js","packages/empirica:core/startup/server/avatars.js","packages/empirica:core/startup/server/bootstrap.js","packages/empirica:core/startup/server/connections.js","packages/empirica:core/startup/server/cron.js","packages/empirica:core/startup/server/export.js","packages/empirica:core/startup/server/index.js","packages/empirica:core/startup/server/register-api.js"],"names":["module","export","config","link","SimpleSchema","default","v","playerIdForConn","callOnChange","callOnSubmit","earlyExitGame","shared","getFunctionParameters","Games","debug","safeCallback","name","func","arguments","handleCallbackFuncParameters","game","findOne","_id","finishedAt","console","log","apply","err","error","call","gameId","endReason","status","parameters","handler","getOwnPropertyDescriptor","target","keyIndex","key","split","index","parseInt","Error","proxy","Proxy","forEach","Object","bots","Empirica","gameInit","bot","obj","onGameStart","onRoundStart","onStageStart","onStageEnd","onRoundEnd","onGameEnd","onSet","onAppend","onChange","onSubmit","exportDefault","gameLobbyLock","sharedNamespace","collections","Batches","Factors","GameLobbies","LobbyConfigs","PlayerInputs","PlayerRounds","PlayerStages","Players","Rounds","Stages","Treatments","IdSchema","ArchivedSchema","DebugModeSchema","TimestampSchema","CreatorSchema","UserDataSchema","PolymorphicSchema","HasManyByRef","BelongsTo","inflection","type","String","optional","regEx","RegEx","Id","archivedById","autoValue","field","isSet","userId","undefined","archivedAt","Date","label","debugMode","Boolean","defaultValue","createdAt","isInsert","isUpsert","$setOnInsert","unset","updatedAt","isUpdate","createdById","isFromTrustedCode","updatedById","data","blackbox","collTypes","objectType","allowedValues","objectId","coll","camel","camelize","singularize","titleize","fieldName","Array","required","singular","Meteor","startup","setTimeout","schema","_name","_schema","hasOwnProperty","def","desc","warn","opts","sparse","options","unique","JSON","stringify","rawCollection","createIndex","res","codeName","Collection2","extendOptions","on","collection","ss","version","messageBox","messages","scopedUnique","addValidator","definition","uniqueFieldScope","val","value","find","count","en","insertNotAllowed","updateNotAllowed","schemaDenyValidator","denyInsert","denyUpdate","_objectSpread","yaml","FactorTypes","bootstrap","userColls","keepPartial","deleteColls","concat","localTypeForImported","factorTypeId","importedType","factorTypes","t","localFactorForImported","factorId","importedFactor","factors","importedFactorTypeId","factor","archivedUpdate","existingArchivedAt","$set","$unset","methods","adminImportConfiguration","text","safeLoad","convertFactorTypeId","convertFactorId","f","exists","query","update","insert","params","treatments","factorIds","importedFactorIds","map","_","compact","length","lobbyConfigs","l","pick","adminExportConfiguration","out","fetch","push","safeDump","isDevelopment","settings","public","debug_resetDatabase","adminResetDB","partial","isClient","driver","MongoInternals","defaultRemoteCollectionDriver","db","mongo","listCollections","toArray","bindEnvironment","colls","sortBy","c","includes","open","drop","extra","maxGamesCount","assignmentTypes","statusSchema","Counter","BatchesCollection","Mongo","Collection","doc","callback","inc","helpers","gameCount","assignment","simpleConfig","completeGameCount","reduce","completeConfig","sum","duplicate","simple","complete","Integer","full","runningAt","custom","min","max","minCount","maxCount","debug_gameDebugMode","extend","attachSchema","sendPlayersToNextBatches","after","batch","gameLobbies","times","treatment","Random","choice","treatmentId","lobbyConfigId","shuffle","gameLobbyIds","id","batchId","batchUpdated","availableCount","botsCountCond","botsCount","botNames","keys","playerIds","gameLobbyId","readyAt","info","playerId","queuedPlayerIds","fieldNames","modifier","$nin","multi","games","gplayerIds","flatten","pluck","$in","exitAt","$exists","exitStatus","glplayerIds","players","fetchPrevious","createBatch","duplicateBatch","updateBatch","updateBatchStatus","ValidatedMethod","validate","omit","validator","run","autoConvert","filter","archived","setBatchInDebugMode","publish","props","fields","requiredTypes","types","description","Number","notUnique","factorType","createFactorType","updateFactorType","initialValues","oneOf","bootstrapFunctions","defaultTypes","typeConversion","factorTypeName","fullLabel","valueValidation","simpleSchmemaType","fieldSchema","newContext","isValid","validationErrors","errors","addValidationErrors","slice","createFactor","updateFactor","handleFactorValueErrorMessage","e","join","timeoutStartedAt","timedOutAt","createGameFromLobby","checkBatchFull","checkForBatchFinished","gameLobby","transform","humanPlayers","p","readyPlayersCount","lobbyConfig","timeoutType","updateGameLobbyData","earlyExitGameLobby","append","noCallback","parse","$push","trimStrings","removeEmptyStrings","isServer","conn","connection","prevValue","exitReason","availableLobby","$and","moment","Cron","checkLobbyTimeout","lobby","now","startTimeAt","endTimeAt","add","timeoutInSeconds","ended","isSameOrAfter","timeoutStrategy","checkIndividualTimeout","player","timeoutWaitCount","extendCount","$pull","interval","task","publishComposite","children","augmentGameObject","augmentPlayerStageRound","round","stage","firstRoundId","currentStageId","gameTreatment","gamePlayers","gameRounds","gameStages","defineProperties","get","factorsObject","stages","s","rounds","defineProperty","roundId","augmentGameStageRound","weightedRandom","addStageErrMsg","set","gameCollector","k","addRound","addStage","displayName","durationInSeconds","durationInSecondsAsInt","isNaN","len","uniq","stageIndex","totalDuration","insertOption","StagesUpdateOp","initializeUnorderedBulkOp","RoundsOp","StagesOp","roundsOpResult","stagesOpResult","wrapAsync","execute","roundIds","getInsertedIds","ids","PlayerStagesOp","PlayerRoundsOp","sParams","stageIds","stageId","playerStagesResult","playerStageIds","upsert","updateOne","playerRoundIdsResult","playerRoundIds","estFinishedTime","toDate","failedPlayerIds","difference","nextRound","r","nextStage","stagePaddingDuration","runningBatches","$ne","sort","lobbiesGroups","runningBatcheIds","b","possibleLobbies","indexOf","i","lobbies","weigthedLobbyPool","weight","$addToSet","GamesCollection","expectedGamesCount","gamesCount","timeOutGameLobbiesCount","gameQuery","noGamesLeft","gameLobbiesQuery","lobbiesCount","noGameLobbiesLeft","updateGameData","endOfStage","$gte","botPlayers","botPlayer","onStageTick","tick","diff","base","details","timeoutBots","timeoutTypes","timeoutStrategies","maxTimeoutInSeconds","defaultTimeoutInSeconds","createLobbyConfig","updateLobbyConfig","addPlayerInput","rawData","playerLog","PlayerLogs","jsonData","updatePlayerRoundData","playerRoundId","playerRound","augmentGameLobby","augmentPlayerLobby","augmentPlayer","stubPlayerStageRound","stubStageRound","updatePlayerData","earlyExitPlayer","earlyExitPlayerLobby","updateRoundData","updateStageData","submitPlayerStage","updatePlayerStageData","gameSet","gameLobbySet","playerSet","stageSet","playerStageId","stageSubmit","cb","roundSet","nullFunc","exit","reason","playerStage","submit","submitted","submittedAt","end","playerIDs","availPlayerIDs","doneCount","createPlayer","playerReady","markPlayerExitStepDone","extendPlayerTimeoutWait","endPlayerTimeoutWait","retireSinglePlayer","retireGameFullPlayers","playerWasRetired","updatePlayerStatus","exitStatuses","sleep","urlParams","existing","lobbyPool","skipInstructions","assignToLobby","lobbyUpdated","stepName","exitStepsDone","$inc","currentPlayer","onlinePlayers","retiredAt","timestamp","toISOString","retiredReason","idle","lastActivityAt","playerIdConn","PlayersCollection","online","lastLogin","savePlayerId","retired","selector","playerExists","clients","hasPlayers","initializing","handle","observeChanges","added","client","changed","removed","ready","onStop","targets","cbName","onSetAppend","callbacks","targetType","lock","duration","createTreatment","updateTreatment","requiredFactorTypes","createdFactors","createdFactorTypes","addDocValidator","$size","$all","React","module1","isClassComponent","component","prototype","isReactComponent","isFunctionComponent","isElement","element","isValidElement","isDOMTypeElement","isCompositeTypeElement","exports","incset","raw","findAndModify","op","amount","new","logging","getLogger","setDefaultLevel","loglevel","setLevel","isReactComponents","ms","Promise","resolve","values","samples","j","Math","floor","random","components","isArray","STRIP_COMMENTS","ARGUMENT_NAMES","fnStr","toString","replace","argsList","result","match","stripped","Accounts","sendVerificationEmail","forbidClientAccountCreation","ambiguousErrorMessages","crypto","Identicon","jdenticon","WebApp","connectHandlers","use","req","url","hash","createHash","digest","svg","size","format","toSvg","writeHead","admins","settingsAdmins","username","password","tempPassword","admin","users","createUser","setPassword","logout","connections","forgetPlayerId","playerInLobby","pii","collectPII","ip","clientAddress","userAgent","httpHeaders","at","onConnection","onClose","colors","tasks","Function","logCron","cron","cronLog","msg","cronLogErr","defer","taskName","bold","startLog","green","doneLog","took","wait","red","dim","start","BOM","cast","quoteMark","doubleQuoteMark","quoteRegex","encodeCells","archiver","contentDisposition","streams","getDataKeys","record","a","isDate","utc","isObject","isString","line","row","limit","iterator","skip","records","next","loginToken","cookies","meteor_login_token","user","hashedToken","_hashLoginToken","cancelRequest","requestFinished","ts","filename","setHeader","archive","code","pipe","existingFile","saveFile","dataKeys","file","ReadableStreamBuffer","put","isFirstLine","userData","each","stop","factorTypeFields","puts","ft","factorFields","treatmentFields","lobbyConfigFields","batchFields","gameLobbyFields","gameFields","gameDataFields","playerFields","include_pii","splice","playerDataFields","roundFields","roundDataFields","stageFields","stageDataFields","playerRoundFields","playerRoundDataFields","playerStageFields","playerStageDataFields","playerInputFields","playerInputDataFields","playerLogFields","finalize"],"mappings":"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","file":"/packages/empirica_core.js","sourcesContent":["import \"./startup/server/index.js\";\n\nimport SimpleSchema from \"simpl-schema\";\nSimpleSchema.debug = true;\n\nimport { playerIdForConn } from \"./startup/server/connections.js\";\nimport { callOnChange } from \"./api/server/onchange.js\";\nimport { callOnSubmit } from \"./api/server/onsubmit.js\";\nimport { earlyExitGame } from \"./api/games/methods.js\";\nimport shared from \"./shared\";\nimport { getFunctionParameters } from \"./lib/utils\";\nimport { Games } from \"./api/games/games.js\";\n\nconst safeCallback = function(name, func, arguments) {\n  try {\n    switch (name) {\n      case \"onGameStart\":\n      case \"onRoundStart\":\n      case \"onStageStart\":\n      case \"onStageEnd\":\n      case \"onRoundEnd\":\n      case \"onGameEnd\":\n        handleCallbackFuncParameters(func);\n        break;\n\n      default:\n        break;\n    }\n\n    const game = Games.findOne(arguments[0]._id);\n\n    if (game.finishedAt) {\n      console.log(\"safeCallback: game already ended.\");\n      return;\n    }\n\n    return func.apply(this, arguments);\n  } catch (err) {\n    console.error(`Fatal error encounter calling Empirica.${name}:`);\n    console.error(err);\n    const game = arguments[0];\n\n    earlyExitGame.call({\n      gameId: game._id,\n      endReason: `Failed on ${name} callback`,\n      status: \"failed\"\n    });\n  }\n};\n\nconst handleCallbackFuncParameters = func => {\n  const parameters = getFunctionParameters(func);\n  const handler = {\n    getOwnPropertyDescriptor(target, keyIndex) {\n      const key = keyIndex.split(\"__-__\")[0];\n      const index = parseInt(keyIndex.split(\"__-__\")[1]);\n      if (\n        (key === \"game\" && index === 0) ||\n        (key === \"round\" && index === 1) ||\n        (key === \"stage\" && index === 2)\n      ) {\n        return;\n      } else if (key === \"players\") {\n        throw new Error(\n          `the \"players\" argument has been deprecated, use \"game.players\" instead`\n        );\n      } else {\n        throw new Error(`\"${key}\" property is not allowed on this callback`);\n      }\n    }\n  };\n\n  const proxy = new Proxy({}, handler);\n  parameters.forEach((key, index) => {\n    const keyIndex = key + \"__-__\" + index;\n    Object.getOwnPropertyDescriptor(proxy, keyIndex);\n  });\n};\n\n// Maybe could do better...\nconst config = { bots: {} };\n\nconst Empirica = {\n  // New name for init: gameInit\n  gameInit(func) {\n    config.gameInit = func;\n  },\n\n  bot(name, obj) {\n    if (config.bots[name]) {\n      throw `Bot \"${name}\" was declared twice!`;\n    }\n    config.bots[name] = obj;\n  },\n\n  onGameStart(func) {\n    config.onGameStart = function() {\n      return safeCallback(\"onGameStart\", func, arguments);\n    };\n  },\n\n  onRoundStart(func) {\n    config.onRoundStart = function() {\n      return safeCallback(\"onRoundStart\", func, arguments);\n    };\n  },\n\n  onStageStart(func) {\n    config.onStageStart = function() {\n      return safeCallback(\"onStageStart\", func, arguments);\n    };\n  },\n\n  onStageEnd(func) {\n    config.onStageEnd = function() {\n      return safeCallback(\"onStageEnd\", func, arguments);\n    };\n  },\n\n  onRoundEnd(func) {\n    config.onRoundEnd = function() {\n      return safeCallback(\"onRoundEnd\", func, arguments);\n    };\n  },\n\n  onGameEnd(func) {\n    config.onGameEnd = function() {\n      return safeCallback(\"onGameEnd\", func, arguments);\n    };\n  },\n\n  onSet(func) {\n    config.onSet = function() {\n      return safeCallback(\"onSet\", func, arguments);\n    };\n  },\n\n  onAppend(func) {\n    config.onAppend = function() {\n      return safeCallback(\"onAppend\", func, arguments);\n    };\n  },\n\n  onChange(func) {\n    config.onChange = function() {\n      return safeCallback(\"onChange\", func, arguments);\n    };\n  },\n\n  onSubmit(func) {\n    config.onSubmit = function() {\n      return safeCallback(\"onSubmit\", func, arguments);\n    };\n  }\n};\n\nexport { config };\nexport default Empirica;\n\n// Help access to server only modules from shared modules\nshared.playerIdForConn = playerIdForConn;\nshared.callOnChange = callOnChange;\nshared.callOnSubmit = callOnSubmit;\n","const gameLobbyLock = {};\n\nexport default gameLobbyLock;\n","// sharedNamespace is used for being able to loading files on client or server\n// exclusively, from files which are themselves shared.\n\nconst sharedNamespace = {};\n\nexport default sharedNamespace;\n","import { Batches } from \"./batches/batches.js\";\nimport { Factors } from \"./factors/factors.js\";\nimport { GameLobbies } from \"./game-lobbies/game-lobbies.js\";\nimport { Games } from \"./games/games.js\";\nimport { LobbyConfigs } from \"./lobby-configs/lobby-configs.js\";\nimport { PlayerInputs } from \"./player-inputs/player-inputs.js\";\nimport { PlayerRounds } from \"./player-rounds/player-rounds.js\";\nimport { PlayerStages } from \"./player-stages/player-stages.js\";\nimport { Players } from \"./players/players.js\";\nimport { Rounds } from \"./rounds/rounds.js\";\nimport { Stages } from \"./stages/stages.js\";\nimport { Treatments } from \"./treatments/treatments.js\";\n\nexport const collections = [\n  Batches,\n  Factors,\n  GameLobbies,\n  Games,\n  LobbyConfigs,\n  PlayerInputs,\n  PlayerRounds,\n  PlayerStages,\n  Players,\n  Rounds,\n  Stages,\n  Treatments\n];\n","import SimpleSchema from \"simpl-schema\";\nimport inflection from \"inflection\";\n\nexport const IdSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nexport const ArchivedSchema = new SimpleSchema({\n  archivedById: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue() {\n      if (this.field(\"archivedAt\").isSet) {\n        return this.userId;\n      }\n      return undefined;\n    }\n  },\n  archivedAt: {\n    type: Date,\n    label: \"Archived at\",\n    optional: true\n  }\n});\n\nexport const DebugModeSchema = new SimpleSchema({\n  debugMode: {\n    type: Boolean,\n    defaultValue: false\n  }\n});\n\nexport const TimestampSchema = new SimpleSchema({\n  createdAt: {\n    type: Date,\n    label: \"Created at\",\n    // denyUpdate: true,\n    index: true,\n    autoValue() {\n      if (this.isInsert) {\n        return new Date();\n      } else if (this.isUpsert) {\n        return { $setOnInsert: new Date() };\n      } else {\n        this.unset(); // Prevent user from supplying their own value\n      }\n    }\n  },\n  updatedAt: {\n    type: Date,\n    label: \"Last updated at\",\n    optional: true,\n    // denyInsert: true,\n    index: true,\n    autoValue() {\n      if (this.isUpdate) {\n        return new Date();\n      }\n    }\n  }\n});\n\n// Userful for admin operations, tracking who created what.\nexport const CreatorSchema = new SimpleSchema({\n  createdById: {\n    type: String,\n    label: \"Created by\",\n    // denyUpdate: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue() {\n      if (this.isInsert) {\n        return this.isSet && this.isFromTrustedCode ? undefined : this.userId;\n      }\n      return undefined;\n    },\n    index: true\n  },\n  updatedById: {\n    type: String,\n    label: \"Last updated by\",\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    autoValue() {\n      if (this.isUpdate) {\n        return this.userId;\n      }\n    },\n    index: true\n  }\n});\n\nexport const UserDataSchema = new SimpleSchema({\n  data: {\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  }\n});\n\n// The PolymorphicSchema allows to have records be attached to different\n// types of collection. (belongs_to :coll, polymorphic: true)\n// objectType and objectId point to the owning object of the record\n// objectTypes are the names of the collection that the record can be\n// associated with. ex. [\"BriefSection\", \"Brief\", \"Board\"]\nexport const PolymorphicSchema = function(collTypes) {\n  return new SimpleSchema({\n    objectType: {\n      type: String,\n      allowedValues: collTypes,\n      // denyUpdate: true,\n      index: true\n    },\n    objectId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      // denyUpdate: true,\n      index: true\n    }\n  });\n};\n\nexport const HasManyByRef = function(coll) {\n  const camel = inflection.camelize(inflection.singularize(coll), true);\n  const label = inflection.titleize(coll);\n  const fieldName = `${camel}Ids`;\n  return new SimpleSchema({\n    [fieldName]: {\n      type: Array,\n      defaultValue: [],\n      label,\n      index: true\n    },\n    [`${fieldName}.$`]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      label: `${label} Item`\n    }\n  });\n};\n\nexport const BelongsTo = function(coll, required = true) {\n  const singular = inflection.singularize(coll);\n  const camel = inflection.camelize(singular, true);\n  const label = inflection.titleize(singular);\n  const fieldName = `${camel}Id`;\n  return new SimpleSchema({\n    [fieldName]: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      label,\n      // denyUpdate,\n      index: true,\n      optional: !required\n    }\n  });\n};\n","// This file handles index creation.\n//\n// You can add manual indexes below in the Meteor.startup callback. But it is\n// first recommended to try and add the indexes directly to the schemas.\n//\n// Due to circular references in the schemas, the schemas are not always all\n// composed before SimpleSchema's attempt to create indexes. Therefor we\n// sometimes end up missing some indexes. The loop over all collecitons below\n// is trying to remedy this problem by running index creation after a delay.\n//\n\nimport inflection from \"inflection\";\nimport log from \"../lib/log.js\";\nimport { collections } from \"./collections.js\";\n\nMeteor.startup(() => {\n  // Add manual indexes here. Example:\n  //\n  // Batches.rawCollection().createIndex({\n  //   \"fieldname\": 1\n  // }, { unique: true })\n\n  //\n  // The following loop will try to add indexes marked in the Schemas\n  //\n\n  Meteor.setTimeout(() => {\n    collections.forEach(coll => {\n      if (!coll.schema) {\n        return;\n      }\n\n      try {\n        const name = inflection.titleize(coll._name);\n        log.debug(\"Adding indexes to\", name);\n\n        for (const key in coll.schema._schema) {\n          if (coll.schema._schema.hasOwnProperty(key)) {\n            const def = coll.schema._schema[key];\n\n            const desc = `\"${name}\" – { ${key}: { index: ${def.index} } }`;\n\n            // No index wanted\n            if (def.index === undefined) {\n              continue;\n            }\n\n            // Wanting index to be removed, not supported\n            if (def.index === false) {\n              log.warn(`{ index: false } not supported on ${desc}`);\n              continue;\n            }\n\n            // Only 1, -1 and true values supported\n            if (!(def.index === true || def.index === 1 || def.index === -1)) {\n              log.warn(`unknown index value on ${desc}`);\n              continue;\n            }\n\n            // Add opts supported by SimpleSchema:index\n            const opts = {};\n            if (def.sparse === true) {\n              options.sparse = true;\n            }\n            if (def.unique === true) {\n              opts.unique = true;\n            }\n\n            let index = {};\n            switch (def.index) {\n              case 1:\n              case true:\n                index = { [key]: 1 };\n                break;\n              case -1:\n                index = { [key]: -1 };\n                break;\n            }\n\n            log.debug(\n              `  - createIndex(${JSON.stringify(index)}, ${JSON.stringify(\n                opts\n              )})`\n            );\n\n            coll.rawCollection().createIndex(index, opts, (err, res) => {\n              if (err && err.codeName !== \"IndexOptionsConflict\") {\n                log.error(\n                  `can't create index: ${name}/${JSON.stringify(index)}. ${err}`\n                );\n              }\n            });\n          }\n        }\n      } catch (error) {}\n    });\n  }, 1000);\n});\n","import Collection2 from \"meteor/aldeed:collection2\";\nimport SimpleSchema from \"simpl-schema\";\n\n// Must be unique scoped by other field (for given value of passed field,\n// The current field should be unique). For ex:\n//   Name: {\n//     Type: String,\n//     ScopedUnique: \"orgId\"\n//   }\n// Name must be unique for document with equal orgId.\n// Documents with different orgId can have same name.\nSimpleSchema.extendOptions([\"scopedUnique\"]);\n\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (ss.version >= 2) {\n    ss.messageBox.messages({\n      scopedUnique: \"Already exists\"\n    });\n  }\n\n  ss.addValidator(function() {\n    if (!this.isSet) {\n      return;\n    }\n\n    const def = this.definition;\n    const uniqueFieldScope = def.scopedUnique;\n\n    if (!uniqueFieldScope) {\n      return;\n    }\n\n    const val = this.field(uniqueFieldScope).value;\n    const key = this.key;\n    if (\n      collection\n        .find({\n          [uniqueFieldScope]: val,\n          [key]: this.value\n        })\n        .count() > 0\n    ) {\n      return \"uniqueScoped\";\n    }\n  });\n});\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\"denyInsert\", \"denyUpdate\"]);\n\nCollection2.on(\"schema.attached\", (collection, ss) => {\n  if (\n    ss.version >= 2 &&\n    ss.messageBox &&\n    typeof ss.messageBox.messages === \"function\"\n  ) {\n    ss.messageBox.messages({\n      en: {\n        insertNotAllowed: \"{{label}} cannot be set during an insert\",\n        updateNotAllowed: \"{{label}} cannot be set during an update\"\n      }\n    });\n  }\n\n  ss.addValidator(function schemaDenyValidator() {\n    if (!this.isSet) return;\n\n    const def = this.definition;\n\n    if (def.denyInsert && this.isInsert) return \"insertNotAllowed\";\n    if (def.denyUpdate && (this.isUpdate || this.isUpsert))\n      return \"updateNotAllowed\";\n  });\n});\n\n// Extend the schema options allowed by SimpleSchema\nSimpleSchema.extendOptions([\n  \"index\", // one of Number, String, Boolean\n  \"unique\", // Boolean\n  \"sparse\" // Boolean\n]);\n","// This should contain admin top level type operations like resetting the DB\n// or performing other grand operations. Use with extreme caution.\nimport yaml from \"js-yaml\";\n\nimport { Treatments } from \"../../api/treatments/treatments.js\";\nimport { Factors } from \"../../api/factors/factors.js\";\nimport { FactorTypes } from \"../../api/factor-types/factor-types.js\";\nimport { LobbyConfigs } from \"../../api/lobby-configs/lobby-configs.js\";\nimport { bootstrap } from \"../../startup/server/bootstrap.js\";\nimport log from \"../../lib/log.js\";\n\nconst userColls = [\"meteor_accounts_loginServiceConfiguration\", \"users\"];\nconst keepPartial = [\"treatments\", \"factors\", \"factor_types\", \"lobby_configs\"];\nconst deleteColls = [\n  \"game_lobbies\",\n  \"player_inputs\",\n  \"batches\",\n  \"rounds\",\n  \"counters\",\n  \"games\",\n  \"player_rounds\",\n  \"players\",\n  \"player_stages\",\n  \"player_logs\",\n  \"stages\"\n].concat(keepPartial);\n\nconst localTypeForImported = data => {\n  return factorTypeId => {\n    const importedType = data.factorTypes.find(t => t._id === factorTypeId);\n    if (!importedType) {\n      log.warn(\"could not find corresponding factorTypeId\", factorTypeId);\n      return;\n    }\n    const type = FactorTypes.findOne({ name: importedType.name });\n    if (!type) {\n      log.warn(\"could not import factor type, no correponding type\");\n      return;\n    }\n\n    return type._id;\n  };\n};\n\nconst localFactorForImported = data => {\n  return factorId => {\n    const importedFactor = data.factors.find(t => t._id === factorId);\n    if (!importedFactor) {\n      log.warn(\"could not import factor, no correponding imported factor\");\n      return;\n    }\n    const { value, factorTypeId: importedFactorTypeId } = importedFactor;\n\n    const factorTypeId = localTypeForImported(data)(importedFactorTypeId);\n    if (!factorTypeId) {\n      log.warn(\"could not convert factor types\");\n      return;\n    }\n    const factor = Factors.findOne({ value, factorTypeId });\n    if (!factor) {\n      log.warn(\"could not import factor, no correponding factor\");\n      return;\n    }\n\n    return factor._id;\n  };\n};\n\nconst archivedUpdate = (archivedAt, existingArchivedAt) =>\n  !!archivedAt === !!existingArchivedAt\n    ? null\n    : archivedAt\n    ? { $set: { archivedAt: new Date() } }\n    : { $unset: { archivedAt: true, archivedById: true } };\n\nMeteor.methods({\n  adminImportConfiguration({ text }) {\n    log.debug(\"Import starting.\");\n    const data = yaml.safeLoad(text);\n    const convertFactorTypeId = localTypeForImported(data);\n    const convertFactorId = localFactorForImported(data);\n\n    (data.factorTypes || []).forEach(f => {\n      const { archivedAt, name } = f;\n      const exists = FactorTypes.findOne({ name });\n      if (exists) {\n        log.debug(\"exists FactorTypes\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n        if (query) {\n          FactorTypes.update(exists._id, query);\n        }\n        return;\n      }\n      log.debug(\"new FactorTypes\");\n      FactorTypes.insert(f);\n    });\n\n    (data.factors || []).forEach(f => {\n      const { factorTypeId: importedFactorTypeId, value } = f;\n      const factorTypeId = convertFactorTypeId(importedFactorTypeId);\n      if (!factorTypeId) {\n        log.debug(\"could not convert factorTypeIds\");\n        return;\n      }\n      const exists = Factors.findOne({ factorTypeId, value });\n      if (exists) {\n        log.debug(\"exists Factors\");\n        return;\n      }\n      const params = { ...f, factorTypeId };\n      log.debug(\"new Factors\", params);\n      Factors.insert(params);\n    });\n\n    (data.treatments || []).forEach(t => {\n      const { archivedAt, factorIds: importedFactorIds } = t;\n      const factorIds = importedFactorIds.map(convertFactorId);\n      if (_.compact(factorIds).length !== importedFactorIds.length) {\n        log.debug(\"could not convert factorIds\");\n        return;\n      }\n      const exists = Treatments.findOne({ factorIds });\n      if (exists) {\n        log.debug(\"exists Treatments\");\n        const query = archivedUpdate(archivedAt, exists.archivedAt);\n        if (query) {\n          Treatments.update(exists._id, query);\n        }\n        return;\n      }\n      const params = { ...t, factorIds };\n      log.debug(\"new Treatments\", params);\n      Treatments.insert(params);\n    });\n\n    (data.lobbyConfigs || []).forEach(l => {\n      const query = _.pick(\n        l,\n        \"timeoutType\",\n        \"timeoutInSeconds\",\n        \"timeoutStrategy\",\n        \"timeoutBots\",\n        \"extendCount\"\n      );\n      const exists = LobbyConfigs.findOne(query);\n      if (exists) {\n        log.debug(\"exists LobbyConfigs\");\n        const query = archivedUpdate(l.archivedAt, exists.archivedAt);\n        if (query) {\n          LobbyConfigs.update(exists._id, query);\n        }\n        return;\n      }\n      log.debug(\"new LobbyConfigs\");\n      LobbyConfigs.insert(l);\n    });\n\n    log.debug(\"Import done.\");\n  },\n\n  adminExportConfiguration() {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const out = {\n      treatments: [],\n      factorTypes: [],\n      factors: [],\n      lobbyConfigs: []\n    };\n\n    const treatments = Treatments.find().fetch();\n    treatments.forEach(t =>\n      out.treatments.push(_.pick(t, \"name\", \"factorIds\", \"archivedAt\"))\n    );\n\n    const factorTypes = FactorTypes.find().fetch();\n    factorTypes.forEach(t =>\n      out.factorTypes.push(\n        _.pick(\n          t,\n          \"_id\",\n          \"name\",\n          \"description\",\n          \"required\",\n          \"type\",\n          \"min\",\n          \"max\",\n          \"archivedAt\"\n        )\n      )\n    );\n\n    const factors = Factors.find().fetch();\n    factors.forEach(f =>\n      out.factors.push(\n        _.pick(f, \"_id\", \"name\", \"value\", \"factorTypeId\", \"archivedAt\")\n      )\n    );\n\n    const lobbyConfigs = LobbyConfigs.find().fetch();\n    lobbyConfigs.forEach(l =>\n      out.lobbyConfigs.push(\n        _.pick(\n          l,\n          \"name\",\n          \"timeoutType\",\n          \"timeoutInSeconds\",\n          \"timeoutStrategy\",\n          \"timeoutBots\",\n          \"extendCount\",\n          \"bacthIds\",\n          \"gameLobbyIds\",\n          \"archivedAt\"\n        )\n      )\n    );\n\n    return yaml.safeDump(out);\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_resetDatabase) {\n  Meteor.methods({\n    adminResetDB(partial) {\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      if (Meteor.isClient) {\n        return;\n      }\n\n      const driver = MongoInternals.defaultRemoteCollectionDriver();\n      const db = driver.mongo.db;\n\n      db.listCollections().toArray(\n        Meteor.bindEnvironment((err, colls) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n          colls = _.sortBy(colls, c => (c.name === \"players\" ? 0 : 1));\n          colls.forEach(collection => {\n            if (!deleteColls.includes(collection.name)) {\n              return;\n            }\n            if (partial && keepPartial.includes(collection.name)) {\n              return;\n            }\n            const coll = driver.open(collection.name);\n            coll.rawCollection().drop();\n          });\n\n          db.listCollections().toArray(\n            Meteor.bindEnvironment((err, colls) => {\n              if (err) {\n                console.error(err);\n                return;\n              }\n\n              log.debug(\"Keeping:\");\n              colls.forEach(collection => {\n                let extra = \"\";\n                if (userColls.includes(collection.name)) {\n                  extra = \"(used by admin login system)\";\n                }\n                log.debug(\" - \" + collection.name, extra);\n              });\n\n              log.debug(\"Cleared DB\");\n\n              bootstrap();\n            })\n          );\n        })\n      );\n    }\n  });\n}\n\nMeteor.startup(() => {});\n","import SimpleSchema from \"simpl-schema\";\n\nimport { statusSchema } from \"./status-schema\";\nimport {\n  ArchivedSchema,\n  TimestampSchema,\n  HasManyByRef,\n  DebugModeSchema\n} from \"../default-schemas\";\nimport { Treatments } from \"../treatments/treatments\";\nimport { Counter } from \"../../lib/counters\";\n\nclass BatchesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"batches\");\n    return super.insert(doc, callback);\n  }\n}\n\nexport const Batches = new BatchesCollection(\"batches\");\n\nBatches.helpers({\n  gameCount() {\n    return this.assignment === \"simple\"\n      ? this.simpleConfig.count\n      : this.completeGameCount();\n  },\n\n  completeGameCount() {\n    return _.reduce(\n      this.completeConfig.treatments,\n      (sum, t) => sum + t.count,\n      0\n    );\n  },\n\n  duplicate() {\n    const { assignment, simpleConfig, completeConfig } = this;\n    Batches.insert({\n      assignment,\n      simpleConfig,\n      completeConfig,\n      status: \"init\"\n    });\n  }\n});\n\nexport const maxGamesCount = 10000000;\n\nexport const assignmentTypes = {\n  simple: \"Simple\",\n  complete: \"Complete\"\n};\n\nBatches.schema = new SimpleSchema({\n  // Auto-incremented number assigned to batches as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n\n  assignment: {\n    type: String,\n    // \"custom\" not yet supported\n    allowedValues: [\"simple\", \"complete\", \"custom\"]\n  },\n\n  full: {\n    label: \"Batch is full, all games are running\",\n    type: Boolean,\n    defaultValue: false\n  },\n\n  runningAt: {\n    label: \"Time when batch started running\",\n    type: Date,\n    optional: true\n  },\n\n  finishedAt: {\n    label: \"Time when batch finished running\",\n    type: Date,\n    optional: true\n  },\n\n  // Simple configuration at init\n  simpleConfig: {\n    type: Object,\n    optional: true,\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"simple\") {\n        return \"required\";\n      }\n    }\n  },\n  \"simpleConfig.count\": {\n    type: SimpleSchema.Integer,\n    min: 1,\n    max: maxGamesCount\n  },\n  \"simpleConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount() {\n      return Treatments.find().count();\n    }\n  },\n  \"simpleConfig.treatments.$\": {\n    type: Object\n  },\n  \"simpleConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"simpleConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n\n  // Complete configuration at init\n  completeConfig: {\n    type: Object,\n    optional: true,\n    custom() {\n      if (!this.value && this.field(\"assignment\").value === \"complete\") {\n        return \"required\";\n      }\n    }\n  },\n  \"completeConfig.treatments\": {\n    type: Array,\n    minCount: 1,\n    maxCount() {\n      return Treatments.find().count();\n    }\n  },\n  \"completeConfig.treatments.$\": {\n    type: Object\n  },\n  \"completeConfig.treatments.$._id\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  },\n  \"completeConfig.treatments.$.count\": {\n    type: SimpleSchema.Integer,\n    minCount: 1,\n    maxCount: maxGamesCount\n  },\n  \"completeConfig.treatments.$.lobbyConfigId\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Batches.schema.extend(DebugModeSchema);\n}\n\nBatches.schema.extend(statusSchema);\nBatches.schema.extend(TimestampSchema);\nBatches.schema.extend(ArchivedSchema);\nBatches.schema.extend(HasManyByRef(\"Games\"));\nBatches.schema.extend(HasManyByRef(\"GameLobbies\"));\nBatches.attachSchema(Batches.schema);\n","import { config } from \"../../server\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { sendPlayersToNextBatches } from \"../games/create\";\nimport { Games } from \"../games/games\";\nimport { Players } from \"../players/players.js\";\nimport { Treatments } from \"../treatments/treatments\";\nimport { Batches } from \"./batches\";\n\n// Create GameLobbies\nBatches.after.insert(function(userId, batch) {\n  let gameLobbies = [];\n  switch (batch.assignment) {\n    case \"simple\":\n      _.times(batch.simpleConfig.count, index => {\n        const treatment = Random.choice(batch.simpleConfig.treatments);\n        const { _id: treatmentId, lobbyConfigId } = treatment;\n        gameLobbies.push({\n          treatmentId,\n          lobbyConfigId,\n          index\n        });\n      });\n      break;\n    case \"complete\":\n      batch.completeConfig.treatments.forEach(\n        ({ count, _id, lobbyConfigId }) => {\n          _.times(count, () => {\n            gameLobbies.push({ treatmentId: _id, lobbyConfigId });\n          });\n        }\n      );\n\n      gameLobbies = _.shuffle(gameLobbies);\n      gameLobbies.forEach((l, index) => {\n        l.index = index;\n      });\n      break;\n    default:\n      console.error(\"Batches.after: unknown assignment: \" + batch.assignment);\n      break;\n  }\n\n  const gameLobbyIds = gameLobbies.map(l => {\n    l._id = Random.id();\n    l.status = batch.status;\n    l.batchId = batch._id;\n\n    // This is trully horrific. Sorry.\n    // The debug mode is assigned asynchronously onto the batch, which might happen\n    // just as this on insert hook is called. Sorry.\n    const batchUpdated = Batches.findOne(batch._id);\n    l.debugMode = batchUpdated.debugMode;\n\n    const treatment = Treatments.findOne(l.treatmentId);\n    l.availableCount = treatment.factor(\"playerCount\").value;\n    const botsCountCond = treatment.factor(\"botsCount\");\n    if (botsCountCond) {\n      const botsCount = botsCountCond.value;\n      if (botsCount > l.availableCount) {\n        throw \"Trying to create a game with more bots than players\";\n      }\n      if (botsCount === l.availableCount) {\n        //throw \"Creating a game with only bots...\";\n        //Would be good to display a message \"Are you sure you want to create a game with only bots?\"\n        console.log(\"Warning: Creating a game with only bots!\");\n      }\n      const botNames = config.bots && _.keys(config.bots);\n      if (!config.bots || botNames.length === 0) {\n        throw \"Trying to create a game with bots, but no bots defined\";\n      }\n\n      l.playerIds = [];\n      _.times(botsCount, () => {\n        const params = {\n          id: Random.id(),\n          gameLobbyId: l._id,\n          readyAt: new Date(),\n          bot: _.shuffle(botNames)[0]\n        };\n        console.info(\"Creating bot:\", params);\n        const playerId = Players.insert(params);\n        l.playerIds.push(playerId);\n      });\n      l.queuedPlayerIds = l.playerIds;\n    }\n\n    return GameLobbies.insert(l);\n  });\n\n  Batches.update(batch._id, { $set: { gameLobbyIds } });\n});\n\n// Update status on Games and GameLobbies\nBatches.after.update(\n  function(userId, { _id: batchId, status }, fieldNames, modifier, options) {\n    if (!fieldNames.includes(\"status\")) {\n      return;\n    }\n\n    [Games, GameLobbies].forEach(coll => {\n      coll.update(\n        {\n          batchId,\n          status: { $nin: [\"finished\", \"cancelled\", \"failed\", \"custom\"] }\n        },\n        { $set: { status } },\n        { multi: true }\n      );\n    });\n\n    if (status !== \"cancelled\") {\n      return;\n    }\n\n    const games = Games.find({ batchId }).fetch();\n    const gplayerIds = _.flatten(_.pluck(games, \"playerIds\"));\n\n    Players.update(\n      { _id: { $in: gplayerIds }, exitAt: { $exists: false } },\n      { $set: { exitStatus: \"gameCancelled\", exitAt: new Date() } },\n      { multi: true }\n    );\n\n    const gameLobbies = GameLobbies.find({\n      batchId,\n      gameId: { $exists: false }\n    }).fetch();\n\n    if (gameLobbies.length === 0) {\n      return;\n    }\n\n    const glplayerIds = _.flatten(_.pluck(gameLobbies, \"queuedPlayerIds\"));\n    const players = Players.find({\n      _id: { $in: glplayerIds },\n      exitAt: { $exists: false }\n    }).fetch();\n\n    const playerIds = _.pluck(players, \"_id\");\n\n    sendPlayersToNextBatches(playerIds, batchId, gameLobbies[0]);\n  },\n  { fetchPrevious: false }\n);\n","import SimpleSchema from \"simpl-schema\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\n\nimport { Batches } from \"./batches\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies.js\";\nimport { Games } from \"../games/games.js\";\nimport { IdSchema } from \"../default-schemas\";\n\nexport const createBatch = new ValidatedMethod({\n  name: \"Batches.methods.create\",\n\n  validate: Batches.schema\n    .omit(\n      \"gameIds\",\n      \"gameLobbyIds\",\n      \"status\",\n      \"createdAt\",\n      \"updatedAt\",\n      \"debugMode\",\n      \"full\",\n      \"index\"\n    )\n    .validator(),\n\n  run(batch) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    Batches.insert(batch, {\n      autoConvert: false,\n      filter: false,\n      validate: false\n    });\n  }\n});\n\nexport const duplicateBatch = new ValidatedMethod({\n  name: \"Batches.methods.duplicate\",\n\n  validate: IdSchema.validator(),\n\n  run({ _id }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    batch.duplicate();\n  }\n});\n\nexport const updateBatch = new ValidatedMethod({\n  name: \"Batches.methods.updateBatch\",\n\n  validate: new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!batch.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Batches.update(_id, modifier);\n  }\n});\n\nexport const updateBatchStatus = new ValidatedMethod({\n  name: \"Batches.methods.updateStatus\",\n\n  validate: Batches.schema\n    .pick(\"status\")\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, status }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const batch = Batches.findOne(_id);\n    if (!batch) {\n      throw new Error(\"not found\");\n    }\n\n    if (status === \"init\") {\n      throw new Error(\"invalid\");\n    }\n\n    const $set = { status };\n\n    if (status === \"running\") {\n      $set.runningAt = new Date();\n      GameLobbies.update(\n        { batchId: _id },\n        { $set: { status: \"running\" } },\n        { multi: true }\n      );\n    }\n\n    Batches.update(_id, { $set });\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  export const setBatchInDebugMode = new ValidatedMethod({\n    name: \"Batches.methods.debugMode\",\n\n    validate: IdSchema.validator(),\n\n    run({ _id }) {\n      if (!this.userId) {\n        throw new Error(\"unauthorized\");\n      }\n\n      const batch = Batches.findOne(_id);\n      if (!batch) {\n        throw new Error(\"not found\");\n      }\n\n      Batches.update(_id, { $set: { debugMode: true } });\n      GameLobbies.update({ batchId: _id }, { $set: { debugMode: true } });\n      Games.update({ batchId: _id }, { $set: { debugMode: true } });\n    }\n  });\n}\n","import SimpleSchema from \"simpl-schema\";\n\nexport const statusSchema = new SimpleSchema({\n  status: {\n    type: String,\n    allowedValues: [\n      \"init\", // Batch created, not running yet\n      \"running\", // Batch is running\n\n      // NOTE(np): paused: for now, we don't support paused because we need to do something about timers\n      // \"paused\", // Batch has been pause, ongoing games keep on going but no more new players are accepted. Can be restarted.\n\n      \"finished\", // Batch has finished and cannot be restarted\n\n      // NOTE(np): cancelled might break a game if it's running at the moment, gotta be careful\n      \"cancelled\", // Batch was cancelled and cannot be restarted\n      \"failed\",\n      \"custom\" // used for game.end(\"custom reason\")\n    ],\n    defaultValue: \"init\",\n    index: 1\n  }\n});\n","import { GameLobbies } from \"../../game-lobbies/game-lobbies\";\nimport { Games } from \"../../games/games\";\nimport { Rounds } from \"../../rounds/rounds\";\nimport { Stages } from \"../../stages/stages\";\nimport { Batches } from \"../batches\";\n\nMeteor.publish(\"admin-batches\", function(props) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!props || props.archived === undefined) {\n    return Batches.find();\n  }\n\n  return Batches.find({ archivedAt: { $exists: Boolean(props.archived) } });\n});\n\nMeteor.publish(\"admin-batch\", function({ batchId }) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!batchId) {\n    return null;\n  }\n\n  return [GameLobbies.find({ batchId }), Games.find({ batchId })];\n});\n\nMeteor.publish(\"admin-batch-game\", function({ gameId }) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!gameId) {\n    return null;\n  }\n\n  return [Rounds.find({ gameId }), Stages.find({ gameId })];\n});\n\nMeteor.publish(\"runningBatches\", function({ playerId }) {\n  return Batches.find(\n    { status: \"running\", full: false },\n    { fields: { _id: 1, full: 1 } }\n  );\n});\n","import SimpleSchema from \"simpl-schema\";\nimport { ArchivedSchema, TimestampSchema } from \"../default-schemas.js\";\n\nexport const FactorTypes = new Mongo.Collection(\"factor_types\");\n\nFactorTypes.helpers({});\n\n// requiredFactors hold a list of factors keys that are required by\n// Empirica core to be able to run a game.\n// Required factors are:\n// -`playerCount` determines how many players participate in a game and is\n//   therefore critical to run a game.\nFactorTypes.requiredTypes = [\"playerCount\"];\n\nFactorTypes.types = [\"String\", \"Integer\", \"Number\", \"Boolean\"];\n\nFactorTypes.schema = new SimpleSchema({\n  required: {\n    type: Boolean\n  },\n\n  name: {\n    type: String,\n    max: 256,\n    regEx: /^[a-z]+[a-zA-Z0-9]*$/,\n    index: true,\n    unique: true,\n    custom() {\n      if (this.isSet && FactorTypes.find({ name: this.value }).count() > 0) {\n        return \"notUnique\";\n      }\n    }\n  },\n\n  description: {\n    type: String,\n    min: 1,\n    max: 2048\n  },\n\n  type: {\n    type: String,\n    allowedValues: FactorTypes.types\n  },\n\n  min: {\n    type: Number,\n    optional: true\n  },\n\n  max: {\n    type: Number,\n    optional: true\n  }\n});\n\nFactorTypes.schema.messageBox.messages({\n  en: {\n    notUnique: \"{{label}} already exists.\"\n  }\n});\n\nFactorTypes.schema.extend(ArchivedSchema);\nFactorTypes.schema.extend(TimestampSchema);\nFactorTypes.attachSchema(FactorTypes.schema);\n","import { FactorTypes } from \"./factor-types.js\";\nimport { Factors } from \"../factors/factors.js\";\n\nFactorTypes.after.insert(function(userId, factorType) {\n  const { _id: factorTypeId, type } = factorType;\n  if (type === \"Boolean\") {\n    [true, false].forEach(value => Factors.insert({ factorTypeId, value }));\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\n\nimport { Factors } from \"../factors/factors.js\";\nimport { FactorTypes } from \"./factor-types.js\";\nimport { IdSchema } from \"../default-schemas.js\";\n\nexport const createFactorType = new ValidatedMethod({\n  name: \"FactorTypes.methods.create\",\n\n  validate: FactorTypes.schema\n    .omit(\"createdAt\", \"updatedAt\")\n    .extend(\n      new SimpleSchema({\n        initialValues: {\n          type: Array,\n          optional: true\n        },\n\n        \"initialValues.$\": {\n          type: SimpleSchema.oneOf(\n            {\n              type: String,\n              scopedUnique: \"type\"\n            },\n            {\n              type: SimpleSchema.Integer,\n              scopedUnique: \"type\"\n            },\n            {\n              type: Number,\n              scopedUnique: \"type\"\n            },\n            {\n              type: Boolean,\n              scopedUnique: \"type\"\n            }\n          )\n        }\n      })\n    )\n    .validator(),\n\n  run(factorType) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const { initialValues } = factorType;\n    const factorTypeId = FactorTypes.insert(\n      _.omit(factorType, \"initialValues\"),\n      { autoConvert: false }\n    );\n\n    initialValues.forEach(value => Factors.insert({ factorTypeId, value }));\n  }\n});\n\nexport const updateFactorType = new ValidatedMethod({\n  name: \"FactorTypes.methods.update\",\n\n  validate: new SimpleSchema({\n    archived: {\n      type: Boolean,\n      optional: true\n    }\n  })\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n    const factorType = FactorTypes.findOne(_id);\n    if (!factorType) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (factorType.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!factorType.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    FactorTypes.update(_id, modifier);\n  }\n});\n","import { FactorTypes } from \"../factor-types.js\";\nimport log from \"../../../lib/log.js\";\nimport { bootstrapFunctions } from \"../../../startup/server/bootstrap.js\";\n\nconst defaultTypes = [\n  {\n    name: \"playerCount\",\n    description: \"The Number of players participating in the given game.\",\n    type: \"Integer\",\n    min: 1,\n    required: true\n  }\n];\n\nbootstrapFunctions.push(() => {\n  defaultTypes.forEach(type => {\n    const exists = FactorTypes.findOne({ name: type.name });\n    if (exists) {\n      return;\n    }\n    log.info(`Inserting default Factor Type: ${type.name}`);\n    try {\n      FactorTypes.insert(type);\n    } catch (error) {\n      log.error(`Failed to insert '${type.name}' default Factor Type: ${err}`);\n    }\n  });\n});\n","import { FactorTypes } from \"../factor-types.js\";\n\nMeteor.publish(\"admin-factor-types\", function() {\n  if (!this.userId) {\n    return null;\n  }\n\n  return FactorTypes.find();\n});\n","import SimpleSchema from \"simpl-schema\";\nimport {\n  ArchivedSchema,\n  BelongsTo,\n  TimestampSchema\n} from \"../default-schemas.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\n\nexport const Factors = new Mongo.Collection(\"factors\");\n\nFactors.helpers({\n  label() {\n    let label = this.name;\n    const value = String(this.value);\n    if (label !== value) {\n      label += ` (${value})`;\n    }\n    return label;\n  },\n\n  factorType() {\n    return FactorTypes.findOne(this.factorTypeId);\n  },\n\n  factorTypeName() {\n    const t = this.factorType();\n    return t && t.name;\n  },\n\n  fullLabel() {\n    return `${this.factorTypeName()}: ${this.label()}`;\n  }\n});\n\nexport const typeConversion = {\n  Integer: SimpleSchema.Integer,\n  String: String,\n  Number: Number,\n  Boolean: Boolean\n};\n\nFactors.valueValidation = function(factorType, value, simpleSchmemaType) {\n  const type = typeConversion[factorType.type];\n\n  if (simpleSchmemaType && simpleSchmemaType !== type) {\n    return;\n  }\n\n  const fieldSchema = { type };\n  if (factorType.min) {\n    fieldSchema.min = factorType.min;\n  }\n  if (factorType.max) {\n    fieldSchema.max = factorType.max;\n  }\n  const schema = { value: fieldSchema };\n  const val = new SimpleSchema(schema).newContext();\n\n  val.validate({ value });\n\n  if (!val.isValid()) {\n    return val.validationErrors();\n  }\n\n  if (Factors.find({ factorTypeId: factorType._id, value }).count() > 0) {\n    return [{ name: \"value\", type: \"scopedUnique\" }];\n  }\n};\n\nconst valueValidation = function() {\n  if (this.key !== \"value\") {\n    return;\n  }\n  const factorTypeId = this.field(\"factorTypeId\").value;\n  const factorType = FactorTypes.findOne(factorTypeId);\n  const value = this.value;\n  const errors = Factors.valueValidation(factorType, value);\n\n  if (errors) {\n    this.addValidationErrors(errors);\n    return false;\n  }\n};\n\nFactors.schema = new SimpleSchema({\n  name: {\n    type: String,\n    autoValue() {\n      if (!this.isSet && (this.isInsert || Meteor.isClient)) {\n        return String(this.field(\"value\").value).slice(0, 32);\n      }\n    },\n    max: 256,\n    regEx: /^[a-zA-Z0-9_\\.]+$/\n  },\n\n  value: {\n    type: SimpleSchema.oneOf(\n      {\n        type: String\n      },\n      {\n        type: SimpleSchema.Integer\n      },\n      {\n        type: Number\n      },\n      {\n        type: Boolean\n      }\n    )\n  }\n});\n\nFactors.schema.addValidator(valueValidation);\nFactors.schema.extend(ArchivedSchema);\nFactors.schema.extend(BelongsTo(\"FactorTypes\"));\nFactors.schema.extend(TimestampSchema);\nFactors.attachSchema(Factors.schema);\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { Factors } from \"./factors.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\nimport { IdSchema } from \"../default-schemas.js\";\nimport { handleFactorValueErrorMessage } from \"../../lib/utils.js\";\n\nexport const createFactor = new ValidatedMethod({\n  name: \"Factors.methods.create\",\n\n  validate: Factors.schema.omit(\"createdAt\", \"updatedAt\").validator(),\n\n  run(factor) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const factorType = FactorTypes.findOne(factor.factorTypeId);\n    if (!factorType) {\n      throw new Error(\"not found\");\n    }\n\n    const errors = Factors.valueValidation(factorType, factor.value);\n    if (errors) {\n      throw new Error(\n        errors.map(e => handleFactorValueErrorMessage(e)).join(\"\\n\")\n      );\n    }\n\n    Factors.insert(factor, { autoConvert: false });\n  }\n});\n\nexport const updateFactor = new ValidatedMethod({\n  name: \"Factors.methods.update\",\n\n  validate: Factors.schema\n    .pick(\"name\")\n    .extend(IdSchema)\n    .extend(\n      new SimpleSchema({\n        archived: {\n          type: Boolean,\n          optional: true\n        }\n      })\n    )\n    .validator(),\n\n  run({ _id, name, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const factor = Factors.findOne(_id);\n    if (!factor) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n    if (name !== undefined) {\n      $set.name = name;\n    }\n\n    if (archived !== undefined) {\n      if (archived) {\n        if (factor.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n\n      if (!archived) {\n        if (!factor.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Factors.update(_id, modifier);\n  }\n});\n","import { Factors } from \"../factors.js\";\n\nMeteor.publish(\"admin-factors\", function() {\n  if (!this.userId) {\n    return null;\n  }\n\n  return [Factors.find()];\n});\n","// game-lobbies.js\nimport SimpleSchema from \"simpl-schema\";\n\nimport { statusSchema } from \"../batches/status-schema\";\nimport { Batches } from \"../batches/batches\";\nimport { BelongsTo, HasManyByRef, TimestampSchema } from \"../default-schemas\";\nimport { DebugModeSchema, UserDataSchema } from \"../default-schemas.js\";\nimport { Players } from \"../players/players\";\nimport { Treatments } from \"../treatments/treatments\";\n\nexport const GameLobbies = new Mongo.Collection(\"game_lobbies\");\n\nGameLobbies.helpers({\n  players() {\n    return Players.find({ _id: { $in: this.playerIds } }).fetch();\n  },\n  batch() {\n    return Batches.findOne({ _id: this.batchId });\n  },\n  treatment() {\n    return Treatments.findOne({ _id: this.treatmentId });\n  }\n});\n\nGameLobbies.schema = new SimpleSchema({\n  // index allows for an ordering of lobbies so we know which one\n  // to choose from next\n  index: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    label: \"Position\"\n  },\n\n  // availableCount tells us how many slots are available in this lobby\n  // (== treatment.playerCount)\n  availableCount: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    label: \"Available Slots Count\"\n  },\n\n  timeoutStartedAt: {\n    label: \"Time the first player arrived in the lobby\",\n    type: Date,\n    optional: true\n  },\n\n  timedOutAt: {\n    label: \"Time when the lobby timed out and was cancelled\",\n    type: Date,\n    optional: true,\n    index: 1\n  },\n\n  endReason: {\n    label: \"Ended Reason\",\n    type: String,\n    optional: true,\n    regEx: /[a-zA-Z0-9_]+/\n  },\n\n  // Queued players are players that have been associated with the lobby\n  // but are not confirmed for the game yet. playerIds is used for confirmed\n  // players\n  // There might be more queued player than availableCount as we\n  // allow overbooking to make games start faster.\n  queuedPlayerIds: {\n    type: Array,\n    defaultValue: [],\n    label: `Queued Players`,\n    index: true\n  },\n  \"queuedPlayerIds.$\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    label: `Queued Player`\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  GameLobbies.schema.extend(DebugModeSchema);\n}\n\nGameLobbies.schema.extend(UserDataSchema);\nGameLobbies.schema.extend(TimestampSchema);\n// playerIds tells us how many players are ready to start (finished intro)\n// Once playerIds.length == availableCount, the game starts. Player that are\n// queued but haven't made it past the intro in time will be led to the outro\n// directly.\nGameLobbies.schema.extend(HasManyByRef(\"Players\"));\nGameLobbies.schema.extend(BelongsTo(\"Games\", false));\nGameLobbies.schema.extend(BelongsTo(\"Treatments\"));\nGameLobbies.schema.extend(BelongsTo(\"Batches\"));\nGameLobbies.schema.extend(BelongsTo(\"LobbyConfigs\"));\n// We are denormalizing the parent batch status in order to make clean queries\nGameLobbies.schema.extend(statusSchema);\nGameLobbies.attachSchema(GameLobbies.schema);\n","import { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { Games } from \"../games/games\";\nimport { LobbyConfigs } from \"../lobby-configs/lobby-configs.js\";\nimport { Players } from \"../players/players.js\";\nimport { createGameFromLobby } from \"../games/create\";\n\nimport { checkBatchFull, checkForBatchFinished } from \"../games/hooks.js\";\n\n// Check if batch is full or the game finished if this lobby timed out\nGameLobbies.after.update(function(\n  userId,\n  { batchId },\n  fieldNames,\n  modifier,\n  options\n) {\n  if (!fieldNames.includes(\"timedOutAt\")) {\n    return;\n  }\n\n  checkBatchFull(batchId);\n  checkForBatchFinished(batchId);\n});\n\n// Start the game if lobby full\nGameLobbies.after.update(\n  function(userId, doc, fieldNames, modifier, options) {\n    if (\n      !(\n        fieldNames.includes(\"playerIds\") ||\n        (fieldNames.includes(\"status\") && doc.status == \"running\")\n      )\n    ) {\n      return;\n    }\n\n    const gameLobby = this.transform();\n    const humanPlayers = [];\n\n    if (gameLobby.playerIds && gameLobby.playerIds.length > 0) {\n      const players = Players.find({\n        _id: { $in: gameLobby.playerIds }\n      }).fetch();\n      humanPlayers.push(...players.filter(p => !p.bot));\n    }\n\n    const readyPlayersCount = gameLobby.playerIds.length;\n\n    // If the lobby timeout it hasn't started yet and the lobby isn't full yet\n    // (single player), try to start the timeout timer.\n    if (\n      humanPlayers.length > 0 &&\n      gameLobby.availableCount != 1 &&\n      !gameLobby.timeoutStartedAt\n    ) {\n      const lobbyConfig = LobbyConfigs.findOne(gameLobby.lobbyConfigId);\n      if (lobbyConfig.timeoutType === \"lobby\") {\n        GameLobbies.update(gameLobby._id, {\n          $set: { timeoutStartedAt: new Date() }\n        });\n      }\n    }\n\n    // If the readyPlayersCount went to 0 (disconnections for example), reset the\n    // lobby timeout.\n    if (humanPlayers.length === 0 && gameLobby.timeoutStartedAt) {\n      const lobbyConfig = LobbyConfigs.findOne(gameLobby.lobbyConfigId);\n      if (lobbyConfig.timeoutType === \"lobby\") {\n        GameLobbies.update(gameLobby._id, {\n          $unset: { timeoutStartedAt: \"\" }\n        });\n      }\n    }\n\n    // If there are not enough players ready, wait\n    if (readyPlayersCount < gameLobby.availableCount) {\n      return;\n    }\n\n    // Game already created (?!)\n    if (Games.find({ gameLobbyId: gameLobby._id }).count() > 0) {\n      return;\n    }\n\n    // Create Game\n    createGameFromLobby(gameLobby);\n  },\n  { fetchPrevious: false }\n);\n","import shared from \"../../shared.js\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { GameLobbies } from \"./game-lobbies\";\nimport { Players } from \"../players/players\";\nimport { Batches } from \"../batches/batches.js\";\n\nexport const updateGameLobbyData = new ValidatedMethod({\n  name: \"GameLobbies.methods.updateData\",\n\n  validate: new SimpleSchema({\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ gameLobbyId, key, value, append, noCallback }) {\n    const gameLobby = GameLobbies.findOne(gameLobbyId);\n    if (!gameLobby) {\n      throw new Error(\"game lobbies not found\");\n    }\n    // TODO check can update this record game\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    GameLobbies.update(gameLobbyId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        gameLobbyId,\n        gameLobby,\n        key,\n        value: val,\n        prevValue: gameLobby.data && gameLobby.data[key],\n        append\n      });\n    }\n  }\n});\n\nexport const earlyExitGameLobby = new ValidatedMethod({\n  name: \"GameLobbies.methods.earlyExit\",\n\n  validate: new SimpleSchema({\n    exitReason: {\n      label: \"Reason for Exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    status: {\n      label: \"Status for lobby after exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/,\n      optional: true\n    }\n  }).validator(),\n\n  run({ exitReason, gameLobbyId, status }) {\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const gameLobby = GameLobbies.findOne(gameLobbyId);\n    const exitStatus = status || \"failed\";\n    if (!gameLobby) {\n      throw new Error(\"gameLobby not found\");\n    }\n\n    Players.update(\n      { gameLobbyId },\n      {\n        $set: {\n          exitAt: new Date(),\n          exitStatus: exitStatus,\n          exitReason\n        }\n      }\n    );\n\n    GameLobbies.update(gameLobbyId, {\n      $set: {\n        status: exitStatus,\n        endReason: exitReason\n      }\n    });\n\n    const batch = Batches.findOne(gameLobby.batchId);\n    const availableLobby = GameLobbies.findOne({\n      $and: [\n        {\n          _id: { $in: batch.gameLobbyIds }\n        },\n        { status: { $in: [\"init\", \"running\"] } }\n      ]\n    });\n\n    // End batch if there is no available lobby\n    if (!availableLobby) {\n      Batches.update(\n        { gameLobbyIds: gameLobbyId },\n        { $set: { status: exitStatus, finishedAt: new Date() } }\n      );\n    }\n  }\n});\n","import moment from \"moment\";\n\nimport { GameLobbies } from \"../game-lobbies.js\";\nimport { LobbyConfigs } from \"../../lobby-configs/lobby-configs\";\nimport { Players } from \"../../players/players.js\";\nimport { createGameFromLobby } from \"../../games/create.js\";\nimport Cron from \"../../../startup/server/cron.js\";\n\nconst checkLobbyTimeout = (log, lobby, lobbyConfig) => {\n  // Timeout hasn't started yet\n  if (!lobby.timeoutStartedAt) {\n    return;\n  }\n\n  const now = moment();\n  const startTimeAt = moment(lobby.timeoutStartedAt);\n  const endTimeAt = startTimeAt.add(lobbyConfig.timeoutInSeconds, \"seconds\");\n  const ended = now.isSameOrAfter(endTimeAt);\n\n  if (!ended) {\n    return;\n  }\n\n  switch (lobbyConfig.timeoutStrategy) {\n    case \"fail\":\n      GameLobbies.update(lobby._id, {\n        $set: { timedOutAt: new Date(), status: \"failed\" }\n      });\n      Players.update(\n        { _id: { $in: lobby.queuedPlayerIds } },\n        {\n          $set: {\n            exitStatus: \"gameLobbyTimedOut\",\n            exitAt: new Date()\n          }\n        },\n        { multi: true }\n      );\n      break;\n    case \"ignore\":\n      createGameFromLobby(lobby);\n      break;\n\n    // case \"bots\": {\n\n    //   break;\n    // }\n\n    default:\n      log.error(\n        `unknown LobbyConfig.timeoutStrategy: ${lobbyConfig.timeoutStrategy}`\n      );\n  }\n};\n\nconst checkIndividualTimeout = (log, lobby, lobbyConfig) => {\n  const now = moment();\n  Players.find({ _id: { $in: lobby.playerIds } }).forEach(player => {\n    const startTimeAt = moment(player.timeoutStartedAt);\n    const endTimeAt = startTimeAt.add(lobbyConfig.timeoutInSeconds, \"seconds\");\n    const ended = now.isSameOrAfter(endTimeAt);\n    if (!ended || player.timeoutWaitCount <= lobbyConfig.extendCount) {\n      return;\n    }\n    Players.update(player._id, {\n      $set: {\n        exitStatus: \"playerLobbyTimedOut\",\n        exitAt: new Date()\n      }\n    });\n    GameLobbies.update(lobby._id, {\n      $pull: {\n        playerIds: player._id\n        // We keep the player in queuedPlayerIds so they will still have the\n        // fact they were in a lobby available in the UI, and so we can show\n        // them the exit steps.\n      }\n    });\n  });\n};\n\nCron.add({\n  name: \"Check lobby timeouts\",\n  interval: 1000,\n  task: function(log) {\n    const query = {\n      status: \"running\",\n      gameId: { $exists: false },\n      timedOutAt: { $exists: false }\n    };\n\n    GameLobbies.find(query).forEach(lobby => {\n      const lobbyConfig = LobbyConfigs.findOne(lobby.lobbyConfigId);\n\n      switch (lobbyConfig.timeoutType) {\n        case \"lobby\":\n          checkLobbyTimeout(log, lobby, lobbyConfig);\n          break;\n        case \"individual\":\n          checkIndividualTimeout(log, lobby, lobbyConfig);\n          break;\n        default:\n          log.error(\n            `unknown LobbyConfig.timeoutType: ${lobbyConfig.timeoutType}`\n          );\n      }\n    });\n  }\n});\n","import { publishComposite } from \"meteor/reywood:publish-composite\";\nimport { Factors } from \"../../factors/factors.js\";\nimport { LobbyConfigs } from \"../../lobby-configs/lobby-configs.js\";\nimport { Players } from \"../../players/players\";\nimport { Treatments } from \"../../treatments/treatments\";\nimport { GameLobbies } from \"../game-lobbies\";\n\npublishComposite(\"gameLobby\", function({ playerId }) {\n  return {\n    find() {\n      return Players.find(playerId);\n    },\n\n    children: [\n      {\n        find({ gameLobbyId }) {\n          return GameLobbies.find({\n            _id: gameLobbyId\n          });\n        },\n        children: [\n          {\n            find({ treatmentId }) {\n              return Treatments.find(treatmentId);\n            },\n            children: [\n              {\n                find({ factorIds }) {\n                  return Factors.find({ _id: { $in: factorIds } });\n                }\n              }\n            ]\n          },\n          {\n            find({ lobbyConfigId }) {\n              return LobbyConfigs.find(lobbyConfigId);\n            }\n          }\n        ]\n      }\n    ]\n  };\n});\n","import { Stages } from \"../stages/stages\";\nimport { augmentPlayerStageRound } from \"../player-stages/augment\";\nimport { Rounds } from \"../rounds/rounds\";\nimport { Players } from \"../players/players\";\n\nexport const augmentGameObject = ({\n  game,\n  treatment,\n  round = undefined,\n  stage = undefined,\n  firstRoundId = undefined,\n  currentStageId = undefined\n}) => {\n  let gameTreatment = null,\n    gamePlayers = null,\n    gameRounds = null,\n    gameStages = null;\n\n  Object.defineProperties(game, {\n    treatment: {\n      get() {\n        if (!gameTreatment) {\n          gameTreatment = treatment.factorsObject();\n        }\n\n        return gameTreatment;\n      }\n    },\n    players: {\n      get() {\n        if (!gamePlayers) {\n          gamePlayers = Players.find({ _id: { $in: game.playerIds } }).fetch();\n\n          if (firstRoundId) {\n            round = Rounds.findOne(firstRoundId);\n            stage = round.stages.find(s => s._id === currentStageId);\n          }\n\n          gamePlayers.forEach(player => {\n            player.round = _.extend({}, round);\n            player.stage = _.extend({}, stage);\n            augmentPlayerStageRound(player, player.stage, player.round, game);\n          });\n        }\n\n        return gamePlayers;\n      }\n    },\n    rounds: {\n      get() {\n        if (!gameRounds) {\n          gameRounds = Rounds.find({ gameId: game._id }).fetch();\n          gameRounds.forEach(round => {\n            let stages = null;\n            Object.defineProperty(round, \"stages\", {\n              get() {\n                if (!stages) {\n                  stages = Stages.find({ roundId: round._id }).fetch();\n                }\n\n                return stages;\n              }\n            });\n          });\n        }\n\n        return gameRounds;\n      }\n    },\n    stages: {\n      get() {\n        if (!gameStages) {\n          gameStages = Stages.find({ gameId: game._id }).fetch();\n        }\n\n        return gameStages;\n      }\n    }\n  });\n};\n","// create.js\n\nimport moment from \"moment\";\n\nimport { Batches } from \"../batches/batches.js\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies.js\";\nimport { Games } from \"./games\";\nimport { PlayerRounds } from \"../player-rounds/player-rounds\";\nimport { PlayerStages } from \"../player-stages/player-stages\";\nimport { Players } from \"../players/players\";\nimport { Rounds } from \"../rounds/rounds\";\nimport { Stages } from \"../stages/stages\";\nimport { earlyExitGameLobby } from \"../game-lobbies/methods\";\nimport {\n  augmentPlayerStageRound,\n  augmentGameStageRound\n} from \"../player-stages/augment.js\";\nimport { augmentGameObject } from \"../games/augment.js\";\nimport { config } from \"../../server\";\nimport { weightedRandom } from \"../../lib/utils.js\";\nimport log from \"../../lib/log.js\";\nimport gameLobbyLock from \"../../gameLobby-lock.js\";\n\nconst addStageErrMsg = `\"round.addStage()\" requires an argument object with 3 properties:\n- name: internal name you'll use to write conditional logic in your experiment.\n- displayName: the name of the Stage the player will see in the UI.\n- durationInSeconds: the duration in seconds of the stage\n\ne.g.: round.addStage({\n  name: \"response\",\n  displayName: \"Response\",\n  durationInSeconds: 120\n});\n\n`;\n\nexport const createGameFromLobby = gameLobby => {\n  if (Games.find({ gameLobbyId: gameLobby._id }).count() > 0) {\n    return;\n  }\n\n  const players = gameLobby.players();\n\n  const batch = gameLobby.batch();\n  const treatment = gameLobby.treatment();\n  const factors = treatment.factorsObject();\n  const { batchId, treatmentId, status, debugMode } = gameLobby;\n\n  players.forEach(player => {\n    player.data = player.data || {};\n    player.set = (key, value) => {\n      player.data[key] = value;\n    };\n    player.get = key => {\n      return player.data[key];\n    };\n  });\n\n  // Ask (experimenter designer) init function to configure this game\n  // given the factors and players given.\n  const params = { data: { ...gameLobby.data }, rounds: [], players };\n  var gameCollector = {\n    players,\n    treatment: factors,\n\n    get(k) {\n      return params.data[k];\n    },\n\n    set(k, v) {\n      params.data[k] = v;\n    },\n\n    addRound(props) {\n      const data = props ? props.data : {} || {};\n      const round = { data, stages: [] };\n      params.rounds.push(round);\n      return {\n        get(k) {\n          return round.data[k];\n        },\n\n        set(k, v) {\n          round.data[k] = v;\n        },\n\n        addStage({ name, displayName, durationInSeconds, data = {} }) {\n          try {\n            if (!name || !displayName || !durationInSeconds) {\n              log.error(addStageErrMsg);\n              log.error(\n                `Got: ${JSON.stringify(\n                  { name, displayName, durationInSeconds },\n                  null,\n                  \"  \"\n                )}`\n              );\n              throw \"gameInit error\";\n            }\n\n            const durationInSecondsAsInt = parseInt(durationInSeconds);\n            if (\n              Number.isNaN(durationInSecondsAsInt) ||\n              durationInSecondsAsInt < 1\n            ) {\n              console.error(\n                `Error in addStage call: durationInSeconds must be an number > 0 (name: ${name})`\n              );\n            }\n\n            const stage = {\n              name,\n              displayName,\n              durationInSeconds: durationInSecondsAsInt\n            };\n            round.stages.push({ ...stage, data });\n            return {\n              ...stage,\n              get(k) {\n                return data[k];\n              },\n              set(k, v) {\n                data[k] = v;\n              }\n            };\n          } catch (error) {\n            earlyExitGameLobby.call({\n              exitReason: \"initError\",\n              gameLobbyId: gameLobby._id\n            });\n          }\n        }\n      };\n    }\n  };\n\n  try {\n    gameLobbyLock[gameLobby._id] = true;\n    config.gameInit(gameCollector, factors);\n  } catch (err) {\n    console.error(`fatal error encounter calling Empirica.gameInit:`);\n    console.error(err);\n    earlyExitGameLobby.call({\n      exitReason: \"gameError\",\n      gameLobbyId: gameLobby._id\n    });\n    return;\n  }\n\n  if (!params.rounds || params.rounds.length === 0) {\n    throw \"at least one round must be added per game\";\n  }\n\n  params.rounds.forEach(round => {\n    if (!round.stages || round.stages.length === 0) {\n      throw \"at least one stage must be added per round\";\n    }\n\n    round.stages.forEach(({ name, displayName, durationInSeconds }) => {\n      // This should never happen as we already verified it above.\n      if (!name || !displayName || !durationInSeconds) {\n        log.error(addStageErrMsg);\n        throw \"invalid stage\";\n      }\n    });\n  });\n\n  // Keep debug mode from lobby\n  params.debugMode = debugMode;\n\n  // We need to create/configure stuff associated with the game before we\n  // create it so we generate the id early\n  const gameId = gameLobby._id;\n  params._id = gameId;\n  params.gameLobbyId = gameLobby._id;\n  // We also add a few related objects\n  params.treatmentId = treatmentId;\n  params.batchId = batchId;\n  params.status = status;\n\n  // playerIds is the reference to players stored in the game object\n  params.playerIds = _.pluck(params.players, \"_id\");\n  // We then need to verify all these ids exist and are unique, the\n  // init function might not have returned them correctly\n  const len = _.uniq(_.compact(params.playerIds)).length;\n  if (len !== params.players.length || len !== players.length) {\n    throw new Error(\"invalid player count\");\n  }\n\n  // We want to copy over the changes made by the init function and save the\n  // gameId in the player objects already in the DB\n  params.players.forEach(({ _id, data }) => {\n    Players.update(\n      _id,\n      { $set: { gameId, data } },\n      {\n        autoConvert: false,\n        filter: false,\n        validate: false,\n        trimStrings: false,\n        removeEmptyStrings: false\n      }\n    );\n  });\n\n  // Create the round objects\n  let stageIndex = 0;\n  let totalDuration = 0;\n  let firstRoundId;\n\n  const insertOption = {\n    autoConvert: false,\n    filter: false,\n    validate: false,\n    trimStrings: false,\n    removeEmptyStrings: false\n  };\n\n  let StagesUpdateOp = Stages.rawCollection().initializeUnorderedBulkOp();\n  let RoundsOp = Rounds.rawCollection().initializeUnorderedBulkOp();\n  let StagesOp = Stages.rawCollection().initializeUnorderedBulkOp();\n  let roundsOpResult;\n  let stagesOpResult;\n\n  params.rounds.forEach((round, index) =>\n    RoundsOp.insert(\n      _.extend(\n        {\n          gameId,\n          index,\n          _id: Random.id(),\n          createdAt: new Date(),\n          data: {}\n        },\n        round\n      ),\n      insertOption\n    )\n  );\n\n  roundsOpResult = Meteor.wrapAsync(RoundsOp.execute, RoundsOp)();\n\n  const roundIds = roundsOpResult.getInsertedIds().map(ids => ids._id);\n  params.roundIds = roundIds;\n  RoundsOp = Rounds.rawCollection().initializeUnorderedBulkOp();\n\n  params.rounds.forEach((round, index) => {\n    const roundId = roundIds[index];\n    const { players } = params;\n\n    StagesOp = Stages.rawCollection().initializeUnorderedBulkOp();\n    let PlayerStagesOp = PlayerStages.rawCollection().initializeUnorderedBulkOp();\n    let PlayerRoundsOp = PlayerRounds.rawCollection().initializeUnorderedBulkOp();\n\n    round.stages.forEach(stage => {\n      if (batch.debugMode) {\n        stage.durationInSeconds = 60 * 60; // Stage time in debugMode is 1h\n      }\n\n      totalDuration += stage.durationInSeconds;\n\n      const sParams = _.extend(\n        {\n          gameId,\n          roundId,\n          index: stageIndex,\n          _id: Random.id(),\n          createdAt: new Date(),\n          data: {}\n        },\n        stage\n      );\n\n      StagesOp.insert(sParams, insertOption);\n\n      stageIndex++;\n    });\n\n    stagesOpResult = Meteor.wrapAsync(StagesOp.execute, StagesOp)();\n    const stageIds = stagesOpResult.getInsertedIds().map(ids => ids._id);\n\n    stageIds.forEach(stageId => {\n      if (!params.currentStageId) {\n        firstRoundId = roundId;\n        params.currentStageId = stageId;\n      }\n\n      players.forEach(({ _id: playerId }) =>\n        PlayerStagesOp.insert({\n          playerId,\n          stageId,\n          roundId,\n          gameId,\n          batchId,\n          _id: Random.id(),\n          createdAt: new Date(),\n          data: {}\n        })\n      );\n    });\n\n    const playerStagesResult = Meteor.wrapAsync(\n      PlayerStagesOp.execute,\n      PlayerStagesOp\n    )();\n    const playerStageIds = playerStagesResult\n      .getInsertedIds()\n      .map(ids => ids._id);\n\n    stageIds.forEach(stageId =>\n      StagesUpdateOp.find({ _id: stageId })\n        .upsert()\n        .updateOne({ $set: { playerStageIds, updatedAt: new Date() } })\n    );\n\n    players.forEach(({ _id: playerId }) =>\n      PlayerRoundsOp.insert({\n        playerId,\n        roundId,\n        gameId,\n        batchId,\n        _id: Random.id(),\n        data: {},\n        createdAt: new Date()\n      })\n    );\n\n    const playerRoundIdsResult = Meteor.wrapAsync(\n      PlayerRoundsOp.execute,\n      PlayerRoundsOp\n    )();\n    const playerRoundIds = playerRoundIdsResult\n      .getInsertedIds()\n      .map(ids => ids._id);\n\n    RoundsOp.find({ _id: roundId })\n      .upsert()\n      .updateOne({ $set: { stageIds, playerRoundIds, updatedAt: new Date() } });\n  });\n\n  Meteor.wrapAsync(StagesUpdateOp.execute, StagesUpdateOp)();\n  Meteor.wrapAsync(RoundsOp.execute, RoundsOp)();\n\n  // An estimation of the finish time to help querying.\n  // At the moment, this will 100% break with pausing the game/batch.\n  params.estFinishedTime = moment()\n    // Give it an extra 24h (86400s) window for the inter-stage sync buffer.\n    // It was 5 min and that failed on an experiment with many rounds.\n    // This value is not extremely useful, it's main purpose is currently\n    // to stop querying games indefinitely in the update game background job.\n    // It was also meant to be an approximate estimate for when the game could\n    // end at the maximum, that we could show in the admin, but it can no longer\n    // work, and it is questionable if the \"stop querying\" \"feature\" is still\n    // adequate.\n    .add(totalDuration + 86400, \"seconds\")\n    .toDate();\n\n  // We're no longer filtering out unspecified fields on insert because of a\n  // simpleschema bug, so we need to remove invalid params now.\n  delete params.players;\n  delete params.rounds;\n\n  // Insert game. As soon as it comes online, the game will start for the\n  // players so all related object (rounds, stages, players) must be created\n  // and ready\n  Games.insert(params, {\n    autoConvert: false,\n    filter: false,\n    validate: false,\n    trimStrings: false,\n    removeEmptyStrings: false\n  });\n\n  // Let Game Lobby know Game ID\n  GameLobbies.update(gameLobby._id, { $set: { gameId } });\n\n  //\n  // Overbooking\n  //\n\n  // Overbooked players that did not finish the intro and won't be in this game\n  const failedPlayerIds = _.difference(\n    gameLobby.queuedPlayerIds,\n    gameLobby.playerIds\n  );\n\n  sendPlayersToNextBatches(failedPlayerIds, batchId, gameLobby);\n\n  //\n  // Call the callbacks\n  //\n\n  const { onRoundStart, onGameStart, onStageStart } = config;\n  if ((onGameStart || onRoundStart || onStageStart) && firstRoundId) {\n    const game = Games.findOne(gameId);\n\n    augmentGameObject({\n      game,\n      treatment,\n      firstRoundId,\n      currentStageId: params.currentStageId\n    });\n\n    const nextRound = game.rounds.find(r => r._id === firstRoundId);\n    const nextStage = nextRound.stages.find(\n      s => s._id === params.currentStageId\n    );\n\n    augmentGameStageRound(game, nextStage, nextRound);\n\n    if (onGameStart) {\n      onGameStart(game);\n    }\n    if (onRoundStart) {\n      onRoundStart(game, nextRound);\n    }\n    if (onStageStart) {\n      onStageStart(game, nextRound, nextStage);\n    }\n  }\n\n  //\n  // Start the game\n  //\n\n  const startTimeAt = moment()\n    .add(Stages.stagePaddingDuration)\n    .toDate();\n\n  Stages.update(params.currentStageId, {\n    $set: {\n      startTimeAt\n    }\n  });\n\n  delete gameLobbyLock[gameLobby._id];\n};\n\nexport function sendPlayersToNextBatches(playerIds, batchId, gameLobby) {\n  // Find other lobbies that are not full yet with the same treatment\n  const runningBatches = Batches.find(\n    { _id: { $ne: batchId }, status: \"running\" },\n    { sort: { runningAt: 1 } }\n  );\n  const { treatmentId } = gameLobby;\n  const lobbiesGroups = runningBatches.map(() => []);\n  const runningBatcheIds = runningBatches.map(b => b._id);\n  lobbiesGroups.push([]);\n  const possibleLobbies = GameLobbies.find({\n    _id: { $ne: gameLobby._id },\n    status: \"running\",\n    timedOutAt: {\n      $exists: false\n    },\n    gameId: { $exists: false },\n    treatmentId\n  }).fetch();\n  possibleLobbies.forEach(lobby => {\n    if (lobby.batchId === batchId) {\n      lobbiesGroups[0].push(lobby);\n    } else {\n      lobbiesGroups[runningBatcheIds.indexOf(lobby.batchId) + 1].push(lobby);\n    }\n  });\n\n  // If no lobbies left, lead players to exit\n  if (possibleLobbies.length === 0) {\n    if (playerIds.length > 0) {\n      Players.update(\n        { _id: { $in: playerIds } },\n        { $set: { exitAt: new Date(), exitStatus: \"gameFull\" } },\n        { multi: true }\n      );\n    }\n\n    return;\n  }\n\n  for (let i = 0; i < lobbiesGroups.length; i++) {\n    const lobbies = lobbiesGroups[i];\n\n    if (lobbies.length === 0) {\n      continue;\n    }\n\n    // If there are lobbies remaining, distribute them across the lobbies\n    // proportinally to the initial playerCount\n    const weigthedLobbyPool = weightedRandom(\n      lobbies.map(lobby => {\n        return {\n          value: lobby,\n          weight: lobby.availableCount\n        };\n      })\n    );\n\n    for (let i = 0; i < playerIds.length; i++) {\n      const playerId = playerIds[i];\n      const lobby = weigthedLobbyPool();\n\n      // Adding the player to specified lobby queue\n      const $addToSet = { queuedPlayerIds: playerId };\n      if (gameLobby.playerIds.includes(playerId)) {\n        $addToSet.playerIds = playerId;\n      }\n      GameLobbies.update(lobby._id, { $addToSet });\n\n      Players.update(playerId, {\n        $set: {\n          gameLobbyId: lobby._id\n        }\n      });\n    }\n\n    break;\n  }\n}\n","import SimpleSchema from \"simpl-schema\";\nimport { Counter } from \"../../lib/counters\";\nimport { statusSchema } from \"../batches/status-schema\";\nimport { BelongsTo, HasManyByRef, TimestampSchema } from \"../default-schemas\";\nimport { DebugModeSchema, UserDataSchema } from \"../default-schemas.js\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { Treatments } from \"../treatments/treatments\";\nimport { Batches } from \"../batches/batches\";\nimport { Players } from \"../players/players\";\nimport { Stages } from \"../stages/stages\";\nimport { Rounds } from \"../rounds/rounds\";\n\nclass GamesCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"games\");\n    return super.insert(doc, callback);\n  }\n}\n\nexport const Games = new GamesCollection(\"games\");\n\nGames.schema = new SimpleSchema({\n  // Auto-incremented number assigned to games as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n\n  // estFinishedTime is adding up all stages timings when the game is\n  // created/started to estimate when the game should be done at the latests.\n  estFinishedTime: {\n    type: Date,\n    index: 1\n  },\n\n  // Time the game actually finished\n  finishedAt: {\n    type: Date,\n    optional: true,\n    index: 1\n  },\n\n  // Indicates which stage is ongoing\n  currentStageId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    index: 1\n  },\n\n  endReason: {\n    label: \"Ended Reason\",\n    type: String,\n    optional: true,\n    regEx: /[a-zA-Z0-9_]+/\n  }\n});\n\nif (Meteor.isDevelopment || Meteor.settings.public.debug_gameDebugMode) {\n  Games.schema.extend(DebugModeSchema);\n}\n\nGames.schema.extend(TimestampSchema);\nGames.schema.extend(UserDataSchema);\nGames.schema.extend(BelongsTo(\"GameLobbies\", false));\nGames.schema.extend(BelongsTo(\"Treatments\"));\nGames.schema.extend(HasManyByRef(\"Rounds\"));\nGames.schema.extend(HasManyByRef(\"Players\"));\nGames.schema.extend(BelongsTo(\"Batches\"));\n// We are denormalizing the parent batch status in order to make clean queries\nGames.schema.extend(statusSchema);\nGames.attachSchema(Games.schema);\n","// See if everyone is done with this stage\nimport { Batches } from \"../batches/batches\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { Games } from \"../games/games\";\n\nexport const checkBatchFull = batchId => {\n  const batch = Batches.findOne(batchId);\n  if (!batch) {\n    throw `batch for game missing. batchId: ${batchId}`;\n  }\n\n  const expectedGamesCount = batch.gameCount();\n  const gamesCount = Games.find({ batchId }).count();\n  const timeOutGameLobbiesCount = GameLobbies.find({\n    batchId,\n    timedOutAt: { $exists: true }\n  }).count();\n\n  if (expectedGamesCount === gamesCount + timeOutGameLobbiesCount) {\n    Batches.update(batchId, { $set: { full: true } });\n  }\n};\n\n// If all games for batch are filled, change batch status\nGames.after.insert(function(userId, { batchId }) {\n  checkBatchFull(batchId);\n});\n\nexport const checkForBatchFinished = batchId => {\n  // Find games that are not finished\n  const gameQuery = { batchId, finishedAt: { $exists: false } };\n  const gamesCount = Games.find(gameQuery).count();\n  const noGamesLeft = gamesCount === 0;\n\n  // Find game lobbies that haven't been transformed into games and that haven't timedout\n  const gameLobbiesQuery = {\n    batchId,\n    gameId: { $exists: false },\n    timedOutAt: { $exists: false }\n  };\n  const lobbiesCount = GameLobbies.find(gameLobbiesQuery).count();\n  const noGameLobbiesLeft = lobbiesCount === 0;\n\n  if (noGamesLeft && noGameLobbiesLeft) {\n    Batches.update(batchId, {\n      $set: { status: \"finished\", finishedAt: new Date() }\n    });\n  }\n};\n\n// Check if all games finished, mark batch as finished\nGames.after.update(\n  function(userId, { batchId }, fieldNames, modifier, options) {\n    if (!fieldNames.includes(\"finishedAt\")) {\n      return;\n    }\n\n    checkForBatchFinished(batchId);\n  },\n  { fetchPrevious: false }\n);\n","import shared from \"../../shared.js\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { Games } from \"./games.js\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies.js\";\nimport { Players } from \"../players/players.js\";\nimport { Stages } from \"../stages/stages.js\";\nimport { Batches } from \"../batches/batches.js\";\n\nexport const updateGameData = new ValidatedMethod({\n  name: \"Games.methods.updateData\",\n\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ gameId, key, value, append, noCallback }) {\n    const game = Games.findOne(gameId);\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n    // TODO check can update this record game\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    Games.update(gameId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        gameId,\n        game,\n        key,\n        value: val,\n        prevValue: game.data && game.data[key],\n        append\n      });\n    }\n  }\n});\n\nexport const earlyExitGame = new ValidatedMethod({\n  name: \"Games.methods.earlyExitGame\",\n\n  validate: new SimpleSchema({\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    endReason: {\n      label: \"Reason for End\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    status: {\n      label: \"status for games and players after exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    }\n  }).validator(),\n\n  run({ gameId, endReason, status }) {\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n\n    if (game && game.finishedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\n\\ngame already ended!\");\n      }\n\n      return;\n    }\n\n    Games.update(gameId, {\n      $set: {\n        finishedAt: new Date(),\n        status,\n        endReason\n      }\n    });\n\n    GameLobbies.update(\n      { gameId },\n      {\n        $set: {\n          status,\n          endReason\n        }\n      }\n    );\n\n    game.playerIds.forEach(playerId =>\n      Players.update(playerId, {\n        $set: {\n          exitAt: new Date(),\n          exitStatus: status,\n          exitReason: endReason\n        }\n      })\n    );\n\n    const batch = Batches.findOne(game.batchId);\n    const availableLobby = GameLobbies.findOne({\n      $and: [\n        {\n          _id: { $in: batch.gameLobbyIds }\n        },\n        { status: { $in: [\"init\", \"running\"] } }\n      ]\n    });\n\n    // End batch if there is no available game\n    if (!availableLobby) {\n      Batches.update(\n        { gameLobbyIds: gameId },\n        { $set: { status: status, finishedAt: new Date() } }\n      );\n    }\n  }\n});\n","import moment from \"moment\";\n\nimport { Games } from \"../games.js\";\nimport { Players } from \"../../players/players.js\";\nimport { Rounds } from \"../../rounds/rounds.js\";\nimport { Stages } from \"../../stages/stages.js\";\nimport { Treatments } from \"../../treatments/treatments.js\";\nimport {\n  augmentPlayerStageRound,\n  augmentGameStageRound\n} from \"../../player-stages/augment.js\";\nimport { augmentGameObject } from \"../../games/augment.js\";\nimport { config } from \"../../../server\";\nimport { endOfStage } from \"../../stages/finish.js\";\nimport Cron from \"../../../startup/server/cron.js\";\n\nCron.add({\n  name: \"Trigger stage timeout or Run bots\",\n  interval: 1000,\n  task: function(log) {\n    const query = {\n      status: \"running\",\n      estFinishedTime: { $gte: new Date() },\n      finishedAt: { $exists: false }\n    };\n    Games.find(query).forEach(game => {\n      const stage = Stages.findOne(game.currentStageId);\n\n      const now = moment();\n      const startTimeAt = moment(stage.startTimeAt);\n      const endTimeAt = startTimeAt.add(stage.durationInSeconds, \"seconds\");\n      const ended = now.isSameOrAfter(endTimeAt);\n      if (ended) {\n        endOfStage(stage._id);\n      } else {\n        const { gameId } = stage;\n        // make bots play\n        const query = { gameId, bot: { $exists: true } };\n        if (Players.find(query).count() === 0) {\n          return;\n        }\n        const botPlayers = Players.find(query);\n        const treatment = Treatments.findOne(game.treatmentId);\n        const round = Rounds.findOne(stage.roundId);\n\n        augmentGameObject({ game, treatment, round, stage });\n\n        botPlayers.forEach(botPlayer => {\n          const bot = config.bots[botPlayer.bot];\n          if (!bot) {\n            log.error(\n              `Definition for bot \"${\n                botPlayer.bot\n              }\" was not found in the server config!`\n            );\n            return;\n          }\n\n          if (!bot.onStageTick) {\n            return;\n          }\n\n          augmentGameStageRound(game, stage, round);\n\n          botPlayer.stage = _.extend({}, stage);\n          botPlayer.round = _.extend({}, round);\n          augmentPlayerStageRound(\n            botPlayer,\n            botPlayer.stage,\n            botPlayer.round,\n            game\n          );\n\n          const tick = endTimeAt.diff(now, \"seconds\");\n\n          game.rounds.forEach(round => {\n            round.stages = game.stages.filter(s => s.roundId === round._id);\n          });\n\n          bot.onStageTick(botPlayer, game, round, stage, tick);\n        });\n      }\n    });\n  }\n});\n","import { PlayerRounds } from \"../../player-rounds/player-rounds\";\nimport { PlayerStages } from \"../../player-stages/player-stages\";\nimport { Players } from \"../../players/players\";\nimport { Rounds } from \"../../rounds/rounds\";\nimport { Stages } from \"../../stages/stages\";\nimport { Games } from \"../games\";\n\nMeteor.publish(\"game\", function({ playerId }) {\n  return Games.find({ playerIds: playerId });\n});\n\nMeteor.publish(\"gameDependencies\", function({ gameId }) {\n  if (!gameId) {\n    return [];\n  }\n\n  return [Players.find({ gameId })];\n});\n\nMeteor.publish(\"gameLobbyDependencies\", function({ gameLobbyId }) {\n  if (!gameLobbyId) {\n    return [];\n  }\n\n  return [Players.find({ gameLobbyId })];\n});\n\nMeteor.publish(\"gameCurrentRoundStage\", function({ gameId, stageId }) {\n  if (!gameId || !stageId) {\n    return [];\n  }\n\n  const stage = Stages.findOne(stageId);\n  const roundId = stage.roundId;\n\n  return [\n    Stages.find({ gameId, roundId }),\n    Rounds.find({ gameId, _id: roundId }),\n    PlayerRounds.find({ gameId, roundId }),\n    PlayerStages.find({ gameId, stageId })\n  ];\n});\n","import SimpleSchema from \"simpl-schema\";\nimport inflection from \"inflection\";\n\nimport {\n  HasManyByRef,\n  TimestampSchema,\n  ArchivedSchema\n} from \"../default-schemas\";\n\nexport const LobbyConfigs = new Mongo.Collection(\"lobby_configs\");\n\nLobbyConfigs.helpers({\n  displayName() {\n    if (this.name) {\n      return this.name;\n    }\n\n    const type = inflection.titleize(this.timeoutType);\n    const base = `${type}: ${this.timeoutInSeconds}s`;\n    let details;\n    switch (this.timeoutType) {\n      case \"lobby\":\n        details = `→ ${inflection.titleize(this.timeoutStrategy)}`;\n        if (this.timeoutStrategy === \"bots\") {\n          details += `(${this.timeoutBots.join(\",\")})`;\n        }\n        break;\n      case \"individual\":\n        details = `⨉ ${this.extendCount + 1}`;\n        break;\n      default:\n        console.error(`unknown timeoutType: ${this.timeoutType}`);\n        return base;\n    }\n\n    return `${base} ${details}`;\n  }\n});\n\n// There are 2 exclusive timeout types:\n// - lobby: the timeout start when the first player reaches the lobby and runs\n//   out for all the players whether they have even reached the lobby or not.\n// - individual: the timeout is started for each player as they reach the room.\n//   Some players might time out before all players are in the lobby, they might\n//   continue waiting for another timeout period. They might also leave the game\n//   and a new player can replace them. The lobby itself never times out.\nLobbyConfigs.timeoutTypes = [\"lobby\", \"individual\"];\n\n// The timeoutStrategy determines what to do in case people are waiting\n// in the lobby for longer than the timeoutInSeconds duration.\n// Only for \"lobby\" timeoutType.\n// Available strategies:\n// - ignore: start the game anyway\n// - fail: take the player to the exit survey\n// - bots: fill the missing players slots with bots from timeoutBots\nLobbyConfigs.timeoutStrategies = [\"fail\", \"ignore\"];\n// DEACTIVATING bots until bots implemented.\n// LobbyConfigs.timeoutStrategies = [\"fail\", \"ignore\", \"bots\"];\n\n// One year, that's a lot, just need to block from something too wild like 10M\n// years. We don't actually care, Inf would be fine...\nLobbyConfigs.maxTimeoutInSeconds = 365 * 24 * 60 * 60;\n\n// defaultTimeoutInSeconds is simply used as the default value in the Lobby\n// Configuration creation form.\nLobbyConfigs.defaultTimeoutInSeconds = 5 * 60;\n\nLobbyConfigs.schema = new SimpleSchema({\n  // Optional experimenter given name for the treatment\n  name: {\n    type: String,\n    max: 256,\n    optional: true,\n    custom() {\n      if (this.isSet && LobbyConfigs.find({ name: this.value }).count() > 0) {\n        return \"notUnique\";\n      }\n    }\n    // regEx: /^[a-zA-Z0-9_]+$/\n  },\n\n  // The timeoutType fundamentally changes the behavior of the lobby. See\n  // LobbyConfigs.timeoutTypes above for details.\n  timeoutType: {\n    type: String,\n    allowedValues: LobbyConfigs.timeoutTypes\n  },\n\n  // Number of seconds for one player to wait in lobby before timeoutStrategy\n  // is applied. This timeout applies only to the waiting for the game to start.\n  // It is either a \"Lobby Timeout\", or an \"Individual Timeout\", depending on\n  // the timeoutType value.\n  timeoutInSeconds: {\n    type: SimpleSchema.Integer,\n    max: LobbyConfigs.maxTimeoutInSeconds,\n    // It would be difficult to manage a timer that is less than 5s, and it\n    // would be  weird. 5s is already weird...\n    min: 5\n  },\n\n  // The timeoutStrategy determines what to do in case people are waiting\n  // in the lobby for longer than the timeoutInSeconds duration.\n  // Only for \"lobby\" timeoutType.\n  // See LobbyConfigs.timeoutStrategies for details.\n  timeoutStrategy: {\n    type: String,\n    allowedValues: LobbyConfigs.timeoutStrategies,\n    defaultValue: \"fail\",\n    optional: true\n  },\n\n  // Names of bot to use if timed out and still not enough player.\n  // Only for \"lobby\" timeoutType and timeoutStrategy is \"bots\".\n  timeoutBots: {\n    type: Array,\n    // Should add custom validation to verify the timeoutStrategy and make\n    // required if \"bots\" and should verify bot with name exists.\n    optional: true\n  },\n  \"timeoutBots.$\": {\n    type: String\n  },\n\n  // Number of times to allow the user to extend their wait time by\n  // timeoutInSeconds.\n  // If set to 0, they are never asked to retry.\n  // Only for \"individual\" timeoutType.\n  extendCount: {\n    type: SimpleSchema.Integer,\n    // 1 millard times, that should be a sufficient upper bound\n    max: 1000000000,\n    min: 0,\n    optional: true\n  }\n});\n\nLobbyConfigs.schema.extend(TimestampSchema);\nLobbyConfigs.schema.extend(ArchivedSchema);\nLobbyConfigs.schema.extend(HasManyByRef(\"Batches\"));\nLobbyConfigs.schema.extend(HasManyByRef(\"GameLobbies\"));\nLobbyConfigs.attachSchema(LobbyConfigs.schema);\n","import SimpleSchema from \"simpl-schema\";\nimport { ValidatedMethod } from \"meteor/mdg:validated-method\";\n\nimport { LobbyConfigs } from \"./lobby-configs.js\";\nimport { IdSchema } from \"../default-schemas.js\";\n\nexport const createLobbyConfig = new ValidatedMethod({\n  name: \"LobbyConfigs.methods.create\",\n\n  validate: LobbyConfigs.schema\n    .pick(\n      \"name\",\n      \"timeoutType\",\n      \"timeoutInSeconds\",\n      \"timeoutStrategy\",\n      \"timeoutBots\",\n      \"timeoutBots.$\",\n      \"extendCount\"\n    )\n    .validator(),\n\n  run(lobbyConfig) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    LobbyConfigs.insert(lobbyConfig);\n  }\n});\n\nexport const updateLobbyConfig = new ValidatedMethod({\n  name: \"LobbyConfigs.methods.update\",\n\n  validate: LobbyConfigs.schema\n    .pick(\"name\")\n    .extend(\n      new SimpleSchema({\n        archived: {\n          type: Boolean,\n          optional: true\n        }\n      })\n    )\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, name, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n    const lobbyConfig = LobbyConfigs.findOne(_id);\n    if (!lobbyConfig) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n    if (name !== undefined) {\n      $set.name = name;\n    }\n    if (archived !== undefined) {\n      if (archived) {\n        if (lobbyConfig.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!lobbyConfig.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    LobbyConfigs.update(_id, modifier);\n  }\n});\n","import { LobbyConfigs } from \"../lobby-configs.js\";\n\nMeteor.publish(\"admin-lobby-configs\", function({ archived }) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (archived === undefined) {\n    return LobbyConfigs.find();\n  }\n\n  return LobbyConfigs.find({ archivedAt: { $exists: Boolean(archived) } });\n});\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\nimport { Players } from \"../players/players.js\";\nimport { PlayerInputs } from \"./player-inputs.js\";\n\n// addPlayerInput is non-destructive, it just keeps adding onto a player's\n// input data.\nexport const addPlayerInput = new ValidatedMethod({\n  name: \"PlayerInputs.methods.add\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    data: {\n      type: String\n    }\n  }).validator(),\n\n  run({ playerId, gameId, gameLobbyId, data: rawData }) {\n    const player = Players.findOne(playerId);\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n    if (!gameId && !gameLobbyId) {\n      throw new Error(\"gameId or gameLobbyId required\");\n    }\n\n    const data = JSON.parse(rawData);\n    PlayerInputs.insert(\n      { playerId, gameId, gameLobbyId, data },\n      {\n        autoConvert: false,\n        filter: false,\n        validate: false,\n        trimStrings: false,\n        removeEmptyStrings: false\n      }\n    );\n  }\n});\n","// PlayerInputs contains small pieces of information associated with a player\n// This can be input forms from intro/outro or intermediate input values while\n// playing the game (e.g. all values while moving a range input, mouse,\n// movements...)\n\nimport SimpleSchema from \"simpl-schema\";\nimport { BelongsTo, TimestampSchema, UserDataSchema } from \"../default-schemas\";\n\nexport const PlayerInputs = new Mongo.Collection(\"player_inputs\");\n\nPlayerInputs.schema = new SimpleSchema({});\n\nPlayerInputs.schema.extend(TimestampSchema);\nPlayerInputs.schema.extend(UserDataSchema);\nPlayerInputs.schema.extend(BelongsTo(\"Games\", false));\nPlayerInputs.schema.extend(BelongsTo(\"GameLobbies\", false));\nPlayerInputs.schema.extend(BelongsTo(\"Players\"));\nPlayerInputs.attachSchema(PlayerInputs.schema);\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { PlayerLogs } from \"./player-logs.js\";\nimport { Players } from \"../players/players.js\";\n\n// playerLog is non-destructive, it just keeps adding onto a player's logs.\nexport const playerLog = new ValidatedMethod({\n  name: \"PlayerLogs.methods.add\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    stageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    roundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id,\n      optional: true\n    },\n    name: {\n      type: String,\n      max: 255\n    },\n    jsonData: {\n      type: String\n    }\n  }).validator(),\n\n  run({ playerId, gameId, roundId, stageId, name, jsonData }) {\n    const player = Players.findOne(playerId);\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    PlayerLogs.insert(\n      { playerId, gameId, roundId, stageId, name, jsonData },\n      {\n        autoConvert: false,\n        filter: false,\n        validate: false,\n        trimStrings: false,\n        removeEmptyStrings: false\n      }\n    );\n  }\n});\n","// PlayerInputs contains small pieces of information associated with a player\n// This can be input forms from intro/outro or intermediate input values while\n// playing the game (e.g. all values while moving a range input, mouse,\n// movements...)\n\nimport SimpleSchema from \"simpl-schema\";\n\nimport { TimestampSchema, BelongsTo } from \"../default-schemas\";\n\nexport const PlayerLogs = new Mongo.Collection(\"player_logs\");\n\nPlayerLogs.schema = new SimpleSchema({\n  stageId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  roundId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  gameId: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    optional: true\n  },\n  name: {\n    type: String,\n    max: 255\n  },\n  jsonData: {\n    type: String\n  }\n});\n\nPlayerLogs.schema.extend(TimestampSchema);\nPlayerLogs.schema.extend(BelongsTo(\"Players\"));\nPlayerLogs.attachSchema(PlayerLogs.schema);\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\nimport { PlayerRounds } from \"./player-rounds\";\nimport shared from \"../../shared.js\";\n\nexport const updatePlayerRoundData = new ValidatedMethod({\n  name: \"PlayerRounds.methods.updateData\",\n\n  validate: new SimpleSchema({\n    playerRoundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ playerRoundId, key, value, append, noCallback }) {\n    const playerRound = PlayerRounds.findOne(playerRoundId);\n    if (!playerRound) {\n      throw new Error(\"playerRound not found\");\n    }\n    // TODO check can update this record playerRound\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    PlayerRounds.update(playerRoundId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId: playerRound.playerId,\n        playerRoundId,\n        playerRound,\n        key,\n        value: val,\n        prevValue: playerRound.data && playerRound.data[key],\n        append\n      });\n    }\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\n\nimport { TimestampSchema, UserDataSchema, BelongsTo } from \"../default-schemas\";\n\nexport const PlayerRounds = new Mongo.Collection(\"player_rounds\");\n\nPlayerRounds.schema = new SimpleSchema({});\n\nPlayerRounds.schema.extend(TimestampSchema);\nPlayerRounds.schema.extend(UserDataSchema);\nPlayerRounds.schema.extend(BelongsTo(\"Players\"));\nPlayerRounds.schema.extend(BelongsTo(\"Rounds\"));\nPlayerRounds.schema.extend(BelongsTo(\"Games\"));\nPlayerRounds.schema.extend(BelongsTo(\"Batches\"));\nPlayerRounds.attachSchema(PlayerRounds.schema);\n","// augment.js\nimport { updateGameData, earlyExitGame } from \"../games/methods.js\";\nimport { updateGameLobbyData } from \"../game-lobbies/methods\";\nimport { updatePlayerRoundData } from \"../player-rounds/methods\";\nimport { PlayerRounds } from \"../player-rounds/player-rounds\";\nimport {\n  updatePlayerData,\n  earlyExitPlayer,\n  earlyExitPlayerLobby\n} from \"../players/methods.js\";\nimport { playerLog } from \"../player-logs/methods.js\";\nimport { updateRoundData } from \"../rounds/methods.js\";\nimport { updateStageData } from \"../stages/methods.js\";\nimport { submitPlayerStage, updatePlayerStageData } from \"./methods\";\nimport { PlayerStages } from \"./player-stages\";\n\nconst gameSet = (gameId, append = false) => (key, value) => {\n  updateGameData.call({\n    gameId,\n    key,\n    value: JSON.stringify(value),\n    append,\n    noCallback: Meteor.isServer\n  });\n};\n\nconst gameLobbySet = (gameLobbyId, append = false) => (key, value) => {\n  updateGameLobbyData.call({\n    gameLobbyId,\n    key,\n    value: JSON.stringify(value),\n    append,\n    noCallback: Meteor.isServer\n  });\n};\n\nconst playerSet = (playerId, append = false) => (key, value) => {\n  updatePlayerData.call({\n    playerId,\n    key,\n    value: JSON.stringify(value),\n    append,\n    noCallback: Meteor.isServer\n  });\n};\nconst stageSet = (playerStageId, append = false) => (key, value) => {\n  updatePlayerStageData.call({\n    playerStageId,\n    key,\n    value: JSON.stringify(value),\n    append,\n    noCallback: Meteor.isServer\n  });\n};\nconst stageSubmit = playerStageId => cb => {\n  submitPlayerStage.call(\n    {\n      playerStageId,\n      noCallback: Meteor.isServer\n    },\n    cb\n  );\n};\nconst roundSet = (playerRoundId, append = false) => (key, value) => {\n  updatePlayerRoundData.call({\n    playerRoundId,\n    key,\n    value: JSON.stringify(value),\n    append,\n    noCallback: Meteor.isServer\n  });\n};\n\n// Once the operation has succeeded (no throw), set the value\n// undefined is not supported, null is, replace undefineds by nulls.\nconst set = (obj, func) => (k, v) => {\n  const val = v === undefined ? null : v;\n  func(k, val);\n  obj[k] = val;\n};\n\nconst append = (obj, func) => (k, v) => {\n  const val = v === undefined ? null : v;\n  func(k, val);\n  if (!obj[k]) {\n    obj[k] = [];\n  }\n  obj[k].push(val);\n};\n\nconst nullFunc = () => {\n  throw \"You called .get(...) or .set(...) but there is no data for the player yet. Did the game run for this player?\";\n};\n\nexport const augmentGameLobby = gameLobby => {\n  gameLobby.get = key => gameLobby.data[key];\n  gameLobby.set = set(gameLobby.data, gameLobbySet(gameLobby._id));\n  gameLobby.append = append(gameLobby.data, gameLobbySet(gameLobby._id, true));\n};\n\nexport const augmentPlayerLobby = (\n  player,\n  round = {},\n  stage = {},\n  gameLobby = {}\n) => {\n  const { _id: playerId } = player;\n\n  player.exit = reason =>\n    earlyExitPlayerLobby.call({\n      playerId,\n      exitReason: reason,\n      gameLobbyId: gameLobby._id\n    });\n  player.get = key => player.data[key];\n  player.set = set(player.data, playerSet(playerId));\n  player.append = append(player.data, playerSet(playerId, true));\n  player.log = (name, data) => {\n    playerLog.call({\n      playerId,\n      name,\n      jsonData: JSON.stringify(data),\n      stageId: stage._id,\n      roundId: round._id,\n      gameLobbyId: gameLobby._id\n    });\n  };\n};\n\nexport const augmentPlayer = (player, stage = {}, round = {}, game = {}) => {\n  const { _id: playerId } = player;\n\n  player.exit = reason =>\n    earlyExitPlayer.call({\n      playerId,\n      exitReason: reason,\n      gameId: game._id\n    });\n  player.get = key => player.data[key];\n  player.set = set(player.data, playerSet(playerId));\n  player.append = append(player.data, playerSet(playerId, true));\n  player.log = (name, data) => {\n    playerLog.call({\n      playerId,\n      name,\n      jsonData: JSON.stringify(data),\n      stageId: stage._id,\n      roundId: round._id,\n      gameId: game._id\n    });\n  };\n};\n\nexport const augmentPlayerStageRound = (\n  player,\n  stage = {},\n  round = {},\n  game = {}\n) => {\n  const { _id: playerId } = player;\n\n  augmentPlayer(player, stage, round, game);\n\n  if (stage) {\n    const playerStage = PlayerStages.findOne({\n      stageId: stage._id,\n      playerId\n    });\n    stage.get = key => playerStage.data[key];\n    stage.set = set(playerStage.data, stageSet(playerStage._id));\n    stage.append = append(playerStage.data, stageSet(playerStage._id, true));\n    stage.submit = stageSubmit(playerStage._id, err => {\n      if (!err) {\n        stage.submitted = true;\n      }\n    });\n    stage.submitted = Boolean(playerStage.submittedAt);\n    stage.submittedAt = playerStage.submittedAt;\n  }\n\n  if (round) {\n    const playerRound = PlayerRounds.findOne({\n      roundId: round._id,\n      playerId\n    });\n    round.get = key => playerRound.data[key];\n    round.set = set(playerRound.data, roundSet(playerRound._id));\n    round.append = append(playerRound.data, roundSet(playerRound._id, true));\n  }\n};\n\nexport const stubPlayerStageRound = (player, stage, round) => {\n  player.get = nullFunc;\n  player.set = nullFunc;\n  player.append = nullFunc;\n\n  if (stage) {\n    stage.get = nullFunc;\n    stage.set = nullFunc;\n    stage.append = nullFunc;\n    stage.submit = nullFunc;\n    stage.submitted = false;\n  }\n\n  if (round) {\n    round.get = nullFunc;\n    round.set = nullFunc;\n    round.append = nullFunc;\n  }\n};\n\nexport const augmentGameStageRound = (game, stage, round) => {\n  if (game) {\n    game.get = key => game.data[key];\n    game.set = set(game.data, gameSet(game._id));\n    game.append = append(game.data, gameSet(game._id, true));\n    game.end = endReason =>\n      earlyExitGame.call({\n        gameId: game._id,\n        endReason,\n        status: \"custom\"\n      });\n  }\n\n  if (stage) {\n    stage.get = key => {\n      return stage.data[key];\n    };\n    stage.set = set(stage.data, (key, value) => {\n      updateStageData.call({\n        stageId: stage._id,\n        key,\n        value: JSON.stringify(value),\n        append: false,\n        noCallback: Meteor.isServer\n      });\n    });\n    stage.append = append(stage.data, (key, value) => {\n      updateStageData.call({\n        stageId: stage._id,\n        key,\n        value: JSON.stringify(value),\n        append: true,\n        noCallback: Meteor.isServer\n      });\n    });\n    stage.submit = () => {\n      throw \"You cannot submit the entire stage at the moment\";\n    };\n  }\n\n  if (round) {\n    round.get = key => {\n      return round.data[key];\n    };\n    round.set = set(round.data, (key, value) => {\n      updateRoundData.call({\n        roundId: round._id,\n        key,\n        value: JSON.stringify(value),\n        append: false,\n        noCallback: Meteor.isServer\n      });\n    });\n    round.append = append(round.data, (key, value) => {\n      updateRoundData.call({\n        roundId: round._id,\n        key,\n        value: JSON.stringify(value),\n        append: true,\n        noCallback: Meteor.isServer\n      });\n    });\n  }\n};\n\nexport const stubStageRound = (stage, round) => {\n  stage.get = nullFunc;\n  stage.set = nullFunc;\n  stage.append = nullFunc;\n  stage.submit = nullFunc;\n  round.get = nullFunc;\n  round.set = nullFunc;\n  round.append = nullFunc;\n};\n","// See if everyone is done with this stage\nimport { PlayerStages } from \"./player-stages\";\nimport { endOfStage } from \"../stages/finish.js\";\nimport { Players } from \"../players/players\";\n\nPlayerStages.after.update(\n  function(userId, playerStage, fieldNames, modifier, options) {\n    if (!fieldNames.includes(\"submittedAt\")) {\n      return;\n    }\n    const { stageId } = playerStage;\n\n    const playerIDs = PlayerStages.find({ stageId }).map(p => p.playerId);\n    const availPlayerIDs = Players.find({\n      _id: { $in: playerIDs },\n      exitAt: { $exists: false }\n    }).map(p => p._id);\n\n    const doneCount = PlayerStages.find({\n      stageId,\n      playerId: { $in: availPlayerIDs },\n      submittedAt: { $exists: true }\n    }).count();\n\n    if (doneCount === availPlayerIDs.length) {\n      endOfStage(stageId);\n    }\n  },\n  { fetchPrevious: false }\n);\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\nimport { PlayerStages } from \"./player-stages\";\nimport shared from \"../../shared.js\";\n\nexport const updatePlayerStageData = new ValidatedMethod({\n  name: \"PlayerStages.methods.updateData\",\n\n  validate: new SimpleSchema({\n    playerStageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ playerStageId, key, value, append, noCallback }) {\n    const playerStage = PlayerStages.findOne(playerStageId);\n    if (!playerStage) {\n      throw new Error(\"playerStage not found\");\n    }\n\n    // TODO check can update this record playerStage\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    PlayerStages.update(playerStageId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId: playerStage.playerId,\n        playerStageId,\n        playerStage,\n        key,\n        value: val,\n        prevValue: playerStage.data && playerStage.data[key],\n        append\n      });\n    }\n  }\n});\n\nexport const submitPlayerStage = new ValidatedMethod({\n  name: \"PlayerStages.methods.submit\",\n\n  validate: new SimpleSchema({\n    playerStageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ playerStageId, noCallback }) {\n    const playerStage = PlayerStages.findOne(playerStageId);\n    if (!playerStage) {\n      throw new Error(\"playerStage not found\");\n    }\n    // TODO check can update this record playerStage\n\n    if (playerStage.submittedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"stage already submitted\");\n      }\n\n      return;\n    }\n\n    PlayerStages.update(playerStageId, { $set: { submittedAt: new Date() } });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnSubmit({\n        playerId: playerStage.playerId,\n        playerStage\n      });\n    }\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\n\nimport { TimestampSchema, UserDataSchema, BelongsTo } from \"../default-schemas\";\n\nexport const PlayerStages = new Mongo.Collection(\"player_stages\");\n\nPlayerStages.schema = new SimpleSchema({\n  submittedAt: {\n    type: Date,\n    denyInsert: true,\n    optional: true,\n    index: 1\n  }\n});\n\nPlayerStages.schema.extend(TimestampSchema);\nPlayerStages.schema.extend(UserDataSchema);\nPlayerStages.schema.extend(BelongsTo(\"Players\"));\nPlayerStages.schema.extend(BelongsTo(\"Stages\"));\nPlayerStages.schema.extend(BelongsTo(\"Rounds\"));\nPlayerStages.schema.extend(BelongsTo(\"Games\"));\nPlayerStages.schema.extend(BelongsTo(\"Batches\"));\nPlayerStages.attachSchema(PlayerStages.schema);\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { Batches } from \"../batches/batches.js\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\nimport { IdSchema } from \"../default-schemas.js\";\nimport { LobbyConfigs } from \"../lobby-configs/lobby-configs.js\";\nimport { Games } from \"../games/games.js\";\nimport { Players } from \"./players\";\nimport { exitStatuses } from \"./players.js\";\nimport { sleep, weightedRandom } from \"../../lib/utils.js\";\nimport shared from \"../../shared.js\";\nimport gameLobbyLock from \"../../gameLobby-lock.js\";\n\nexport const createPlayer = new ValidatedMethod({\n  name: \"Players.methods.create\",\n\n  validate: new SimpleSchema({\n    id: {\n      type: String\n    },\n    urlParams: {\n      type: Object,\n      blackbox: true,\n      defaultValue: {}\n    }\n  }).validator(),\n\n  run(player) {\n    // Find the first running batch (in order of running started time)\n    const batch = Batches.findOne(\n      { status: \"running\", full: false },\n      { sort: { runningAt: 1 } }\n    );\n\n    if (!batch) {\n      // The UI should update and realize there is no batch available\n      // This should be a rare case where a fraction of a second of\n      // desynchornisation when the last available batch just finished.\n      // If this is the case, since the user exist in the DB at this point\n      // but has no lobby assigned, and the UI will soon determine there\n      // is no available game, the UI will switch to \"No experiments\n      // available\", nothing else to do.\n      return;\n    }\n\n    // TODO: MAYBE, add verification that the user is not current connected\n    // elsewhere and this is not a flagrant impersonation. Note that is\n    // extremely difficult to guaranty. Could also add verification of user's\n    // id with email verication for example. For now the assumption is that\n    // there is no immediate reason or long-term motiviation for people to hack\n    // each other's player account.\n\n    const existing = Players.findOne({ id: player.id });\n\n    // If the player already has a game lobby assigned, no need to\n    // re-initialize them\n    if (existing && existing.gameLobbyId) {\n      return existing._id;\n    }\n\n    if (existing) {\n      player = existing;\n    } else {\n      // Because of a bug in SimpleSchema around blackbox: true, skipping\n      // validation here. Validation did happen at the method level though.\n      player._id = Players.insert(player, {\n        filter: false,\n        validate: false\n      });\n    }\n\n    // Looking for all lobbies for batch (for which that game has not started yet)\n    const lobbies = GameLobbies.find({\n      batchId: batch._id,\n      status: \"running\",\n      timedOutAt: { $exists: false },\n      gameId: { $exists: false }\n    }).fetch();\n\n    if (lobbies.length === 0) {\n      // This is the same case as when there are no batches available.\n      return;\n    }\n\n    // Let's first try to find lobbies for which their queue isn't full yet\n    let lobbyPool = lobbies.filter(\n      l => l.availableCount > l.queuedPlayerIds.length\n    );\n\n    // If no lobbies still have \"availability\", just fill any lobby\n    if (lobbyPool.length === 0) {\n      lobbyPool = lobbies;\n    }\n\n    // Book proportially to total expected playerCount\n    const weigthedLobbyPool = lobbyPool.map(lobby => {\n      return {\n        value: lobby,\n        weight: lobby.availableCount\n      };\n    });\n\n    // Choose a lobby in the available weigthed pool\n    const lobby = weightedRandom(weigthedLobbyPool)();\n\n    // Adding the player to specified lobby queue\n    GameLobbies.update(lobby._id, {\n      $addToSet: {\n        queuedPlayerIds: player._id\n      }\n    });\n\n    const gameLobbyId = lobby._id;\n    const $set = { gameLobbyId };\n\n    // Check if there will be instructions\n    let skipInstructions = lobby.debugMode;\n\n    // If there are no instruction, mark the player as ready immediately\n    if (skipInstructions) {\n      $set.readyAt = new Date();\n    }\n\n    Players.update(player._id, { $set });\n\n    // If there are no instruction, player is ready, notify the lobby\n    if (skipInstructions) {\n      GameLobbies.update(gameLobbyId, {\n        $addToSet: { playerIds: player._id }\n      });\n    }\n\n    return player._id;\n  }\n});\n\nexport const playerReady = new ValidatedMethod({\n  name: \"Players.methods.ready\",\n\n  validate: IdSchema.validator(),\n\n  async run({ _id }) {\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    try {\n      // Lobby might be locked if game is currently being created.\n      // We retry until lobby is unlocked.\n      while (!assignToLobby(_id)) {\n        await sleep(1000);\n      }\n    } catch (error) {\n      console.error(\"Players.methods.ready\", error);\n    }\n  }\n});\n\nfunction assignToLobby(_id) {\n  const player = Players.findOne(_id);\n\n  if (!player) {\n    throw `unknown ready player: ${_id}`;\n  }\n  const { readyAt, gameLobbyId } = player;\n\n  if (readyAt) {\n    // Already ready\n    return true;\n  }\n\n  const lobby = GameLobbies.findOne(gameLobbyId);\n\n  if (!lobby) {\n    throw `unknown lobby for ready player: ${_id}`;\n  }\n\n  // GameLobby is locked.\n  if (gameLobbyLock[gameLobbyId]) {\n    return false;\n  }\n\n  // Game is Full, bail the player\n  if (lobby.playerIds.length === lobby.availableCount) {\n    // User already ready, something happened out of order\n    if (lobby.playerIds.includes(_id)) {\n      return true;\n    }\n\n    // Mark the player's participation attemp as failed if\n    // not already marked exited\n    Players.update(\n      {\n        _id,\n        exitAt: { $exists: false }\n      },\n      {\n        $set: {\n          exitAt: new Date(),\n          exitStatus: \"gameFull\"\n        }\n      }\n    );\n\n    return true;\n  }\n\n  // Try to update the GameLobby with the playerIds we just queried.\n  GameLobbies.update(\n    { _id: gameLobbyId, playerIds: lobby.playerIds },\n    {\n      $addToSet: { playerIds: _id }\n    }\n  );\n\n  // If the playerId insert succeeded (playerId WAS added to playerIds),\n  // mark the user record as ready and potentially start the individual\n  // lobby timer.\n  const lobbyUpdated = GameLobbies.findOne(gameLobbyId);\n  if (lobbyUpdated.playerIds.includes(_id)) {\n    // If it did work, mark player as ready\n    $set = { readyAt: new Date() };\n\n    // If it's an individual lobby timeout, mark the first timer as started.\n    const lobbyConfig = LobbyConfigs.findOne(lobbyUpdated.lobbyConfigId);\n    if (lobbyConfig.timeoutType === \"individual\") {\n      $set.timeoutStartedAt = new Date();\n      $set.timeoutWaitCount = 1;\n    }\n\n    Players.update(_id, { $set });\n    return true;\n  }\n\n  // If the playerId insert failed (playerId NOT added to playerIds), the\n  // playerIds has changed since it was queried and the lobby might not\n  // have any available slots left, loop and retry.\n  return false;\n}\n\nexport const updatePlayerData = new ValidatedMethod({\n  name: \"Players.methods.updateData\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ playerId, key, value, append, noCallback }) {\n    const player = Players.findOne(playerId);\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n    // TODO check can update this record player\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    Players.update(playerId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        playerId,\n        player,\n        key,\n        value: val,\n        prevValue: player.data && player.data[key],\n        append\n      });\n    }\n  }\n});\n\nexport const markPlayerExitStepDone = new ValidatedMethod({\n  name: \"Players.methods.markExitStepDone\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    stepName: {\n      type: String\n    }\n  }).validator(),\n\n  run({ playerId, stepName }) {\n    const player = Players.findOne(playerId);\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n    // TODO check can update this record player\n\n    Players.update(playerId, { $addToSet: { exitStepsDone: stepName } });\n  }\n});\n\nexport const extendPlayerTimeoutWait = new ValidatedMethod({\n  name: \"Players.methods.extendTimeoutWait\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run({ playerId }) {\n    const player = Players.findOne(playerId);\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    Players.update(playerId, {\n      $inc: { timeoutWaitCount: 1 },\n      $set: { timeoutStartedAt: new Date() }\n    });\n  }\n});\n\nexport const endPlayerTimeoutWait = new ValidatedMethod({\n  name: \"Players.methods.endTimeoutWait\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run({ playerId }) {\n    const player = Players.findOne(playerId);\n    if (!player) {\n      throw new Error(\"player not found\");\n    }\n\n    Players.update(playerId, {\n      $set: {\n        exitStatus: \"playerEndedLobbyWait\",\n        exitAt: new Date()\n      }\n    });\n    GameLobbies.update(player.gameLobbyId, {\n      $pull: {\n        playerIds: playerId\n        // We keep the player in queuedPlayerIds so they will still have the\n        // fact they were in a lobby available in the UI, and so we can show\n        // them the exit steps.\n      }\n    });\n  }\n});\n\nexport const earlyExitPlayer = new ValidatedMethod({\n  name: \"Players.methods.admin.earlyExitPlayer\",\n\n  validate: new SimpleSchema({\n    exitReason: {\n      label: \"Reason for Exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    gameId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run({ exitReason, playerId, gameId }) {\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const game = Games.findOne(gameId);\n\n    if (!game) {\n      throw new Error(\"game not found\");\n    }\n\n    if (game && game.finishedAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\n\\ngame already ended!\");\n      }\n\n      return;\n    }\n\n    const currentPlayer = Players.findOne(playerId);\n\n    if (currentPlayer && currentPlayer.exitAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\nplayer already exited!\");\n      }\n\n      return;\n    }\n\n    Players.update(playerId, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: \"custom\",\n        exitReason\n      }\n    });\n\n    const players = Players.find({ gameId }).fetch();\n    const onlinePlayers = players.filter(player => !player.exitAt);\n\n    if (!onlinePlayers || (onlinePlayers && onlinePlayers.length === 0)) {\n      Games.update(gameId, {\n        $set: {\n          finishedAt: new Date(),\n          status: \"custom\",\n          endReason: \"finished_early\"\n        }\n      });\n\n      GameLobbies.update(\n        { gameId },\n        {\n          $set: {\n            status: \"custom\",\n            endReason: \"finished_early\"\n          }\n        }\n      );\n    }\n  }\n});\n\nexport const earlyExitPlayerLobby = new ValidatedMethod({\n  name: \"Players.methods.admin.earlyExitPlayerLobby\",\n\n  validate: new SimpleSchema({\n    exitReason: {\n      label: \"Reason for Exit\",\n      type: String,\n      regEx: /[a-zA-Z0-9_]+/\n    },\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    gameLobbyId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run({ exitReason, playerId, gameLobbyId }) {\n    if (!Meteor.isServer) {\n      return;\n    }\n\n    const gameLobby = GameLobbies.findOne(gameLobbyId);\n\n    if (!gameLobby) {\n      throw new Error(\"gameLobby not found\");\n    }\n\n    const currentPlayer = Players.findOne(playerId);\n\n    if (currentPlayer && currentPlayer.exitAt) {\n      if (Meteor.isDevelopment) {\n        console.log(\"\\nplayer already exited!\");\n      }\n\n      return;\n    }\n\n    Players.update(playerId, {\n      $set: {\n        exitAt: new Date(),\n        exitStatus: \"custom\",\n        exitReason\n      }\n    });\n  }\n});\n\nexport const retireSinglePlayer = new ValidatedMethod({\n  name: \"Players.methods.admin.retireSingle\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    }\n  }).validator(),\n\n  run({ playerId }) {\n    if (!playerId) {\n      throw new Error(\"empty playerId\");\n    }\n\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const player = Players.findOne({\n      _id: playerId,\n      retiredAt: { $exists: false }\n    });\n\n    if (!player) {\n      throw new Error(\"Player not found\");\n    }\n\n    const timestamp = new Date().toISOString();\n\n    Players.update(playerId, {\n      $set: {\n        id: `${player.id} (Retired custom at ${timestamp})`,\n        retiredAt: new Date(),\n        retiredReason: \"custom\"\n      }\n    });\n\n    return player;\n  }\n});\n\nexport const retireGameFullPlayers = new ValidatedMethod({\n  name: \"Players.methods.admin.retireGameFull\",\n\n  validate: new SimpleSchema({\n    retiredReason: {\n      label: \"Retired Reason\",\n      type: String,\n      optional: true,\n      allowedValues: exitStatuses\n    }\n  }).validator(),\n\n  run({ retiredReason }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    const players = Players.find({\n      exitStatus: retiredReason,\n      retiredAt: { $exists: false }\n    }).fetch();\n\n    const timestamp = new Date().toISOString();\n\n    for (let i = 0; i < players.length; i++) {\n      const player = players[i];\n\n      Players.update(player._id, {\n        $set: {\n          id: `${player.id} (Retired ${retiredReason} at ${timestamp})`,\n          retiredAt: new Date(),\n          retiredReason\n        }\n      });\n    }\n\n    return players.length;\n  }\n});\n\nexport const playerWasRetired = new ValidatedMethod({\n  name: \"Players.methods.playerWasRetired\",\n\n  validate: IdSchema.validator(),\n\n  run({ _id }) {\n    return Boolean(\n      Players.findOne({\n        _id,\n        exitStatus: { $exists: true },\n        retiredAt: { $exists: true }\n      })\n    );\n  }\n});\n\nexport const updatePlayerStatus = new ValidatedMethod({\n  name: \"Players.methods.updateStatus\",\n\n  validate: new SimpleSchema({\n    playerId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n\n    idle: {\n      type: Boolean\n    },\n\n    lastActivityAt: {\n      type: Date\n    }\n  }).validator(),\n\n  run({ playerId, idle, lastActivityAt }) {\n    if (Meteor.isServer) {\n      const playerIdConn = shared.playerIdForConn(this.connection);\n      if (!playerIdConn) {\n        return;\n      }\n      if (playerId !== playerIdConn) {\n        console.error(\n          \"Attempting to update player status from wrong connection\"\n        );\n        return;\n      }\n    }\n\n    Players.update(playerId, {\n      $set: {\n        idle,\n        lastActivityAt\n      }\n    });\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\nimport { Counter } from \"../../lib/counters\";\nimport { BelongsTo, TimestampSchema, UserDataSchema } from \"../default-schemas\";\n\nclass PlayersCollection extends Mongo.Collection {\n  insert(doc, callback) {\n    doc.index = Counter.inc(\"players\");\n    return super.insert(doc, callback);\n  }\n}\n\nexport const Players = new PlayersCollection(\"players\");\n\nexport const exitStatuses = [\n  \"gameFull\",\n  \"gameCancelled\",\n  \"gameLobbyTimedOut\",\n  \"playerEndedLobbyWait\",\n  \"playerLobbyTimedOut\",\n  \"finished\",\n  \"cancelled\",\n  \"failed\",\n  \"custom\"\n];\n\nPlayers.schema = new SimpleSchema({\n  // The Player `id` is used to uniquely identify the player to avoid\n  // having a user play multiple times. It can be any string, for example\n  // an email address, a Mechanical Turk ID, a manually assigned participation\n  // number (saved as string), etc...\n  id: {\n    type: String,\n    max: 256\n  },\n\n  // True if the player is currently online and idle\n  idle: {\n    label: \"Idle\",\n    type: Boolean,\n    optional: true\n  },\n\n  // True if the player is currently online\n  online: {\n    label: \"Online\",\n    type: Boolean,\n    optional: true\n  },\n\n  // Time when the player was last seen online and active\n  lastActivityAt: {\n    label: \"Last Activity At\",\n    type: Date,\n    optional: true\n  },\n\n  lastLogin: { type: Object, optional: true },\n  \"lastLogin.at\": { type: Date, optional: true },\n  \"lastLogin.ip\": { type: String, optional: true },\n  \"lastLogin.userAgent\": { type: String, optional: true },\n\n  // Auto-incremented number assigned to players as they are created\n  index: {\n    type: SimpleSchema.Integer\n  },\n\n  // params contains any URL passed parameters\n  urlParams: {\n    type: Object,\n    blackbox: true,\n    defaultValue: {}\n  },\n\n  bot: {\n    label: \"Name of bot definition if player is a bot\",\n    type: String,\n    optional: true,\n    index: 1\n  },\n\n  // Time at witch the player became ready (done with intro)\n  readyAt: {\n    label: \"Ready At\",\n    type: Date,\n    optional: true\n  },\n\n  timeoutStartedAt: {\n    label: \"Time the first player arrived in the lobby\",\n    type: Date,\n    optional: true\n  },\n  timeoutWaitCount: {\n    label: \"Number of time the player has waited for timeoutStartedAt\",\n    type: SimpleSchema.Integer,\n    optional: true,\n    min: 1\n  },\n\n  exitStepsDone: {\n    type: Array,\n    defaultValue: []\n  },\n  \"exitStepsDone.$\": {\n    type: String\n  },\n\n  // Failed fields are filled when the player's participation in a game failed\n  exitAt: {\n    label: \"Exited At\",\n    type: Date,\n    optional: true\n  },\n  exitStatus: {\n    label: \"Failed Status\",\n    type: String,\n    optional: true,\n    allowedValues: exitStatuses\n  },\n  exitReason: {\n    label: \"Failed Reason\",\n    type: String,\n    optional: true,\n    regEx: /[a-zA-Z0-9_]+/\n  },\n\n  // A player can be retired. Retired players should no longer be used in active\n  // game, but NOTHING is done in the code to block that from happening. It's\n  // more of an indicator for debugging down the line.\n  retiredAt: {\n    label: \"Retired At\",\n    type: Date,\n    optional: true\n  },\n  retiredReason: {\n    label: \"Retired Reason\",\n    type: String,\n    optional: true,\n    allowedValues: exitStatuses\n  }\n});\n\nPlayers.schema.extend(TimestampSchema);\nPlayers.schema.extend(UserDataSchema);\nPlayers.schema.extend(BelongsTo(\"Games\", false));\nPlayers.schema.extend(BelongsTo(\"GameLobbies\", false));\nPlayers.attachSchema(Players.schema);\n","import { savePlayerId } from \"../../../startup/server/connections.js\";\nimport { Players } from \"../players.js\";\n\nMeteor.publish(\"admin-players\", function(props) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (!props || props.retired === undefined) {\n    return Players.find();\n  }\n\n  return Players.find({ retiredAt: { $exists: Boolean(props.retired) } });\n});\n\nMeteor.publish(\"playerInfo\", function({ playerId }) {\n  const selector = {\n    _id: playerId,\n    retiredAt: { $exists: false }\n  };\n  const playerExists = Players.find(selector).count() > 0;\n\n  if (playerExists) {\n    savePlayerId(this.connection, playerId);\n  }\n  return Players.find(selector);\n});\n\nconst clients = {};\nlet hasPlayers = false;\n\nMeteor.startup(() => {\n  let initializing = true;\n  hasPlayers = Players.find().count() > 0;\n  // `observeChanges` only returns after the initial `added` callbacks have run.\n  // Until then, we don't want to send a lot of `changed` messages—hence\n  // tracking the `initializing` state.\n  const handle = Players.find({}, { fields: { _id: 1 } }).observeChanges({\n    added: id => {\n      if (initializing) {\n        return;\n      }\n      if (Players.find().count() > 0 && !hasPlayers) {\n        hasPlayers = true;\n        for (const id in clients) {\n          if (clients.hasOwnProperty(id)) {\n            const client = clients[id];\n            client.changed(\"hasPlayers\", \"id\", { hasPlayers });\n          }\n        }\n      }\n    },\n\n    removed: id => {\n      if (Players.find().count() === 0 && hasPlayers) {\n        hasPlayers = false;\n        for (const id in clients) {\n          if (clients.hasOwnProperty(id)) {\n            const client = clients[id];\n            client.changed(\"hasPlayers\", \"id\", { hasPlayers });\n          }\n        }\n      }\n    }\n  });\n\n  initializing = false;\n});\n\nMeteor.publish(null, function() {\n  clients[this.connection.id] = this;\n  this.added(\"hasPlayers\", \"id\", { hasPlayers });\n  this.ready();\n  this.onStop(() => delete clients[this.connection.id]);\n});\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { Rounds } from \"./rounds.js\";\nimport shared from \"../../shared.js\";\n\nexport const updateRoundData = new ValidatedMethod({\n  name: \"Rounds.methods.updateData\",\n\n  validate: new SimpleSchema({\n    roundId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ roundId, key, value, append, noCallback }) {\n    const round = Rounds.findOne(roundId);\n    if (!round) {\n      throw new Error(\"round not found\");\n    }\n    // TODO check can update this record round\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    Rounds.update(roundId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        roundId,\n        round,\n        key,\n        value: val,\n        prevValue: round.data && round.data[key],\n        append\n      });\n    }\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\n\nimport {\n  BelongsTo,\n  HasManyByRef,\n  UserDataSchema,\n  TimestampSchema\n} from \"../default-schemas\";\n\nexport const Rounds = new Mongo.Collection(\"rounds\");\n\nRounds.schema = new SimpleSchema({\n  // Index represents the 0 based position of the current round in the ordered\n  // list of a game's rounds. For display, add 1.\n  index: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 9999 // That's a lot of rounds...\n  }\n});\n\nRounds.schema.extend(TimestampSchema);\nRounds.schema.extend(UserDataSchema);\nRounds.schema.extend(HasManyByRef(\"Stages\"));\nRounds.schema.extend(BelongsTo(\"Games\"));\nRounds.schema.extend(HasManyByRef(\"PlayerRounds\"));\nRounds.attachSchema(Rounds.schema);\n","import shared from \"../../shared.js\";\nimport { Games } from \"../games/games.js\";\nimport { Players } from \"../players/players.js\";\nimport { Rounds } from \"../rounds/rounds.js\";\nimport { Stages } from \"../stages/stages.js\";\nimport { Treatments } from \"../treatments/treatments.js\";\nimport {\n  augmentGameStageRound,\n  augmentPlayerStageRound\n} from \"../player-stages/augment.js\";\nimport { augmentGameObject } from \"../games/augment.js\";\nimport { config } from \"../../server\";\n\nconst targets = {\n  playerStageId: \"playerStage\",\n  playerRoundId: \"playerRound\",\n  stageId: \"stage\",\n  roundId: \"round\",\n  gameId: \"game\"\n};\n\n// Central point for triggering the onSet, onAppend and onChange callbacks.\n// These callbacks are called when the experiment code calls custom data update\n// methods on games, rounds, stages, players, playerRounds or playerStages.\n// onSet is called when the .set() method is used.\n// onAppend is called when the .append() method is used.\n// onChange is called when the .set() or .append() method is used.\nexport const callOnChange = params => {\n  const cbName = params.append ? \"onAppend\" : \"onSet\";\n  const { onChange, [cbName]: onSetAppend } = config;\n  const callbacks = [];\n  if (onSetAppend) {\n    callbacks.push(onSetAppend);\n  }\n  if (onChange) {\n    callbacks.push(onChange);\n  }\n  if (callbacks.length === 0) {\n    return;\n  }\n\n  if (params.conn && !params.playerId) {\n    params.playerId = shared.playerIdForConn(params.conn);\n  }\n\n  let target = params.player,\n    targetType = \"player\";\n  for (const key in targets) {\n    if (params[key]) {\n      targetType = targets[key];\n      target = params[targets[key]];\n      // Update field to latest value\n      if (params.append) {\n        if (!target.data[params.key]) {\n          target.data[params.key] = [params.value];\n        } else {\n          target.data[params.key] = target.data[params.key].slice(0);\n          target.data[params.key].push(params.value);\n        }\n      } else {\n        target.data[params.key] = params.value;\n      }\n      break;\n    }\n  }\n\n  let { player, game, round, stage } = params;\n\n  player = player || Players.findOne(params.playerId);\n  game = game || Games.findOne(player.gameId);\n  if (!game) {\n    console.error(`${targetType} data updated without game`);\n    return;\n  }\n  stage = stage || Stages.findOne(game.currentStageId);\n  if (!stage) {\n    console.error(`${targetType} data updated without stage`);\n    return;\n  }\n\n  const { roundId } = stage;\n  round = round || Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n\n  augmentGameObject({ game, treatment, round, stage });\n\n  augmentGameStageRound(game, stage, round);\n\n  callbacks.forEach(callback => {\n    callback(\n      game,\n      round,\n      stage,\n      player,\n      target,\n      targetType,\n      params.key,\n      params.value,\n      params.prevValue,\n      params.append // for onChange\n    );\n  });\n};\n","import shared from \"../../shared.js\";\nimport { Games } from \"../games/games.js\";\nimport { Players } from \"../players/players.js\";\nimport { Rounds } from \"../rounds/rounds.js\";\nimport { Stages } from \"../stages/stages.js\";\nimport { Treatments } from \"../treatments/treatments.js\";\nimport {\n  augmentGameStageRound,\n  augmentPlayerStageRound\n} from \"../player-stages/augment.js\";\nimport { augmentGameObject } from \"../games/augment.js\";\nimport { config } from \"../../server\";\n\nexport const callOnSubmit = params => {\n  const { onSubmit } = config;\n  if (!onSubmit) {\n    return;\n  }\n\n  const { playerId, playerStage } = params;\n\n  const player = Players.findOne(playerId);\n  const game = Games.findOne(player.gameId);\n  if (!game) {\n    console.error(`${targetType} data updated without game`);\n    return;\n  }\n  const stage = Stages.findOne(playerStage.stageId);\n  if (!stage) {\n    console.error(`${targetType} data updated without stage`);\n    return;\n  }\n\n  const { roundId } = stage;\n  const round = Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n\n  augmentGameObject({ game, treatment, round, stage });\n\n  augmentGameStageRound(game, stage, round);\n\n  player.stage = _.extend({}, stage);\n  player.round = _.extend({}, round);\n  augmentPlayerStageRound(player, player.stage, player.round, game);\n\n  onSubmit(game, round, stage, player);\n};\n","import moment from \"moment\";\nimport { config } from \"../../server\";\nimport { Games } from \"../games/games.js\";\nimport {\n  augmentGameStageRound,\n  augmentPlayerStageRound\n} from \"../player-stages/augment.js\";\nimport { augmentGameObject } from \"../games/augment.js\";\nimport { Players } from \"../players/players.js\";\nimport { Rounds } from \"../rounds/rounds.js\";\nimport { Treatments } from \"../treatments/treatments.js\";\nimport { Stages } from \"./stages.js\";\nimport { GameLobbies } from \"../game-lobbies/game-lobbies\";\n\n// endOfStage should only ever run once per stageId. If one of the callback\n// (or the execution of endOfStage itself) takes too much time, a second\n// trigger could try to run endOfStage again (e.g. all players submitted +\n// cron). The lock ensures endOfStage can only run once.\nconst lock = {};\n\nexport const endOfStage = stageId => {\n  if (lock[stageId]) {\n    return;\n  }\n\n  lock[stageId] = true;\n\n  const stage = Stages.findOne(stageId);\n  const { index, gameId, roundId } = stage;\n  const game = Games.findOne(gameId);\n  const round = Rounds.findOne(roundId);\n  const treatment = Treatments.findOne(game.treatmentId);\n\n  augmentGameObject({ game, treatment, round, stage });\n\n  augmentGameStageRound(game, stage, round);\n\n  const { onStageEnd, onRoundEnd, onRoundStart, onStageStart } = config;\n  if (onStageEnd) {\n    onStageEnd(game, round, stage);\n  }\n\n  const nextStage = Stages.findOne({ gameId, index: index + 1 });\n\n  if ((onRoundEnd && !nextStage) || stage.roundId !== nextStage.roundId) {\n    onRoundEnd(game, round);\n  }\n\n  if (nextStage && (onRoundStart || onStageStart)) {\n    const nextRound = Rounds.findOne(nextStage.roundId);\n    augmentGameStageRound(game, nextStage, nextRound);\n    game.players.forEach(player => {\n      player.round = _.extend({}, nextRound);\n      player.stage = _.extend({}, nextStage);\n      augmentPlayerStageRound(player, player.stage, player.round, game);\n    });\n\n    if (onRoundStart && stage.roundId !== nextStage.roundId) {\n      onRoundStart(game, nextRound);\n    }\n\n    if (onStageStart) {\n      onStageStart(game, nextRound, nextStage);\n    }\n  }\n\n  if (nextStage) {\n    // go to next stage\n    const currentStageId = nextStage._id;\n    Games.update(gameId, {\n      $set: { currentStageId }\n    });\n    const startTimeAt = moment().add(Stages.stagePaddingDuration);\n    Stages.update(currentStageId, {\n      $set: {\n        startTimeAt: startTimeAt.toDate()\n      }\n    });\n  } else {\n    const onGameEnd = config.onGameEnd;\n    if (onGameEnd) {\n      onGameEnd(game);\n    }\n    Players.update(\n      {\n        _id: {\n          $in: _.pluck(game.players, \"_id\"),\n          $exists: { exitStatus: false }\n        }\n      },\n      {\n        $set: { exitStatus: \"finished\", exitAt: new Date() }\n      },\n      { multi: true }\n    );\n    Games.update(gameId, {\n      $set: { finishedAt: new Date(), status: \"finished\" }\n    });\n    GameLobbies.update(\n      { gameId },\n      {\n        $set: { status: \"finished\" }\n      }\n    );\n  }\n\n  delete lock[stageId];\n};\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { Stages } from \"./stages.js\";\nimport shared from \"../../shared.js\";\n\nexport const updateStageData = new ValidatedMethod({\n  name: \"Stages.methods.updateData\",\n\n  validate: new SimpleSchema({\n    stageId: {\n      type: String,\n      regEx: SimpleSchema.RegEx.Id\n    },\n    key: {\n      type: String\n    },\n    value: {\n      type: String\n    },\n    append: {\n      type: Boolean,\n      optional: true\n    },\n    noCallback: {\n      type: Boolean,\n      optional: true\n    }\n  }).validator(),\n\n  run({ stageId, key, value, append, noCallback }) {\n    const stage = Stages.findOne(stageId);\n    if (!stage) {\n      throw new Error(\"stage not found\");\n    }\n    // TODO check can update this record stage\n\n    const val = JSON.parse(value);\n    let update = { [`data.${key}`]: val };\n    const modifier = append ? { $push: update } : { $set: update };\n\n    Stages.update(stageId, modifier, {\n      autoConvert: false,\n      filter: false,\n      validate: false,\n      trimStrings: false,\n      removeEmptyStrings: false\n    });\n\n    if (Meteor.isServer && !noCallback) {\n      shared.callOnChange({\n        conn: this.connection,\n        stageId,\n        stage,\n        key,\n        value: val,\n        prevValue: stage.data && stage.data[key],\n        append\n      });\n    }\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\nimport moment from \"moment\";\n\nimport {\n  BelongsTo,\n  TimestampSchema,\n  UserDataSchema,\n  HasManyByRef\n} from \"../default-schemas\";\nimport { Games } from \"../games/games\";\nimport { PlayerStages } from \"../player-stages/player-stages\";\nimport { Rounds } from \"../rounds/rounds\";\n\nexport const Stages = new Mongo.Collection(\"stages\");\n\nStages.helpers({\n  round() {\n    return Rounds.findOne(this.roundId);\n  }\n});\n\nStages.stagePaddingDuration = moment.duration(0.25, \"seconds\");\n\nStages.schema = new SimpleSchema({\n  // Index represents the 0 based position of the current stage in the ordered\n  // list of a all the game's stages. For display, add 1.\n  index: {\n    type: SimpleSchema.Integer,\n    min: 0,\n    max: 999999 // That's a lot of stages...\n  },\n  name: {\n    type: String,\n    max: 64\n  },\n  displayName: {\n    type: String,\n    max: 128\n    // TODO Add auto value to by default copy the name into the displayName?\n  },\n  // This will synchronize the clients timer start time and record start time\n  // for the record\n  startTimeAt: {\n    type: Date,\n    optional: true\n  },\n  durationInSeconds: {\n    type: SimpleSchema.Integer,\n    // One day, that's a lot, but could be \"weird\" experiment, yet no going nuts\n    // into hundreds of years for example.\n    max: 24 * 60 * 60,\n    // It would be difficult to manage a timer that is less than 5s given all\n    // the multi-peer synchronization going on.\n    min: 5\n  }\n});\n\nStages.schema.extend(TimestampSchema);\nStages.schema.extend(UserDataSchema);\nStages.schema.extend(BelongsTo(\"Rounds\"));\nStages.schema.extend(BelongsTo(\"Games\"));\nStages.schema.extend(HasManyByRef(\"PlayerStages\"));\nStages.attachSchema(Stages.schema);\n","import { ValidatedMethod } from \"meteor/mdg:validated-method\";\nimport SimpleSchema from \"simpl-schema\";\n\nimport { IdSchema } from \"../default-schemas.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\nimport { Factors } from \"../factors/factors.js\";\nimport { Treatments } from \"./treatments\";\n\nexport const createTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.create\",\n\n  validate: new SimpleSchema({\n    name: {\n      type: String,\n      max: 256,\n      optional: true\n    },\n    factorIds: {\n      type: Array,\n      label: \"Factors\"\n    },\n    \"factorIds.$\": {\n      type: String\n    }\n  }).validator(),\n\n  run(treatment) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n\n    // Validate the required factor types\n    const requiredFactorTypes = FactorTypes.find({\n      required: true,\n      archivedAt: { $exists: false }\n    }).fetch();\n\n    if (requiredFactorTypes.length > 0) {\n      const createdFactors = Factors.find({\n        _id: { $in: treatment.factorIds }\n      }).fetch();\n      const createdFactorTypes = FactorTypes.find({\n        $and: [\n          {\n            _id: {\n              $in: createdFactors.map(f => f.factorTypeId)\n            }\n          },\n          { required: true }\n        ]\n      }).fetch();\n\n      if (requiredFactorTypes.length !== createdFactorTypes.length) {\n        throw new Error(\"Fill all required factors!\");\n      }\n    }\n\n    Treatments.insert(treatment);\n  }\n});\n\nexport const updateTreatment = new ValidatedMethod({\n  name: \"Treatments.methods.update\",\n\n  validate: Treatments.schema\n    .pick(\"name\")\n    .extend(\n      new SimpleSchema({\n        archived: {\n          type: Boolean,\n          optional: true\n        }\n      })\n    )\n    .extend(IdSchema)\n    .validator(),\n\n  run({ _id, name, archived }) {\n    if (!this.userId) {\n      throw new Error(\"unauthorized\");\n    }\n    const treatment = Treatments.findOne(_id);\n    if (!treatment) {\n      throw new Error(\"not found\");\n    }\n\n    const $set = {},\n      $unset = {};\n    if (name !== undefined) {\n      $set.name = name;\n    }\n    if (archived !== undefined) {\n      if (archived) {\n        if (treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $set.archivedAt = new Date();\n        $set.archivedById = this.userId;\n      }\n      if (!archived) {\n        if (!treatment.archivedAt) {\n          throw new Error(\"not found\");\n        }\n\n        $unset.archivedAt = true;\n        $unset.archivedById = true;\n      }\n    }\n\n    const modifier = {};\n    if (Object.keys($set).length > 0) {\n      modifier.$set = $set;\n    }\n    if (Object.keys($unset).length > 0) {\n      modifier.$unset = $unset;\n    }\n    if (Object.keys(modifier).length === 0) {\n      return;\n    }\n\n    Treatments.update(_id, modifier);\n  }\n});\n","import SimpleSchema from \"simpl-schema\";\n\nimport { Factors } from \"../factors/factors.js\";\nimport { FactorTypes } from \"../factor-types/factor-types.js\";\nimport { TimestampSchema, ArchivedSchema } from \"../default-schemas\";\n\nexport const Treatments = new Mongo.Collection(\"treatments\");\n\nTreatments.helpers({\n  displayName() {\n    return this.name || _.map(this.factors(), c => c.fullLabel()).join(\" - \");\n  },\n\n  factor(name) {\n    const type = FactorTypes.findOne({ name });\n    if (!type) {\n      return;\n    }\n    return this.factors().find(c => c.factorTypeId === type._id);\n  },\n\n  factors() {\n    const query = { _id: { $in: this.factorIds } };\n    return Factors.find(query).fetch();\n  },\n\n  factorsObject() {\n    const doc = {};\n    this.factors().forEach(c => {\n      const type = FactorTypes.findOne(c.factorTypeId);\n      doc[type.name] = c.value;\n    });\n    return doc;\n  }\n});\n\nTreatments.schema = new SimpleSchema({\n  // Optional experimenter given name for the treatment\n  name: {\n    type: String,\n    max: 256,\n    optional: true,\n    custom() {\n      if (this.isSet && Treatments.find({ name: this.value }).count() > 0) {\n        return \"notUnique\";\n      }\n    }\n\n    // regEx: /^[a-zA-Z0-9_]+$/\n  },\n\n  // Array of factorIds\n  factorIds: {\n    type: Array,\n    minCount: FactorTypes.requiredTypes,\n    label: \"Factors\",\n    index: true,\n    denyUpdate: true\n    // // Custom validation verifies required factors are present and that\n    // // there are no duplicate factors with the same key. We cannot easily\n    // // verify one of each factors is present.\n    // custom() {\n    //   if (!Meteor.isServer || !this.isInsert) {\n    //     return;\n    //   }\n\n    //   const factors = Factors.find({ _id: { $in: this.value } }).fetch();\n    //   const doc = {};\n    //   factors.forEach(c => (doc[c.type] = c.value));\n\n    //   const context = factorsSchema.newContext();\n    //   context.validate(doc);\n    //   if (!context.isValid()) {\n    //     const error = {\n    //       name: \"factorIds\",\n    //       type: \"invalid\",\n    //       details: context.validationErrors()\n    //     };\n    //     this.addValidationErrors([error]);\n    //     return \"invalid\";\n    //   }\n    // }\n  },\n\n  \"factorIds.$\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Id,\n    label: `Factor Item`\n  }\n});\n\nTreatments.schema.addDocValidator(({ factorIds }) => {\n  if (!this.isInsert) {\n    return [];\n  }\n  const query = {\n    factorIds: {\n      $size: factorIds.length,\n      $all: factorIds\n    }\n  };\n  if (Boolean(Treatments.findOne(query))) {\n    return [\n      {\n        name: \"factorIds\",\n        type: \"notUnique\"\n      }\n    ];\n  }\n  return [];\n});\n\nTreatments.schema.extend(TimestampSchema);\nTreatments.schema.extend(ArchivedSchema);\nTreatments.attachSchema(Treatments.schema);\n","import { Treatments } from \"../treatments\";\nimport { Factors } from \"../../factors/factors.js\";\nimport { FactorTypes } from \"../../factor-types/factor-types.js\";\n\nMeteor.publish(\"admin-treatments\", function({ archived }) {\n  if (!this.userId) {\n    return null;\n  }\n\n  if (archived === undefined) {\n    return Treatments.find();\n  }\n\n  return Treatments.find({ archivedAt: { $exists: Boolean(archived) } });\n});\n\nMeteor.publish(\"treatment\", function(treatmentId) {\n  if (!treatmentId) {\n    return [];\n  }\n\n  const treatment = Treatments.findOne(treatmentId);\n\n  if (!treatment) {\n    return [];\n  }\n\n  return [\n    Treatments.find(treatmentId),\n    Factors.find({\n      _id: {\n        $in: treatment.factorIds\n      }\n    }),\n    FactorTypes.find()\n  ];\n});\n","import React from \"react\";\n\nfunction isClassComponent(component) {\n  return typeof component === \"function\" &&\n    !!component.prototype.isReactComponent\n    ? true\n    : false;\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === \"function\" &&\n    String(component).includes(\"return React.createElement\")\n    ? true\n    : false;\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component)\n    ? true\n    : false;\n}\n\nfunction isElement(element) {\n  return React.isValidElement(element);\n}\n\nfunction isDOMTypeElement(element) {\n  return isElement(element) && typeof element.type === \"string\";\n}\n\nfunction isCompositeTypeElement(element) {\n  return isElement(element) && typeof element.type === \"function\";\n}\n\nmodule.exports = {\n  isClassComponent,\n  isFunctionComponent,\n  isReactComponent,\n  isElement,\n  isDOMTypeElement,\n  isCompositeTypeElement\n};\n","// Named Atomic counters\n//\n// Example:\n//    Counter.inc(\"something\") // => 1\n//    Counter.inc(\"something\") // => 2\n//    Counter.inc(\"something\", 8) // => 10\n//    Counter.inc(\"something\", -5) // => 5\n//    Counter.set(\"something\", 42) // => 42\n\nlet incset;\nif (Meteor.isServer) {\n  const raw = new Mongo.Collection(\"counters\").rawCollection();\n  findAndModify = Meteor.wrapAsync(raw.findAndModify, raw);\n\n  incset = op => (name, amount = 1) => {\n    const res = findAndModify(\n      { _id: name }, // query\n      null, // sort\n      { [`$${op}`]: { value: amount } }, // update\n      { new: true, upsert: true } // options\n    );\n    return res.value && res.value.value;\n  };\n} else {\n  incset = op => () => {};\n}\n\nexport const Counter = {\n  inc: incset(\"inc\"),\n  set: incset(\"set\")\n};\n","// See https://www.npmjs.com/package/loglevel for logging docs\nimport * as logging from \"loglevel\";\n\nconst log = logging.getLogger(\"main\");\n\n// Fallback level if none is set in config file\nlog.setDefaultLevel(Meteor.isDevelopment ? \"info\" : \"warn\");\n\n// Log level is set in \"public\" so it's accessible on the client\n// Valid log level strings are: trace, debug, info, warn, error or silent.\nif (Meteor.settings.public.loglevel) {\n  log.setLevel(Meteor.settings.public.loglevel);\n}\n\nexport default log;\n","import {\n  isClassComponent,\n  isFunctionComponent,\n  isReactComponent,\n  isElement\n} from \"./componentChecker\";\n\nexport const sleep = ms => {\n  return new Promise(function(resolve, _) {\n    setTimeout(() => {\n      resolve();\n    }, ms);\n  });\n};\n\nexport const weightedRandom = values => {\n  const samples = [];\n\n  for (var i = 0; i < values.length; i += 1) {\n    if (\n      !values[i] ||\n      !values[i].hasOwnProperty(\"value\") ||\n      !values[i].hasOwnProperty(\"weight\")\n    ) {\n      throw \"all values passed to weightedRandom must have a value and weight field\";\n    }\n    for (var j = 0; j < values[i].weight; j += 1) {\n      samples.push(values[i].value);\n    }\n  }\n\n  return () => samples[Math.floor(Math.random() * samples.length)];\n};\n\nexport const isReactComponents = components => {\n  let isValid = true;\n\n  if (components && _.isArray(components)) {\n    for (let i = 0; i < components.length; i++) {\n      if (\n        !isClassComponent(components[i]) &&\n        !isFunctionComponent(components[i]) &&\n        !isReactComponent(components[i]) &&\n        !isElement(components[i])\n      ) {\n        console.error(\"component is not a React Component!\", components[i]);\n        isValid = false;\n        break;\n      }\n    }\n  } else {\n    console.error(\"components is not Valid!\");\n    isValid = false;\n  }\n\n  return isValid;\n};\n\nlet STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\nlet ARGUMENT_NAMES = /(?:^|,)\\s*([^\\s,=]+)/g;\n\nexport const getFunctionParameters = func => {\n  let fnStr = func.toString().replace(STRIP_COMMENTS, \"\");\n  fnStr = fnStr.split(\"=>\")[0];\n  const argsList = fnStr.slice(fnStr.indexOf(\"(\") + 1, fnStr.indexOf(\")\"));\n  const result = argsList.match(ARGUMENT_NAMES);\n\n  if (result === null) {\n    return [];\n  } else {\n    let stripped = [];\n    for (let i = 0; i < result.length; i++) {\n      stripped.push(result[i].replace(/[\\s,]/g, \"\"));\n    }\n    return stripped;\n  }\n};\n\nexport const handleFactorValueErrorMessage = error => {\n  switch (error.type) {\n    case \"maxNumber\":\n    case \"maxString\":\n      return `Value must be less than or equal to  ${error.max} ${\n        error.type === \"maxString\" ? \"character(s)\" : \"\"\n      }.`;\n\n    case \"minNumber\":\n    case \"minString\":\n      return `Value must be greater than or equal to  ${error.min} ${\n        error.type === \"minString\" ? \"character(s)\" : \"\"\n      }.`;\n\n    case \"scopedUnique\":\n      return `${error.name} must be unique.`;\n\n    default:\n      return \"Unknown Error\";\n  }\n};\n","// Import modules used by both client and server through a single index entry point\n// e.g. useraccounts configuration file.\n\nimport \"../../api/schema-helpers.js\";\n","Accounts.config({\n  sendVerificationEmail: false,\n  forbidClientAccountCreation: true,\n  ambiguousErrorMessages: true\n});\n","// Automated avatar generation\n// Format: /avatars/[identicon|jdenticon]/:playerID\n\nimport crypto from \"crypto\";\nimport Identicon from \"identicon.js\";\nimport jdenticon from \"jdenticon\";\n\nWebApp.connectHandlers.use(\"/avatars\", (req, res) => {\n  const [type, id] = req.url.slice(1).split(\"/\");\n\n  const hash = crypto\n    .createHash(\"sha1\")\n    .update(id)\n    .digest(\"hex\");\n\n  let svg;\n  switch (type) {\n    case \"identicon\":\n      svg = new Identicon(hash, { size: 200, format: \"svg\" }).toString(true);\n      break;\n    case \"jdenticon\":\n      svg = jdenticon.toSvg(hash, 200);\n      break;\n    default:\n      res.writeHead(404, {});\n      res.end();\n      return;\n  }\n\n  res.writeHead(200, { \"Content-Type\": \"image/svg+xml\" });\n  res.end(svg);\n});\n","import log from \"../../lib/log.js\";\n\nconst admins = [];\n\nconst settingsAdmins = Meteor.settings.admins;\nif (settingsAdmins) {\n  if (!_.isArray(settingsAdmins)) {\n    log.error(\"settings: `admins` field is not an array\");\n  } else {\n    settingsAdmins.forEach(({ username, password }) => {\n      if (!username || !password) {\n        log.error(\"settings: `admins` require `username` and `password`\");\n      } else {\n        admins.push({ username, password });\n      }\n    });\n  }\n}\n\nif (admins.length === 0) {\n  const tempPassword =\n    Math.random()\n      .toString(36)\n      .slice(2) +\n    Math.random()\n      .toString(36)\n      .slice(2);\n\n  admins.push({\n    username: \"admin\",\n    password: tempPassword\n  });\n\n  log.warn(\n    `You have not set a custom password for admin login.\nIf you have a settings file (e.g. local.json) with \"admins\" configured, you can\nrestart the app passing in the settings arg: \"meteor --settings local.json\".\nYou can temporarily log in with (reset on each app reload):\n  - username: admin\n  - password: ${tempPassword}\n`\n  );\n}\n\nexport const bootstrapFunctions = [];\nexport const bootstrap = () => {\n  bootstrapFunctions.forEach(f => f());\n  log.debug(\"Bootstrapped!\");\n};\n\nMeteor.startup(() => {\n  bootstrap();\n});\n\nbootstrapFunctions.push(() => {\n  admins.forEach(admin => {\n    const exists = Meteor.users.findOne(_.omit(admin, \"password\"));\n    if (!exists) {\n      Accounts.createUser(admin);\n    } else {\n      Accounts.setPassword(exists._id, admin.password, { logout: false });\n    }\n  });\n});\n","import { GameLobbies } from \"../../api/game-lobbies/game-lobbies.js\";\nimport { Players } from \"../../api/players/players.js\";\n\nexport const connections = {};\n\nconst playerInLobby = (playerId, key = \"playerIds\") => {\n  const query = {\n    status: \"running\",\n    gameId: { $exists: false },\n    timedOutAt: { $exists: false },\n    [key]: playerId\n  };\n\n  return GameLobbies.findOne(query);\n};\n\nexport const playerIdForConn = conn => {\n  return connections[conn.id];\n};\n\nexport const savePlayerId = (conn, playerId) => {\n  connections[conn.id] = playerId;\n\n  const pii = Meteor.settings.collectPII\n    ? { ip: conn.clientAddress, userAgent: conn.httpHeaders[\"user-agent\"] }\n    : {};\n\n  Players.update(playerId, {\n    $set: {\n      online: true,\n      lastLogin: {\n        at: new Date(),\n        ...pii\n      }\n    }\n  });\n\n  const player = Players.findOne(playerId);\n  if (!player.readyAt) {\n    return;\n  }\n\n  const lobby = playerInLobby(playerId, \"queuedPlayerIds\");\n  if (!lobby) {\n    return;\n  }\n\n  GameLobbies.update(lobby._id, {\n    $addToSet: { playerIds: playerId }\n  });\n};\n\nexport const forgetPlayerId = conn => {\n  if (!connections[conn.id]) {\n    return;\n  }\n\n  const playerId = connections[conn.id];\n\n  Players.update(playerId, {\n    $set: { online: false },\n    $unset: {\n      idle: null\n    }\n  });\n\n  const lobby = playerInLobby(playerId);\n\n  if (!lobby) {\n    return;\n  }\n\n  GameLobbies.update(lobby._id, {\n    $pull: { playerIds: playerId }\n  });\n\n  delete connections[conn.id];\n};\n\nMeteor.onConnection(conn => {\n  conn.onClose(() => {\n    forgetPlayerId(conn);\n  });\n});\n","import SimpleSchema from \"simpl-schema\";\nimport colors from \"colors/safe\";\n\nconst tasks = {};\n\nconst Cron = {\n  add(options) {\n    new SimpleSchema({\n      name: { type: String },\n      interval: { type: SimpleSchema.Integer }, // In ms, shouldn't be less than 1000ms\n      task: { type: Function }\n    }).validate(options);\n\n    if (tasks[options.name]) {\n      throw `Cron task with name ${options.name} already exists`;\n    }\n\n    tasks[options.name] = options;\n  }\n};\n\nconst logCron = (Meteor.cron && Meteor.cron.log) || false;\nconst cronLog = msg => logCron && console.info(msg);\nconst cronLogErr = msg => logCron && console.error(msg);\n\nMeteor.startup(() => {\n  for (const name in tasks) {\n    if (!tasks.hasOwnProperty(name)) {\n      continue;\n    }\n    const task = tasks[name];\n\n    Meteor.defer(() => {\n      const taskName = colors.bold(task.name);\n      const startLog = `${colors.green(\"▶\")} ${taskName}`;\n      const doneLog = (took, wait) => {\n        return (\n          `${colors.red(\"◼\")} ${taskName}: Done in ${took}ms. ` +\n          `Waiting for ${wait < 0 ? 0 : wait}ms.`\n        );\n      };\n      const log = {\n        info(msg) {\n          cronLog(`${colors.dim(\"i\")} ${taskName}: ${msg} `);\n        },\n        error(msg) {\n          cronLog(`${colors.red(\"✘\")} ${colors.red(taskName + \":\")} ${msg} `);\n        }\n      };\n      let run = () => {\n        cronLog(startLog);\n        const start = new Date();\n        task.task(log);\n        const took = new Date() - start;\n        const wait = task.interval - took;\n        cronLog(doneLog(took, wait));\n        if (wait <= 0) {\n          Meteor.defer(run);\n        } else {\n          Meteor.setTimeout(run, wait);\n        }\n      };\n      run();\n    });\n  }\n});\n\nexport default Cron;\n","import archiver from \"archiver\";\nimport contentDisposition from \"content-disposition\";\nimport moment from \"moment\";\nimport streams from \"stream-buffers\";\nimport { Batches } from \"../../api/batches/batches.js\";\nimport { FactorTypes } from \"../../api/factor-types/factor-types.js\";\nimport { Factors } from \"../../api/factors/factors.js\";\nimport { GameLobbies } from \"../../api/game-lobbies/game-lobbies.js\";\nimport { Games } from \"../../api/games/games.js\";\nimport { LobbyConfigs } from \"../../api/lobby-configs/lobby-configs.js\";\nimport { PlayerInputs } from \"../../api/player-inputs/player-inputs.js\";\nimport { PlayerLogs } from \"../../api/player-logs/player-logs.js\";\nimport { PlayerRounds } from \"../../api/player-rounds/player-rounds.js\";\nimport { PlayerStages } from \"../../api/player-stages/player-stages.js\";\nimport { Players } from \"../../api/players/players.js\";\nimport { Rounds } from \"../../api/rounds/rounds.js\";\nimport { Stages } from \"../../api/stages/stages.js\";\nimport { Treatments } from \"../../api/treatments/treatments.js\";\nimport log from \"../../lib/log.js\";\n\nexport const BOM = \"\\uFEFF\";\n\n// Get all possible keys in the data field of collections that have a data field\n// such as Players, PlayerStages and PlayerRounds.\nconst getDataKeys = coll => {\n  const map = {};\n  coll.find({}, { fields: { data: 1 } }).forEach(record => {\n    _.keys(record.data).forEach(key => (map[key] = true));\n  });\n  return _.keys(map);\n};\n\nexport const cast = out => {\n  if (_.isArray(out)) {\n    // The cast here will flatten arrays but will still catch dates correctly\n    return out.map(a => cast(a)).join(\",\");\n  }\n  if (_.isDate(out)) {\n    return moment(out)\n      .utc()\n      .format();\n  }\n  if (_.isObject(out)) {\n    return JSON.stringify(out);\n  }\n  if (_.isString(out)) {\n    return out.replace(/\\n/g, \"\\\\n\");\n  }\n\n  if (out === false || out === 0) {\n    return out.toString();\n  }\n  return (out || \"\").toString();\n};\n\nexport const quoteMark = '\"';\nexport const doubleQuoteMark = '\"\"';\nexport const quoteRegex = /\"/g;\n\nexport const encodeCells = line => {\n  const row = line.slice(0);\n  for (var i = 0, len = row.length; i < len; i++) {\n    row[i] = cast(row[i]);\n    if (row[i].indexOf(quoteMark) !== -1) {\n      row[i] =\n        quoteMark + row[i].replace(quoteRegex, doubleQuoteMark) + quoteMark;\n    } else if (row[i].indexOf(\",\") !== -1 || row[i].indexOf(\"\\\\n\") !== -1) {\n      row[i] = quoteMark + row[i] + quoteMark;\n    }\n  }\n  return row.join(\",\") + \"\\n\";\n};\n\nconst batch = (coll, query = {}, sort = {}, limit = 1000) => iterator => {\n  let skip = 0,\n    records;\n  while (!records || records.length > 0) {\n    records = coll.find(query, { sort, limit, skip }).fetch();\n    records.forEach(iterator);\n    skip += limit;\n  }\n};\n\nWebApp.connectHandlers.use(\"/admin/export\", (req, res, next) => {\n  //\n  // Authentication\n  //\n\n  const loginToken = req.cookies && req.cookies.meteor_login_token;\n  let user;\n  if (loginToken) {\n    const hashedToken = Accounts._hashLoginToken(loginToken);\n    const query = { \"services.resume.loginTokens.hashedToken\": hashedToken };\n    const options = { fields: { _id: 1 } };\n    user = Meteor.users.findOne(query, options);\n  }\n\n  if (!user) {\n    res.writeHead(403);\n    res.end();\n    return;\n  }\n\n  //\n  // Format\n  //\n\n  let format;\n  switch (true) {\n    case req.url === \"/\":\n      next();\n      return;\n    case req.url.includes(\"/.json\"):\n      format = \"json\";\n      break;\n    case req.url.includes(\"/.jsonl\"):\n      format = \"jsonl\";\n      break;\n    case req.url.includes(\"/.csv\"):\n      format = \"csv\";\n      break;\n    default:\n      res.writeHead(404);\n      res.end();\n      return;\n  }\n\n  //\n  // Connection bookkeeping\n  //\n\n  let cancelRequest = false,\n    requestFinished = false;\n\n  req.on(\"close\", function(err) {\n    if (!requestFinished) {\n      log.info(\"Export request was cancelled\");\n      cancelRequest = true;\n    }\n  });\n\n  //\n  // Headers\n  //\n\n  const ts = moment().format(\"YYYY-MM-DD HH-mm-ss\");\n  const filename = `Empirica Data - ${ts}`;\n  res.setHeader(\"Content-Disposition\", contentDisposition(filename + \".zip\"));\n  res.setHeader(\"Content-Type\", \"application/zip\");\n  res.writeHead(200);\n\n  //\n  // Create archive\n  //\n\n  var archive = archiver(\"zip\");\n\n  // good practice to catch warnings (ie stat failures and other non-blocking errors)\n  archive.on(\"warning\", function(err) {\n    if (err.code === \"ENOENT\") {\n      log.warn(\"archive warning\", err);\n    } else {\n      log.err(\"archive error\");\n      // throw error\n      throw err;\n    }\n  });\n\n  // good practice to catch this error explicitly\n  archive.on(\"error\", function(err) {\n    log.err(\"archive error\");\n    throw err;\n  });\n\n  // pipe archive data to the file\n  archive.pipe(res);\n\n  //\n  // File creation helper\n  //\n\n  const existingFile = {};\n  const saveFile = (name, keys, func, dataKeys = []) => {\n    if (existingFile[name]) {\n      throw `export filename already exists: ${name}`;\n    }\n    existingFile[name] = true;\n\n    const file = new streams.ReadableStreamBuffer();\n    archive.append(file, { name: `${filename}/${name}.${format}` });\n    if (format === \"csv\") {\n      file.put(BOM);\n      file.put(encodeCells(keys.concat(dataKeys.map(k => `data.${k}`))));\n    }\n\n    format === \"json\" && file.put(\"[\");\n\n    let isFirstLine = true;\n\n    func((data, userData = {}) => {\n      switch (format) {\n        case \"csv\":\n          const out = [];\n          keys.forEach(k => {\n            out.push(data[k]);\n          });\n          dataKeys.forEach(k => {\n            out.push(userData[k]);\n          });\n          file.put(encodeCells(out));\n          break;\n        case \"jsonl\":\n          _.each(userData, (v, k) => (data[`data.${k}`] = v));\n          file.put(JSON.stringify(data) + \"\\n\");\n          break;\n        case \"json\":\n          _.each(userData, (v, k) => (data[`data.${k}`] = v));\n          if (isFirstLine) {\n            isFirstLine = false;\n            file.put(\"\\t\" + JSON.stringify(data));\n          } else {\n            file.put(\",\\t\" + JSON.stringify(data));\n          }\n          break;\n        default:\n          throw `unknown format: ${format}`;\n      }\n    });\n\n    format === \"json\" && file.put(\"\\n]\");\n\n    file.stop();\n  };\n\n  //\n  // Exports\n  //\n\n  const factorTypeFields = [\n    \"_id\",\n    \"name\",\n    \"required\",\n    \"description\",\n    \"type\",\n    \"min\",\n    \"max\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"factor-types\", factorTypeFields, puts => {\n    FactorTypes.find().forEach(ft => puts(_.pick(ft, factorTypeFields)));\n  });\n\n  const factorFields = [\"_id\", \"name\", \"value\", \"factorTypeId\", \"createdAt\"];\n  saveFile(\"factors\", factorFields, puts => {\n    batch(Factors)(f => puts(_.pick(f, factorFields)));\n  });\n\n  const treatmentFields = [\n    \"_id\",\n    \"name\",\n    \"factorIds\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"treatments\", treatmentFields, puts => {\n    batch(Treatments)(f => puts(_.pick(f, treatmentFields)));\n  });\n\n  const lobbyConfigFields = [\n    \"_id\",\n    \"name\",\n    \"timeoutType\",\n    \"timeoutInSeconds\",\n    \"timeoutStrategy\",\n    \"timeoutBots\",\n    \"extendCount\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"lobby-configs\", lobbyConfigFields, puts => {\n    batch(LobbyConfigs)(f => puts(_.pick(f, lobbyConfigFields)));\n  });\n\n  const batchFields = [\n    \"_id\",\n    \"index\",\n    \"assignment\",\n    \"full\",\n    \"runningAt\",\n    \"finishedAt\",\n    \"status\",\n    \"gameIds\",\n    \"gameLobbyIds\",\n    \"createdAt\",\n    \"archivedAt\"\n  ];\n  saveFile(\"batches\", batchFields, puts => {\n    batch(Batches)(f => puts(_.pick(f, batchFields)));\n  });\n\n  const gameLobbyFields = [\n    \"_id\",\n    \"index\",\n    \"availableCount\",\n    \"timeoutStartedAt\",\n    \"timedOutAt\",\n    \"queuedPlayerIds\",\n    \"playerIds\",\n    \"gameId\",\n    \"treatmentId\",\n    \"batchId\",\n    \"lobbyConfigId\",\n    \"createdAt\"\n  ];\n  saveFile(\"game-lobbies\", gameLobbyFields, puts => {\n    batch(GameLobbies)(f => puts(_.pick(f, gameLobbyFields)));\n  });\n\n  const gameFields = [\n    \"_id\",\n    \"finishedAt\",\n    \"gameLobbyId\",\n    \"treatmentId\",\n    \"roundIds\",\n    \"playerIds\",\n    \"batchId\",\n    \"createdAt\"\n  ];\n  const gameDataFields = getDataKeys(Games);\n  saveFile(\n    \"games\",\n    gameFields,\n    puts => {\n      batch(Games)(f =>\n        puts(_.pick(f, gameFields), _.pick(f.data, gameDataFields))\n      );\n    },\n    gameDataFields\n  );\n\n  const playerFields = [\n    \"_id\",\n    \"bot\",\n    \"readyAt\",\n    \"timeoutStartedAt\",\n    \"timeoutWaitCount\",\n    \"exitStepsDone\",\n    \"exitAt\",\n    \"exitStatus\",\n    \"exitReason\",\n    \"retiredAt\",\n    \"retiredReason\",\n    \"createdAt\"\n  ];\n  if (req.query.include_pii === \"true\") {\n    playerFields.splice(1, 0, \"id\", \"urlParams\");\n    playerFields.splice(playerFields.length, 0, \"lastLogin\");\n  }\n\n  const playerDataFields = getDataKeys(Players);\n  saveFile(\n    \"players\",\n    playerFields,\n    puts => {\n      batch(Players)(p =>\n        puts(_.pick(p, playerFields), _.pick(p.data, playerDataFields))\n      );\n    },\n    playerDataFields\n  );\n\n  const roundFields = [\"_id\", \"index\", \"stageIds\", \"gameId\", \"createdAt\"];\n  const roundDataFields = getDataKeys(Rounds);\n  saveFile(\n    \"rounds\",\n    roundFields,\n    puts => {\n      batch(Rounds)(p =>\n        puts(_.pick(p, roundFields), _.pick(p.data, roundDataFields))\n      );\n    },\n    roundDataFields\n  );\n\n  const stageFields = [\n    \"_id\",\n    \"index\",\n    \"name\",\n    \"displayName\",\n    \"startTimeAt\",\n    \"durationInSeconds\",\n    \"roundId\",\n    \"gameId\",\n    \"createdAt\"\n  ];\n  const stageDataFields = getDataKeys(Stages);\n  saveFile(\n    \"stages\",\n    stageFields,\n    puts => {\n      batch(Stages)(p =>\n        puts(_.pick(p, stageFields), _.pick(p.data, stageDataFields))\n      );\n    },\n    stageDataFields\n  );\n\n  const playerRoundFields = [\n    \"_id\",\n    \"batchId\",\n    \"playerId\",\n    \"roundId\",\n    \"gameId\",\n    \"createdAt\"\n  ];\n  const playerRoundDataFields = getDataKeys(PlayerRounds);\n  saveFile(\n    \"player-rounds\",\n    playerRoundFields,\n    puts => {\n      batch(PlayerRounds)(p =>\n        puts(\n          _.pick(p, playerRoundFields),\n          _.pick(p.data, playerRoundDataFields)\n        )\n      );\n    },\n    playerRoundDataFields\n  );\n\n  const playerStageFields = [\n    \"_id\",\n    \"batchId\",\n    \"playerId\",\n    \"stageId\",\n    \"roundId\",\n    \"gameId\",\n    \"createdAt\",\n    \"submittedAt\"\n  ];\n  const playerStageDataFields = getDataKeys(PlayerStages);\n  saveFile(\n    \"player-stages\",\n    playerStageFields,\n    puts => {\n      batch(PlayerStages)(p =>\n        puts(\n          _.pick(p, playerStageFields),\n          _.pick(p.data, playerStageDataFields)\n        )\n      );\n    },\n    playerStageDataFields\n  );\n\n  const playerInputFields = [\"_id\", \"playerId\", \"gameId\", \"createdAt\"];\n  const playerInputDataFields = getDataKeys(PlayerInputs);\n  saveFile(\n    \"player-inputs\",\n    playerInputFields,\n    puts => {\n      batch(PlayerInputs)(p =>\n        puts(\n          _.pick(p, playerInputFields),\n          _.pick(p.data, playerInputDataFields)\n        )\n      );\n    },\n    playerInputDataFields\n  );\n\n  const playerLogFields = [\n    \"_id\",\n    \"playerId\",\n    \"gameId\",\n    \"roundId\",\n    \"stageId\",\n    \"name\",\n    \"jsonData\",\n    \"createdAt\"\n  ];\n  saveFile(\"player-logs\", playerLogFields, puts => {\n    batch(PlayerLogs)(p => puts(_.pick(p, playerLogFields)));\n  });\n\n  archive.finalize();\n  requestFinished = true;\n});\n","// Import server startup through a single index entry point\n\nimport \"../both/index.js\";\nimport \"./auth.js\";\nimport \"./bootstrap.js\";\nimport \"./cron.js\";\nimport \"./register-api.js\";\nimport \"./avatars.js\";\nimport \"./export.js\";\nimport \"./connections.js\";\nimport \"../../lib/utils.js\";\nimport \"../../api/indexes.js\";\n","// Register your apis here\n\nimport \"../../api/admin/methods.js\";\nimport \"../../api/batches/methods.js\";\nimport \"../../api/batches/hooks.js\";\nimport \"../../api/batches/server/publications.js\";\nimport \"../../api/factors/methods.js\";\nimport \"../../api/factors/server/publications.js\";\nimport \"../../api/factor-types/methods.js\";\nimport \"../../api/factor-types/hooks.js\";\nimport \"../../api/factor-types/server/publications.js\";\nimport \"../../api/factor-types/server/bootstrap.js\";\nimport \"../../api/game-lobbies/hooks.js\";\nimport \"../../api/game-lobbies/server/cron.js\";\nimport \"../../api/game-lobbies/server/publications.js\";\nimport \"../../api/games/hooks.js\";\nimport \"../../api/games/methods.js\";\nimport \"../../api/games/server/publications.js\";\nimport \"../../api/games/server/cron.js\";\nimport \"../../api/lobby-configs/methods.js\";\nimport \"../../api/lobby-configs/server/publications.js\";\nimport \"../../api/players/methods.js\";\nimport \"../../api/players/server/publications\";\nimport \"../../api/player-inputs/methods.js\";\nimport \"../../api/player-rounds/methods.js\";\nimport \"../../api/player-stages/methods.js\";\nimport \"../../api/player-stages/hooks.js\";\nimport \"../../api/rounds/methods.js\";\nimport \"../../api/stages/methods.js\";\nimport \"../../api/treatments/methods.js\";\nimport \"../../api/treatments/server/publications.js\";\n"]}}]